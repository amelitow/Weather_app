import * as styled_components_dist_types from 'styled-components/dist/types';
export * from 'styled-components/dist/types';
import * as styled_components from 'styled-components';
import { DefaultTheme, ShouldForwardProp, RuleSet } from 'styled-components';
export { ServerStyleSheet, StyleSheetConsumer, StyleSheetContext, StyleSheetManager, ThemeContext as StyledThemeContext, ThemeProvider as StyledThemeProvider, ThemeConsumer, createGlobalStyle, css, isStyledComponent, keyframes, useTheme as useStyledTheme, withTheme } from 'styled-components';
import { T as Theme, M as MainTheme, G as Gap, B as Breakpoint, L as LayoutColors, A as AccentColors, R as Radius, S as Size, a as Themes, b as TextColors, W as Weight } from './shortenName-CtqOnY5U.js';
export { C as Colors, c as capitalize, e as convertRGBToRGBA, d as darkTheme, g as getId, i as isNumber, f as isString, l as lightTheme, p as pickChild, s as shortenName, t as tonightpassTheme } from './shortenName-CtqOnY5U.js';
import * as React$1 from 'react';
import React__default, { CSSProperties, MutableRefObject } from 'react';
import * as styled_components_native from 'styled-components/native';
import { CSSProperties as CSSProperties$1 } from 'styled-components/native';
import { ThemeProviderProps as ThemeProviderProps$1 } from 'next-themes/dist/types';
import * as react_day_picker from 'react-day-picker';
import { DateFormatter, DayPicker } from 'react-day-picker';
export { DateFormatter, DateRange } from 'react-day-picker';
import * as url from 'url';
import { UrlObject } from 'url';
import { Control as Control$1, FieldValues, ControllerProps } from 'react-hook-form';
import * as styled_components_dist_models_Keyframes from 'styled-components/dist/models/Keyframes';

declare module "styled-components" {
    interface DefaultTheme extends Theme, MainTheme {
    }
}

declare global {
    interface Window {
        next?: any;
    }
}
type window = object;

type KitchnComponent<P, N = React.HTMLAttributes<any>> = {
    /**
     * The root element.
     */
    as?: React.ElementType;
    /**
     * The content, duh.
     */
    children?: React.ReactNode;
    forwardedAs?: React.ElementType;
} & P & Omit<N, keyof P>;
type NormalSizes = "small" | "normal" | "large";
type TriggerTypes = "hover" | "click";
type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

declare const mainTheme: MainTheme;

declare const createTheme: (theme: Theme | (Theme & DeepPartial<MainTheme>)) => DefaultTheme;
declare const defaultThemes: {
    dark: DefaultTheme;
    light: DefaultTheme;
};
declare const excludedProperties: string[];
declare const createThemeVariables: (theme: DefaultTheme, prefix?: string) => DefaultTheme;
declare const convertThemeToCssVariables: (obj: object, prefix?: string) => string;
declare const generateThemes: (staticThemes: Record<string, DefaultTheme>) => Record<string, DefaultTheme>;

type AreaProps = {
    width?: CSSProperties["width"] | keyof Gap | keyof Breakpoint;
    height?: CSSProperties["height"] | keyof Gap | keyof Breakpoint;
    w?: AreaProps["width"];
    h?: AreaProps["height"];
    minWidth?: CSSProperties["minWidth"] | keyof Gap | keyof Breakpoint;
    minHeight?: CSSProperties["minHeight"] | keyof Gap | keyof Breakpoint;
    maxWidth?: CSSProperties["maxWidth"] | keyof Gap | keyof Breakpoint;
    maxHeight?: CSSProperties["maxHeight"] | keyof Gap | keyof Breakpoint;
    minW?: AreaProps["minWidth"];
    minH?: AreaProps["minHeight"];
    maxW?: AreaProps["maxWidth"];
    maxH?: AreaProps["maxHeight"];
};
declare const areaCss: styled_components.RuleSet<AreaProps>;

type BackgroundProps = {
    background?: CSSProperties["background"] | keyof LayoutColors;
    bg?: BackgroundProps["background"];
    backgroundColor?: CSSProperties["backgroundColor"] | keyof LayoutColors;
    bgc?: BackgroundProps["backgroundColor"];
    backgroundAccent?: keyof AccentColors;
    bga?: BackgroundProps["backgroundAccent"];
};
declare const backgroundCss: styled_components.RuleSet<BackgroundProps>;

type BorderProps = {
    borderStyle?: CSSProperties["borderStyle"];
    bs?: BorderProps["borderStyle"];
    borderWidth?: CSSProperties["borderWidth"];
    bw?: BorderProps["borderWidth"];
    borderLeftWidth?: CSSProperties["borderLeftWidth"];
    blw?: BorderProps["borderWidth"];
    borderRightWidth?: CSSProperties["borderRightWidth"];
    brw?: BorderProps["borderWidth"];
    borderTopWidth?: CSSProperties["borderTopWidth"];
    btw?: BorderProps["borderWidth"];
    borderBottomWidth?: CSSProperties["borderBottomWidth"];
    bbw?: BorderProps["borderWidth"];
    borderColor?: CSSProperties["borderColor"] | keyof LayoutColors;
    bc?: BorderProps["borderColor"];
    borderLeftColor?: CSSProperties["borderLeftColor"] | keyof LayoutColors;
    blc?: BorderProps["borderColor"];
    borderRightColor?: CSSProperties["borderRightColor"] | keyof LayoutColors;
    brc?: BorderProps["borderColor"];
    borderTopColor?: CSSProperties["borderTopColor"] | keyof LayoutColors;
    btc?: BorderProps["borderColor"];
    borderBottomColor?: CSSProperties["borderBottomColor"] | keyof LayoutColors;
    bbc?: BorderProps["borderColor"];
    borderRadius?: CSSProperties["borderRadius"] | keyof Radius;
    br?: BorderProps["borderRadius"];
    borderTopLeftRadius?: CSSProperties["borderTopLeftRadius"] | keyof Radius;
    btlr?: BorderProps["borderRadius"];
    borderTopRightRadius?: CSSProperties["borderTopRightRadius"] | keyof Radius;
    btrr?: BorderProps["borderRadius"];
    borderBottomLeftRadius?: CSSProperties["borderBottomLeftRadius"] | keyof Radius;
    bblr?: BorderProps["borderRadius"];
    borderBottomRightRadius?: CSSProperties["borderBottomRightRadius"] | keyof Radius;
    bbrr?: BorderProps["borderRadius"];
};
declare const handleRadius: (theme: DefaultTheme, value?: string | number | keyof Radius) => string | number | undefined;
declare const borderCss: styled_components.RuleSet<BorderProps>;

type MarginProps = {
    margin?: CSSProperties["margin"] | keyof Gap;
    m?: MarginProps["margin"];
    marginLeft?: CSSProperties["marginLeft"] | keyof Gap;
    marginRight?: CSSProperties["marginRight"] | keyof Gap;
    marginTop?: CSSProperties["marginTop"] | keyof Gap;
    marginBottom?: CSSProperties["marginBottom"] | keyof Gap;
    ml?: MarginProps["marginLeft"];
    mr?: MarginProps["marginRight"];
    mt?: MarginProps["marginTop"];
    mb?: MarginProps["marginBottom"];
    mx?: MarginProps["margin"];
    my?: MarginProps["margin"];
};
declare const marginCss: styled_components.RuleSet<MarginProps>;

type PaddingProps = {
    padding?: CSSProperties["padding"] | keyof Gap;
    p?: PaddingProps["padding"];
    paddingLeft?: CSSProperties["paddingLeft"] | keyof Gap;
    paddingRight?: CSSProperties["paddingRight"] | keyof Gap;
    paddingTop?: CSSProperties["paddingTop"] | keyof Gap;
    paddingBottom?: CSSProperties["paddingBottom"] | keyof Gap;
    pl?: PaddingProps["paddingLeft"];
    pr?: PaddingProps["paddingRight"];
    pt?: PaddingProps["paddingTop"];
    pb?: PaddingProps["paddingBottom"];
    px?: PaddingProps["padding"];
    py?: PaddingProps["padding"];
};
declare const paddingCss: styled_components.RuleSet<PaddingProps>;

type PositionProps = {
    position?: CSSProperties["position"];
    pos?: PositionProps["position"];
    zIndex?: CSSProperties["zIndex"];
    zi?: PositionProps["zIndex"];
    left?: CSSProperties["left"] | keyof Gap | keyof Breakpoint;
    right?: CSSProperties["right"] | keyof Gap | keyof Breakpoint;
    top?: CSSProperties["top"] | keyof Gap | keyof Breakpoint;
    bottom?: CSSProperties["bottom"] | keyof Gap | keyof Breakpoint;
    l?: PositionProps["left"];
    r?: PositionProps["right"];
    t?: PositionProps["top"];
    b?: PositionProps["bottom"];
};
declare const positionCss: styled_components.RuleSet<PositionProps>;

type DecoratorProps = {
    display?: CSSProperties$1["display"];
    overflow?: CSSProperties$1["overflow"];
    font?: CSSProperties$1["fontSize"] | keyof Size;
    cursor?: CSSProperties$1["cursor"];
    pointerEvents?: CSSProperties$1["pointerEvents"];
    userSelect?: CSSProperties$1["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps;
declare const handlePixelValue: (value?: string | number) => string | number | undefined;
declare const handleValue: (theme: DefaultTheme, value?: string | number | keyof Gap | keyof Breakpoint) => string | number | undefined;
declare const handleFont: (theme: DefaultTheme, value: string | number | keyof Size) => string | number | undefined;
declare const withDecorator: <T extends object>(WrappedComponent: React__default.ComponentType<T>, passThroughProps?: (keyof DecoratorProps)[]) => styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.PropsWithRef<React__default.PropsWithoutRef<{
    display?: CSSProperties$1["display"];
    overflow?: CSSProperties$1["overflow"];
    font?: CSSProperties$1["fontSize"] | keyof Size;
    cursor?: CSSProperties$1["cursor"];
    pointerEvents?: CSSProperties$1["pointerEvents"];
    userSelect?: CSSProperties$1["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React__default.RefAttributes<HTMLElement>> & styled_components_dist_types.BaseObject, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<React__default.PropsWithoutRef<{
    display?: CSSProperties$1["display"];
    overflow?: CSSProperties$1["overflow"];
    font?: CSSProperties$1["fontSize"] | keyof Size;
    cursor?: CSSProperties$1["cursor"];
    pointerEvents?: CSSProperties$1["pointerEvents"];
    userSelect?: CSSProperties$1["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ThemeContextParams = {
    theme: DefaultTheme;
    setTheme: (theme: keyof Themes | "system") => void;
    setThemeStyle: (theme: DefaultTheme) => void;
    resolvedTheme?: keyof Themes | "system";
    forcedTheme?: keyof Themes | "system";
    systemTheme?: keyof Themes;
    storedTheme?: keyof Themes | "system";
    themes: Record<string, DefaultTheme>;
};
declare const ThemeContext: React__default.Context<ThemeContextParams>;
type ThemeProviderProps = {
    children: React__default.ReactNode;
    theme?: DefaultTheme;
    themes: ThemeContextParams["themes"];
};
declare const ThemeProvider: ({ children, themes, ...props }: ThemeProviderProps) => React__default.JSX.Element;

type KitchnProviderProps = {
    children?: React__default.ReactNode;
    theme?: ThemeProviderProps["theme"];
    enableSystem?: boolean;
    defaultTheme?: keyof Themes | "system";
    forcedTheme?: keyof Themes | "system";
    themes?: Record<string, DefaultTheme>;
    dangerouslyDisableNextThemeProvider?: boolean;
    attribute?: string | "class";
};
declare const KitchnProviderComponent: React__default.FC<KitchnProviderProps>;
declare const shouldForwardProp: ShouldForwardProp<"web">;
type NextThemeProviderWrapperProps = ThemeProviderProps$1 & {
    dangerouslyDisableNextThemeProvider?: boolean;
};
declare const NextThemeProviderWrapper: React__default.FC<NextThemeProviderWrapperProps>;
declare const KitchnProvider: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & KitchnProviderProps & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & KitchnProviderProps & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$H = {
    /**
     * The size of the avatar.
     */
    size?: number | string;
    /**
     * The username of the avatar from tonightpass.com.
     */
    username?: string;
    /**
     * The src of the avatar.
     */
    src?: string;
    /**
     * The text of the avatar
     * (if it's a placeholder).
     */
    text?: string;
    /**
     * The shape of the avatar.
     */
    shape?: "square" | "round";
};
type AvatarProps = KitchnComponent<Props$H>;
declare const AvatarImage: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, {
    shape?: AvatarProps["shape"];
}>> & string;
declare const Avatar: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$H & Omit<React__default.HTMLAttributes<any>, keyof Props$H>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$H> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$H & Omit<React__default.HTMLAttributes<any>, keyof Props$H> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$H & Omit<React__default.HTMLAttributes<any>, keyof Props$H>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$H> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$H & Omit<React__default.HTMLAttributes<any>, keyof Props$H> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$G = {
    /**
     * The members of the avatar group.
     */
    members: {
        username?: AvatarProps["username"];
        src?: AvatarProps["src"];
        text?: AvatarProps["text"];
    }[];
    /**
     * The limit of the avatar group.
     * If the members are more than the limit,
     * the last avatar will be a counter.
     */
    limit?: number;
    /**
     * The size of the avatar.
     */
    size?: number | string;
};
type AvatarGroupProps = KitchnComponent<Props$G>;
declare const AvatarGroup: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.
    /**
     * The members of the avatar group.
     */
    ElementType;
} & Props$G & Omit<React__default.HTMLAttributes<any>, keyof Props$G>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.
    /**
     * The members of the avatar group.
     */
    ElementType;
} & Props$G & Omit<React__default.HTMLAttributes<any>, keyof Props$G>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$F = {
    /**
     * The size of the badge.
     * @default "normal"
     */
    size?: NormalSizes;
    /**
     * The type of the badge.
     * @default "primary"
     */
    type?: "primary" | "secondary" | "info" | "success" | "warning" | "danger";
    /**
     * The font weight of the badge.
     */
    bold?: boolean;
};
type BadgeProps = KitchnComponent<Props$F>;
declare const Badge: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$F & Omit<React__default.HTMLAttributes<any>, keyof Props$F>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$F> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$F & Omit<React__default.HTMLAttributes<any>, keyof Props$F> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$F & Omit<React__default.HTMLAttributes<any>, keyof Props$F>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$F> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$F & Omit<React__default.HTMLAttributes<any>, keyof Props$F> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$E = {
    shape?: "square" | "round";
    size?: NormalSizes;
    loading?: boolean;
    disabled?: boolean;
    width?: number | string;
    prefix?: React__default.ReactNode;
    suffix?: React__default.ReactNode;
    type?: keyof AccentColors;
    htmlType?: React__default.ButtonHTMLAttributes<HTMLButtonElement>["type"];
    variant?: "ghost" | "shadow";
    hover?: {
        background: string;
        color: string;
        border: string;
    };
};
type ButtonProps = KitchnComponent<Props$E, React__default.ButtonHTMLAttributes<HTMLButtonElement>>;
declare const ButtonContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    width?: string | number;
}>> & string;
declare const ButtonPrefix: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    hasContent: boolean;
}>> & string;
declare const ButtonSuffix: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const Button: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$E & Omit<React__default.ButtonHTMLAttributes<HTMLButtonElement>, keyof Props$E> & React__default.RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLButtonElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | keyof Props$E> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$E & Omit<React__default.ButtonHTMLAttributes<HTMLButtonElement>, keyof Props$E>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$E & Omit<React__default.ButtonHTMLAttributes<HTMLButtonElement>, keyof Props$E> & React__default.RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLButtonElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | keyof Props$E> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$E & Omit<React__default.ButtonHTMLAttributes<HTMLButtonElement>, keyof Props$E>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type BoxProps = DecoratorProps;
declare const withBox: <T extends object>(WrappedComponent: React.ComponentType<T>) => styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React$1.PropsWithRef<React$1.PropsWithoutRef<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React$1.RefAttributes<HTMLElement>> & styled_components_dist_types.BaseObject, DecoratorProps>> & string & Omit<React$1.ForwardRefExoticComponent<React$1.PropsWithoutRef<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React$1.RefAttributes<HTMLElement>>, keyof React$1.Component<any, {}, any>>;

type ScaleProps = DecoratorProps;
declare const withScale: <T extends object>(WrappedComponent: React.ComponentType<T>) => styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React$1.PropsWithRef<React$1.PropsWithoutRef<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React$1.RefAttributes<HTMLElement>> & styled_components_dist_types.BaseObject, DecoratorProps>> & string & Omit<React$1.ForwardRefExoticComponent<React$1.PropsWithoutRef<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & T> & React$1.RefAttributes<HTMLElement>>, keyof React$1.Component<any, {}, any>>;

type Direction = "row" | "column";
type Props$D = {
    row?: boolean;
    flex?: number | string;
    direction?: [Direction, Direction, Direction];
    gap?: keyof Gap | number;
    align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
    justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
    header?: boolean;
    section?: boolean;
    form?: boolean;
    label?: boolean;
    footer?: boolean;
    nav?: boolean;
    aside?: boolean;
    main?: boolean;
    wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
    transform?: string;
};
type ContainerProps = Props$D & React__default.ComponentPropsWithRef<"div">;
declare const Container: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<Omit<ContainerProps, "ref"> & React__default.RefAttributes<HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
}, "ref" | "key" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof Props$D> & Props$D & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
}, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<Omit<ContainerProps, "ref"> & React__default.RefAttributes<HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
}, "ref" | "key" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof Props$D> & Props$D & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
}, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$C = {
    /**
     * The link's href.
     */
    href?: string | UrlObject;
    /**
     * The link's classname.
     */
    className?: string;
    /**
     * The link's onClick.
     */
    onClick?: (_event: React__default.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    /**
     * The link's status (if it's disabled or not).
     */
    disabled?: boolean;
    /**
     * The link's variant.
     */
    variant?: "highlight" | "primary" | "secondary" | "blend";
};
type LinkProps = KitchnComponent<Props$C, React__default.AnchorHTMLAttributes<HTMLAnchorElement>>;
declare const Link: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$C & Omit<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, keyof Props$C>, "slot" | "style" | "title" | "children" | "type" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "download" | "hrefLang" | "media" | "ping" | "target" | "referrerPolicy" | keyof Props$C> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$C & Omit<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, keyof Props$C> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$C & Omit<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, keyof Props$C>, "slot" | "style" | "title" | "children" | "type" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "download" | "hrefLang" | "media" | "ping" | "target" | "referrerPolicy" | keyof Props$C> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$C & Omit<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, keyof Props$C> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type TooltipPosition = {
    top: string;
    left: string;
    transform: string;
};
declare const defaultTooltipPosition: {
    top: string;
    left: string;
    transform: string;
};
type Placement = "top" | "topStart" | "topEnd" | "left" | "leftStart" | "leftEnd" | "bottom" | "bottomStart" | "bottomEnd" | "right" | "rightStart" | "rightEnd";
type TooltipReactiveDomReact = {
    top: number;
    bottom: number;
    left: number;
    right: number;
    width: number;
    height: number;
};
declare const getTooltipRect: (ref: React.MutableRefObject<HTMLElement | null>) => TooltipReactiveDomReact;
declare const getPosition: (placement: Placement, rect: TooltipReactiveDomReact, offset: number) => TooltipPosition;
interface TooltipIconPosition {
    top: string;
    left: string;
    right: string;
    bottom: string;
    transform: string;
}
declare const getIconPosition: (placement: Placement, offsetX: string, offsetY: string, offsetAbsolute?: string) => TooltipIconPosition;

type TooltipOnVisibleChange = (visible: boolean) => void;
type TooltipOnContentClick = (e: React__default.MouseEvent, visible: boolean, setVisible: (visible: boolean) => void) => void;
type TooltipTypes = keyof AccentColors;
type TooltipPlacement = Placement;
type TooltipTriggers = TriggerTypes;
type Props$B = {
    text: React__default.ReactNode;
    placement?: TooltipPlacement;
    type?: TooltipTypes;
    visible?: boolean;
    initialVisible?: boolean;
    hideArrow?: boolean;
    trigger?: TooltipTriggers;
    enterDelay?: number;
    leaveDelay?: number;
    offset?: number;
    className?: string;
    portalCss?: RuleSet<object>;
    onVisibleChange?: TooltipOnVisibleChange;
    onContentClick?: TooltipOnContentClick;
};
type TooltipProps = KitchnComponent<Props$B>;
declare const Tooltip: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$B & Omit<React__default.HTMLAttributes<any>, keyof Props$B>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$B & Omit<React__default.HTMLAttributes<any>, keyof Props$B>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type MenuContainerProps = Omit<TooltipProps, "text">;
type MenuButtonProps = ({
    unstyled?: true;
} & React__default.PropsWithChildren) | ({
    unstyled?: false;
} & ButtonProps & DecoratorProps);
type MenuContentProps = ContainerProps;
type MenuItemProps = KitchnComponent<{
    disabled?: boolean;
    active?: boolean;
}, ContainerProps>;
type MenuLinkProps = KitchnComponent<MenuItemProps, LinkProps & DecoratorProps>;
type MenuSectionProps = KitchnComponent<{
    title: string;
}, ContainerProps>;
declare const Menu: {
    Container: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<MenuContainerProps, never>> & string & Omit<({ children, placement, portalCss, hideArrow, trigger, ...props }: MenuContainerProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    Button: ({ unstyled, ...props }: MenuButtonProps) => React__default.JSX.Element;
    Content: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
        active?: boolean;
    } & Omit<ContainerProps, "active" | "disabled"> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, never>> & string & Omit<({ children, ...props }: MenuItemProps & DecoratorProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    Item: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components_dist_types.Substitute<styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, Omit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "ref"> & {
        ref?: ((instance: HTMLLIElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLLIElement> | null | undefined;
    }>, {
        "data-menuitem"?: boolean;
    }>, "ref" | "key" | "active" | "disabled" | "as" | "forwardedAs" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    }> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
        active?: boolean;
    } & Omit<ContainerProps, "active" | "disabled">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components_dist_types.Substitute<styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, Omit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "ref"> & {
        ref?: ((instance: HTMLLIElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLLIElement> | null | undefined;
    }>, {
        "data-menuitem"?: boolean;
    }>, "ref" | "key" | "active" | "disabled" | "as" | "forwardedAs" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    }> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
        active?: boolean;
    } & Omit<ContainerProps, "active" | "disabled">, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Link: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
        active?: boolean;
    } & Omit<ContainerProps, "active" | "disabled"> & Omit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        href?: string | url.UrlObject;
        className?: string;
        onClick?: (_event: React__default.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
        disabled?: boolean;
        variant?: "highlight" | "primary" | "secondary" | "blend";
    } & Omit<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, keyof {
        href?: string | url.UrlObject;
        className?: string;
        onClick?: (_event: React__default.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
        disabled?: boolean;
        variant?: "highlight" | "primary" | "secondary" | "blend";
    }> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, "ref" | "key" | "active" | "disabled" | "as" | "forwardedAs" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    }>, never>> & string & Omit<(props: MenuLinkProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    Section: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        title: string;
    } & Omit<ContainerProps, "title">, never>> & string & Omit<({ title, children, ...props }: MenuSectionProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    Divider: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
};

type Props$A = {
    format?: Intl.DateTimeFormatOptions;
    placeholder?: string;
    multiplePlaceholder?: string;
    rangePlaceholder?: string;
    menuContainerProps?: MenuContainerProps & DecoratorProps;
    menuButtonProps?: MenuButtonProps & DecoratorProps;
    time?: boolean;
    timeStartLabel?: string;
    timeEndLabel?: string;
} & React__default.ComponentProps<typeof DayPicker>;
type CalendarProps = Props$A;
declare const formatWeekdayName: DateFormatter;
declare const formatCaption: DateFormatter;
declare const Calendar: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<(Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    format?: Intl.DateTimeFormatOptions;
    placeholder?: string;
    multiplePlaceholder?: string;
    rangePlaceholder?: string;
    menuContainerProps?: MenuContainerProps & DecoratorProps;
    menuButtonProps?: MenuButtonProps & DecoratorProps;
    time?: boolean;
    timeStartLabel?: string;
    timeEndLabel?: string;
} & react_day_picker.DayPickerDefaultProps, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    format?: Intl.DateTimeFormatOptions;
    placeholder?: string;
    multiplePlaceholder?: string;
    rangePlaceholder?: string;
    menuContainerProps?: MenuContainerProps & DecoratorProps;
    menuButtonProps?: MenuButtonProps & DecoratorProps;
    time?: boolean;
    timeStartLabel?: string;
    timeEndLabel?: string;
} & react_day_picker.DayPickerSingleProps, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    format?: Intl.DateTimeFormatOptions;
    placeholder?: string;
    multiplePlaceholder?: string;
    rangePlaceholder?: string;
    menuContainerProps?: MenuContainerProps & DecoratorProps;
    menuButtonProps?: MenuButtonProps & DecoratorProps;
    time?: boolean;
    timeStartLabel?: string;
    timeEndLabel?: string;
} & react_day_picker.DayPickerMultipleProps, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    format?: Intl.DateTimeFormatOptions;
    placeholder?: string;
    multiplePlaceholder?: string;
    rangePlaceholder?: string;
    menuContainerProps?: MenuContainerProps & DecoratorProps;
    menuButtonProps?: MenuButtonProps & DecoratorProps;
    time?: boolean;
    timeStartLabel?: string;
    timeEndLabel?: string;
} & react_day_picker.DayPickerRangeProps, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}), DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<({
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & (MarginProps & PaddingProps & (PositionProps & styled_components_dist_types.Substitute<Props$A & styled_components_dist_types.BaseObject, styled_components_dist_types.BaseObject>))) & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$z = {
    checked?: boolean;
    indeterminate?: boolean;
    disabled?: boolean;
    label?: string;
    fullWidth?: boolean;
};
type CheckboxProps = KitchnComponent<Props$z, React__default.InputHTMLAttributes<HTMLInputElement>>;
declare const CheckboxCheckmark: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    checked?: boolean;
    indeterminate?: boolean;
    disabled?: boolean;
}>> & string;
declare const CheckboxContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, {
    disabled?: boolean;
    fullWidth?: boolean;
    label: boolean;
}>> & string;
declare const CheckboxLabel: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
type CheckboxCheckContainerProps = KitchnComponent<{
    label?: boolean;
}, React__default.HTMLAttributes<HTMLDivElement>>;
declare const CheckboxCheckContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    label?: boolean;
} & Omit<React__default.HTMLAttributes<HTMLDivElement>, "label">, never>> & string & Omit<React__default.FC<CheckboxCheckContainerProps>, keyof React__default.Component<any, {}, any>>;
declare const CheckboxCheck: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const CheckboxContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const StyledCheckbox: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, never>> & string;
declare const Checkbox: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$z & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$z>, "form" | "slot" | "style" | "title" | "pattern" | "size" | "name" | "children" | "value" | "width" | "type" | "id" | "hidden" | "color" | "height" | "content" | "multiple" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "alt" | "src" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "autoComplete" | "accept" | "capture" | "list" | "max" | "maxLength" | "min" | "minLength" | "placeholder" | "readOnly" | "required" | "step" | keyof Props$z> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$z & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$z> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$z & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$z>, "form" | "slot" | "style" | "title" | "pattern" | "size" | "name" | "children" | "value" | "width" | "type" | "id" | "hidden" | "color" | "height" | "content" | "multiple" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "alt" | "src" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "autoComplete" | "accept" | "capture" | "list" | "max" | "maxLength" | "min" | "minLength" | "placeholder" | "readOnly" | "required" | "step" | keyof Props$z> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$z & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$z> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$y = {
    title: string;
};
type CodeProps = KitchnComponent<Props$y, React__default.HTMLAttributes<HTMLPreElement>>;
declare const CodeHeader: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>> & string;
declare const CodeTitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const CodeContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>> & string;
declare const Code: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$y & Omit<React__default.HTMLAttributes<HTMLPreElement>, "title">, "slot" | "style" | "title" | "children" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$y & Omit<React__default.HTMLAttributes<HTMLPreElement>, "title"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$y & Omit<React__default.HTMLAttributes<HTMLPreElement>, "title">, "slot" | "style" | "title" | "children" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$y & Omit<React__default.HTMLAttributes<HTMLPreElement>, "title"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type InlineCodeProps = KitchnComponent<object, React__default.HTMLAttributes<HTMLElement>>;
declare const InlineCode: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.HTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.HTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$x = {
    title: string;
    subtitle?: React__default.ReactNode;
    children?: React__default.ReactNode;
    defaultExpanded?: boolean;
    card?: boolean;
    size?: "normal" | "small" | "medium";
};
type CollapseProps = KitchnComponent<Props$x>;
declare const Collapse: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$x & Omit<React__default.HTMLAttributes<any>, keyof Props$x>, "slot" | "style" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$x> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$x & Omit<React__default.HTMLAttributes<any>, keyof Props$x> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$x & Omit<React__default.HTMLAttributes<any>, keyof Props$x>, "slot" | "style" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$x> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$x & Omit<React__default.HTMLAttributes<any>, keyof Props$x> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$w = {
    value: string;
    isLabelOnly?: boolean;
};
type ComboboxItemProps = KitchnComponent<Props$w, ContainerProps>;
declare const ComboboxItem: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$w & Omit<ContainerProps, keyof Props$w>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$w & Omit<ContainerProps, keyof Props$w>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type IconSource = {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} | {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
};
type Props$v = IconSource & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
};
type IconProps = KitchnComponent<Props$v, React__default.SVGProps<SVGSVGElement>>;
declare const Icon: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<(Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}), DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<(Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> | Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> | Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> | Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string;
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref">) & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$u = {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    /**
     * The font size.
     */
    size?: keyof Size | number | string;
    /**
     * The line height.
     */
    lineHeight?: number | string;
    /**
     * The font weight.
     */
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    /**
     * Text transform short hand.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform
     * @default "initial"
     */
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    /**
     * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.
     */
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    /**
     * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.
     */
    accent?: keyof AccentColors;
    /**
     * Truncate a single or multiple line(s). If you pass truncate, make sure to pass `title` so that the full value is shown on hover.
     * @default false
     */
    truncate?: boolean | number;
    /**
     * Text alignment short hand.
     */
    align?: "left" | "center" | "right";
    /**
     * If text is `truncated`, this should be the full text.
     */
    title?: string;
    /**
     * Whether the text should wrap lines
     * @type {boolean}
     * @default true
     */
    wrap?: boolean;
    /**
     * 	Whether to use the monospace font.
     * @type {boolean}
     * @default false
     */
    monospace?: boolean;
};
type TextProps = KitchnComponent<Props$u>;
declare const Text: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$u & Omit<React__default.HTMLAttributes<any>, keyof Props$u>, "slot" | "style" | "children" | "id" | "hidden" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$u> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$u & Omit<React__default.HTMLAttributes<any>, keyof Props$u> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$u & Omit<React__default.HTMLAttributes<any>, keyof Props$u>, "slot" | "style" | "children" | "id" | "hidden" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$u> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$u & Omit<React__default.HTMLAttributes<any>, keyof Props$u> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$t = {
    placeholder?: string;
    size?: NormalSizes;
    prefix?: JSX.Element | string;
    suffix?: JSX.Element | string;
    prefixIcon?: IconProps["icon"];
    suffixIcon?: IconProps["icon"];
    onIconClick?: (_event: React__default.MouseEvent<SVGSVGElement>) => void;
    clickableIcon?: boolean;
    initialValue?: string;
    value?: string;
    disabled?: boolean;
    prefixStyling?: boolean;
    suffixStyling?: boolean;
    prefixContainer?: boolean;
    suffixContainer?: boolean;
    clearable?: boolean;
    width?: number | string;
    w?: Props$t["width"];
    error?: string;
    readOnly?: boolean;
    onClearClick?: (_event: React__default.MouseEvent<SVGElement>) => void;
    type?: keyof AccentColors;
    label?: string;
    htmlType?: React__default.InputHTMLAttributes<HTMLInputElement>["type"];
};
type InputProps = KitchnComponent<Props$t, React__default.InputHTMLAttributes<HTMLInputElement>>;
declare const InputContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    disabled: InputProps["disabled"];
    width: InputProps["width"];
    size: InputProps["size"];
}>> & string;
declare const InputField: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$t & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$t> & {
    $type: InputProps["type"];
    focus: boolean;
}>> & string;
declare const InputPrefix: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    size: InputProps["size"];
    disabled: InputProps["disabled"];
    prefixStyling: InputProps["prefixStyling"];
    error: InputProps["error"];
    focus: boolean;
    type: InputProps["type"];
}>> & string;
declare const InputSuffix: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    size: InputProps["size"];
    disabled: InputProps["disabled"];
    suffixStyling: InputProps["suffixStyling"];
    error: InputProps["error"];
    focus: boolean;
    type: InputProps["type"];
}>> & string;
declare const InputSuffixPart: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    disabled: InputProps["disabled"];
    size: InputProps["size"];
    suffix: InputProps["suffix"];
    suffixContainer: InputProps["suffixContainer"];
    suffixStyling: InputProps["suffixStyling"];
    error: InputProps["error"];
    focus: boolean;
    type: InputProps["type"];
    lastItem?: boolean;
}>> & string;
declare const InputClear: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "size" | "type" | "disabled" | "error" | "focus" | "suffix" | "suffixStyling" | "suffixContainer" | "lastItem"> & {
    disabled: InputProps["disabled"];
    size: InputProps["size"];
    suffix: InputProps["suffix"];
    suffixContainer: InputProps["suffixContainer"];
    suffixStyling: InputProps["suffixStyling"];
    error: InputProps["error"];
    focus: boolean;
    type: InputProps["type"];
    lastItem?: boolean;
}, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLSpanElement> | null | undefined;
}, {
    visible: boolean;
}>> & string;
declare const InputError: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<styled_components.FastOmit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    label?: boolean | string;
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
} & Omit<React__default.HTMLAttributes<any>, keyof {
    label?: boolean | string;
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
}>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof {
    label?: boolean | string;
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
}> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    label?: boolean | string;
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
} & Omit<React__default.HTMLAttributes<any>, keyof {
    label?: boolean | string;
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
}> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, {
    width: InputProps["width"];
}>> & string;
declare const InputLabel: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}>, never>> & string & Omit<(props: TextProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
declare const Input: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$t & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$t> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$t & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof Props$t> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ComboboxOption = {
    label: string;
    value: string;
};
type ComboboxOptions = (typeof ComboboxItem | ComboboxOption | React__default.ReactElement<ComboboxItemProps>)[];
type Props$s = {
    options?: ComboboxOptions;
    containerProps?: ContainerProps;
    initialValue?: string;
    onChange?: (value: string) => void;
    onSearch?: (value: string) => void;
    onSelect?: (value: string) => void;
    disableMatchWidth?: boolean;
    disableFreeSolo?: boolean;
    value?: string;
    clearable?: boolean;
    searching?: boolean;
};
type ComboboxProps = KitchnComponent<Props$s, InputProps>;
declare const Combobox: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$s & Omit<InputProps, keyof Props$s> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$s & Omit<InputProps, keyof Props$s> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$r = {
    visible: boolean;
    disableMatchWidth?: boolean;
};
type ComboboxDropdownProps = KitchnComponent<Props$r>;
declare const ComboboxDropdown: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$r & Omit<React__default.HTMLAttributes<any>, keyof Props$r> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$r & Omit<React__default.HTMLAttributes<any>, keyof Props$r> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$q = {
    textProps?: TextProps;
};
type ComboboxEmptyProps = KitchnComponent<Props$q, ContainerProps>;
declare const ComboboxEmpty: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$q & Omit<ContainerProps, "textProps">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$q & Omit<ContainerProps, "textProps">, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$p = {
    textProps?: TextProps;
};
type ComboboxSearchingProps = KitchnComponent<Props$p, ContainerProps>;
declare const ComboboxSearching: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$p & Omit<ContainerProps, "textProps">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$p & Omit<ContainerProps, "textProps">, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$o = {
    show: boolean;
    onDismiss?: () => void;
    onAnimationDone?: () => void;
    children?: React__default.ReactNode;
    height?: number;
};
type DrawerProps = KitchnComponent<Props$o>;
declare const DrawerContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    animationState: "entrance" | "exit";
    height?: number;
}>> & string;
declare const Drawer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$o & Omit<React__default.HTMLAttributes<any>, keyof Props$o>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$o> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$o & Omit<React__default.HTMLAttributes<any>, keyof Props$o> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$o & Omit<React__default.HTMLAttributes<any>, keyof Props$o>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$o> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$o & Omit<React__default.HTMLAttributes<any>, keyof Props$o> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

interface Props$n {
    visible: boolean;
    disableMatchWidth?: boolean;
    parent?: React__default.MutableRefObject<HTMLElement | null> | undefined;
}
type DropdownProps = KitchnComponent<Props$n>;
declare const Dropdown: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$n & Omit<React__default.HTMLAttributes<any>, keyof Props$n> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$n & Omit<React__default.HTMLAttributes<any>, keyof Props$n> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$m = {
    thumbnail?: React__default.ReactNode;
    menuContent?: React__default.ReactNode;
    actions?: React__default.ReactNode;
    checkbox?: React__default.ReactNode;
    placeholder?: boolean;
};
type EntityProps = KitchnComponent<Props$m, ContainerProps>;
declare const Entity: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$m & Omit<ContainerProps, keyof Props$m>, never>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$m & Omit<ContainerProps, keyof Props$m>, never>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type EntityFieldTitleProps = KitchnComponent<{
    active?: boolean;
    label?: boolean;
}, TextProps>;
declare const EntityFieldTitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    active?: boolean;
    label?: boolean;
} & Omit<TextProps, "label" | "active">, never>> & string & Omit<({ active, label, ...props }: EntityFieldTitleProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
declare const EntityFieldDescription: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}>, never>> & string & Omit<({ ...props }: TextProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
type Props$l = {
    title?: React__default.ReactNode;
    description?: React__default.ReactNode;
    active?: boolean;
    label?: boolean;
    placeholder?: boolean;
    avatar?: React__default.ReactNode;
};
type EntityFieldProps = KitchnComponent<Props$l, ContainerProps>;
declare const EntityField: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$l & Omit<ContainerProps, keyof Props$l>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$l & Omit<ContainerProps, keyof Props$l>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$k = {
    /**
     * The label of the error.
     * @default true
     */
    label?: boolean | string;
    /**
     * The size of the error.
     * @default "normal"
     */
    size?: NormalSizes;
    error?: {
        message: string;
        action?: string;
        link?: string;
    };
};
type ErrorProps = KitchnComponent<Props$k>;
declare const ErrorIconContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const ErrorTextContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const ErrorText: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<styled_components.FastOmit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}>, "slot" | "style" | "children" | "id" | "hidden" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, {
    size: ErrorProps["size"];
}>> & string;
declare const ErrorLabel: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>> & string;
declare const ErrorContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const ErrorAction: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, never>> & string;
declare const ErrorActionIcon: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<styled_components_dist_types.Substitute<(Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}) | (Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
}, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "size" | "radius" | "name" | "values" | "fill" | "children" | "ref" | "width" | "type" | "id" | "local" | "color" | "r" | "display" | "overflow" | "clip" | "fontSize" | "cursor" | "pointerEvents" | "stroke" | "height" | "key" | "end" | "accumulate" | "unicode" | "x" | "y" | "icon" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "suppressHydrationWarning" | "className" | "lang" | "tabIndex" | "role" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "href" | "media" | "target" | "crossOrigin" | "src" | "method" | "max" | "min" | "align" | "accentHeight" | "additive" | "alignmentBaseline" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "yChannelSelector" | "z" | "zoomAndPan" | "accent" | "clickable"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
    src: string;
    alt?: string;
} & {
    size?: keyof Size | number | string;
    color?: keyof TextColors | string;
    accent?: keyof AccentColors;
    align?: "top" | "middle" | "bottom";
    clickable?: boolean;
} & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}), DecoratorProps> & styled_components_dist_types.BaseObject, styled_components_dist_types.BaseObject>> & string;
declare const Error: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$k & Omit<React__default.HTMLAttributes<any>, keyof Props$k>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$k> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$k & Omit<React__default.HTMLAttributes<any>, keyof Props$k> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$k & Omit<React__default.HTMLAttributes<any>, keyof Props$k>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$k> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$k & Omit<React__default.HTMLAttributes<any>, keyof Props$k> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$j = {
    tabs?: boolean;
    disabled?: boolean;
    highlight?: boolean;
    type?: keyof AccentColors;
    children?: React__default.ReactNode;
};
type FieldsetProps = KitchnComponent<Props$j>;
declare const isFieldsetContainer: (child: React__default.ReactNode) => child is React__default.ReactElement<any>;
type FieldsetTabsProps = KitchnComponent<{
    tabs: string[];
}, ContainerProps>;
declare const Fieldset: {
    Container: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$j & Omit<React__default.HTMLAttributes<any>, keyof Props$j>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$j> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$j & Omit<React__default.HTMLAttributes<any>, keyof Props$j> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$j & Omit<React__default.HTMLAttributes<any>, keyof Props$j>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$j> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$j & Omit<React__default.HTMLAttributes<any>, keyof Props$j> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Content: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<Omit<ContainerProps, "ref"> & React__default.RefAttributes<HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, "ref" | "key" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    }> & {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, "disabled"> & {
        disabled?: boolean;
    }, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<Omit<ContainerProps, "ref"> & React__default.RefAttributes<HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, "ref" | "key" | keyof React__default.HTMLAttributes<HTMLDivElement> | keyof {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    }> & {
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, "disabled"> & {
        disabled?: boolean;
    }, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Title: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, "disabled"> & {
        disabled?: boolean;
    } & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, "disabled"> & {
        disabled?: boolean;
    } & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Subtitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, "slot" | "style" | "children" | "id" | "hidden" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<styled_components.FastOmit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, "slot" | "style" | "children" | "id" | "hidden" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, "display" | "overflow" | "cursor" | "pointerEvents" | "userSelect" | "font" | keyof AreaProps | keyof BackgroundProps | keyof BorderProps | keyof MarginProps | keyof PaddingProps | keyof PositionProps> & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Footer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, "disabled" | "highlight"> & {
        disabled?: boolean;
        highlight?: boolean;
    }, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, "disabled" | "highlight"> & {
        disabled?: boolean;
        highlight?: boolean;
    }, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    FooterStatus: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    FooterActions: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Tabs: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        tabs: string[];
    } & Omit<ContainerProps, "tabs">, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        tabs: string[];
    } & Omit<ContainerProps, "tabs">, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
};

type Props$i = {
    /**
     * The subfooter of the footer.
     */
    subfooter?: React__default.ReactNode;
    children?: React__default.ReactNode;
};
type FooterProps = KitchnComponent<Props$i>;
declare const FooterNav: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>> & string;
declare const FooterColumn: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
type GroupProps = {
    title: string;
};
type FooterGroupProps = KitchnComponent<GroupProps>;
declare const FooterGroup: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & GroupProps & Omit<React__default.HTMLAttributes<any>, "title">, FooterGroupProps>> & string & Omit<({ title, children, ...props }: FooterGroupProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
declare const FooterGroupTitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, never>> & string;
type FooterLinkProps = KitchnComponent<{
    href: LinkProps["href"];
}, React__default.HTMLProps<HTMLLIElement>>;
declare const FooterLink: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    href: LinkProps["href"];
} & Omit<React__default.HTMLProps<HTMLLIElement>, "href">, "ref"> & {
    ref?: ((instance: HTMLLIElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLLIElement> | null | undefined;
}, never>> & string & Omit<({ children, href, ...props }: FooterLinkProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
declare const SubFooter: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>> & string;
declare const Footer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$i & Omit<React__default.HTMLAttributes<any>, keyof Props$i>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$i> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$i & Omit<React__default.HTMLAttributes<any>, keyof Props$i> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$i & Omit<React__default.HTMLAttributes<any>, keyof Props$i>, "slot" | "style" | "title" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$i> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$i & Omit<React__default.HTMLAttributes<any>, keyof Props$i> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

declare const mainCss: styled_components.RuleSet<object>;

declare const resetCss: styled_components.RuleSet<object>;

declare const themeCss: styled_components.RuleSet<{
    staticThemes: Themes;
    attribute: KitchnProviderProps["attribute"];
}>;

declare const GlobalStyle: React$1.NamedExoticComponent<styled_components.ExecutionProps & {
    staticThemes: Themes;
    attribute: KitchnProviderProps["attribute"];
}>;

interface ReactiveDomReact {
    top: number;
    left: number;
    right: number;
    width: number;
    height: number;
    elementTop: number;
}
declare const getRefRect: (ref?: React__default.MutableRefObject<HTMLElement | null>, getContainer?: () => HTMLElement | null) => ReactiveDomReact;
declare const getEventRect: (event?: React__default.MouseEvent<HTMLElement> | React__default.FocusEvent<HTMLElement>, getContainer?: () => HTMLElement | null) => ReactiveDomReact;
declare const isUnplacedRect: (rect?: ReactiveDomReact) => boolean;
declare const useRect: (initialState?: ReactiveDomReact | (() => ReactiveDomReact)) => {
    rect: ReactiveDomReact;
    setRect: (event: React__default.MouseEvent<HTMLElement> | React__default.FocusEvent<HTMLElement>, getContainer?: () => HTMLElement | null) => void;
    setRectWithRef: (ref: React__default.MutableRefObject<HTMLElement | null>, getContainer?: () => HTMLElement | null) => void;
};

type HighlightProps = KitchnComponent<{
    rect: ReactiveDomReact;
    visible?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    activeOpacity?: number;
}>;
type HighlightPosition = {
    width: string;
    left: string;
    height: string;
    top: string;
    transition: string;
};
declare const HighlightContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, HighlightPosition>> & string;
declare const Highlight: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    rect: ReactiveDomReact;
    visible?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    activeOpacity?: number;
} & Omit<React__default.HTMLAttributes<any>, "rect" | "visible" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity">, "rect" | "visible" | keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    rect: ReactiveDomReact;
    visible?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    activeOpacity?: number;
} & Omit<React__default.HTMLAttributes<any>, "rect" | "visible" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    rect: ReactiveDomReact;
    visible?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    activeOpacity?: number;
} & Omit<React__default.HTMLAttributes<any>, "rect" | "visible" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity">, "rect" | "visible" | keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    rect: ReactiveDomReact;
    visible?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    activeOpacity?: number;
} & Omit<React__default.HTMLAttributes<any>, "rect" | "visible" | "hoverHeightRatio" | "hoverWidthRatio" | "activeOpacity"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$h = {
    htmlWidth?: string | number;
    htmlHeight?: string | number;
    src: string;
    alt: string;
    objectFit?: "cover" | "contain" | "fill" | "scale-down" | "inherit" | "initial" | "unset" | "none";
};
type ImageProps = KitchnComponent<Props$h, React__default.ImgHTMLAttributes<HTMLImageElement>>;
declare const Image: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$h & Omit<React__default.ImgHTMLAttributes<HTMLImageElement>, keyof Props$h>, "slot" | "style" | "title" | "children" | "width" | "id" | "hidden" | "color" | "height" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "useMap" | "referrerPolicy" | "crossOrigin" | "loading" | "decoding" | "fetchPriority" | "sizes" | "srcSet" | keyof Props$h> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$h & Omit<React__default.ImgHTMLAttributes<HTMLImageElement>, keyof Props$h> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$h & Omit<React__default.ImgHTMLAttributes<HTMLImageElement>, keyof Props$h>, "slot" | "style" | "title" | "children" | "width" | "id" | "hidden" | "color" | "height" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "useMap" | "referrerPolicy" | "crossOrigin" | "loading" | "decoding" | "fetchPriority" | "sizes" | "srcSet" | keyof Props$h> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$h & Omit<React__default.ImgHTMLAttributes<HTMLImageElement>, keyof Props$h> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ControllerPropsEx<F extends FieldValues> = Omit<ControllerProps<F>, "render" | "control" | "name">;
declare const ControlledInput: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    name: string;
    control: Control$1<any>;
    controllerProps?: ControllerPropsEx<FieldValues> | undefined;
} & Omit<InputProps, "name" | "ref" | "value" | "onBlur" | "onChange" | "errorMessage"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    placeholder?: string;
    size?: NormalSizes;
    prefix?: JSX.Element | string;
    suffix?: JSX.Element | string;
    prefixIcon?: IconProps["icon"];
    suffixIcon?: IconProps["icon"];
    onIconClick?: (_event: React__default.MouseEvent<SVGSVGElement>) => void;
    clickableIcon?: boolean;
    initialValue?: string;
    value?: string;
    disabled?: boolean;
    prefixStyling?: boolean;
    suffixStyling?: boolean;
    prefixContainer?: boolean;
    suffixContainer?: boolean;
    clearable?: boolean;
    width?: number | string;
    w?: string | number | undefined;
    error?: string;
    readOnly?: boolean;
    onClearClick?: (_event: React__default.MouseEvent<SVGElement>) => void;
    type?: keyof AccentColors;
    label?: string;
    htmlType?: React__default.InputHTMLAttributes<HTMLInputElement>["type"];
} & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof {
    placeholder?: string;
    size?: NormalSizes;
    prefix?: JSX.Element | string;
    suffix?: JSX.Element | string;
    prefixIcon?: IconProps["icon"];
    suffixIcon?: IconProps["icon"];
    onIconClick?: (_event: React__default.MouseEvent<SVGSVGElement>) => void;
    clickableIcon?: boolean;
    initialValue?: string;
    value?: string;
    disabled?: boolean;
    prefixStyling?: boolean;
    suffixStyling?: boolean;
    prefixContainer?: boolean;
    suffixContainer?: boolean;
    clearable?: boolean;
    width?: number | string;
    w?: string | number | undefined;
    error?: string;
    readOnly?: boolean;
    onClearClick?: (_event: React__default.MouseEvent<SVGElement>) => void;
    type?: keyof AccentColors;
    label?: string;
    htmlType?: React__default.InputHTMLAttributes<HTMLInputElement>["type"];
}> & React__default.RefAttributes<HTMLInputElement>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
    name: string;
    control: Control$1<any>;
    controllerProps?: ControllerPropsEx<FieldValues> | undefined;
} & Omit<InputProps, "name" | "ref" | "value" | "onBlur" | "onChange" | "errorMessage"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    placeholder?: string;
    size?: NormalSizes;
    prefix?: JSX.Element | string;
    suffix?: JSX.Element | string;
    prefixIcon?: IconProps["icon"];
    suffixIcon?: IconProps["icon"];
    onIconClick?: (_event: React__default.MouseEvent<SVGSVGElement>) => void;
    clickableIcon?: boolean;
    initialValue?: string;
    value?: string;
    disabled?: boolean;
    prefixStyling?: boolean;
    suffixStyling?: boolean;
    prefixContainer?: boolean;
    suffixContainer?: boolean;
    clearable?: boolean;
    width?: number | string;
    w?: string | number | undefined;
    error?: string;
    readOnly?: boolean;
    onClearClick?: (_event: React__default.MouseEvent<SVGElement>) => void;
    type?: keyof AccentColors;
    label?: string;
    htmlType?: React__default.InputHTMLAttributes<HTMLInputElement>["type"];
} & Omit<React__default.InputHTMLAttributes<HTMLInputElement>, keyof {
    placeholder?: string;
    size?: NormalSizes;
    prefix?: JSX.Element | string;
    suffix?: JSX.Element | string;
    prefixIcon?: IconProps["icon"];
    suffixIcon?: IconProps["icon"];
    onIconClick?: (_event: React__default.MouseEvent<SVGSVGElement>) => void;
    clickableIcon?: boolean;
    initialValue?: string;
    value?: string;
    disabled?: boolean;
    prefixStyling?: boolean;
    suffixStyling?: boolean;
    prefixContainer?: boolean;
    suffixContainer?: boolean;
    clearable?: boolean;
    width?: number | string;
    w?: string | number | undefined;
    error?: string;
    readOnly?: boolean;
    onClearClick?: (_event: React__default.MouseEvent<SVGElement>) => void;
    type?: keyof AccentColors;
    label?: string;
    htmlType?: React__default.InputHTMLAttributes<HTMLInputElement>["type"];
}> & React__default.RefAttributes<HTMLInputElement>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$g = {
    hideToggle?: boolean;
};
type InpuPasswordProps = KitchnComponent<Props$g, InputProps>;
declare const PasswordInput: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$g & Omit<InputProps, "hideToggle"> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$g & Omit<InputProps, "hideToggle"> & React__default.RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLInputElement> | null | undefined;
}, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ListItemProps = KitchnComponent<object, React__default.LiHTMLAttributes<HTMLElement>>;
declare const ListItem: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.LiHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.LiHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type OrderedListProps = KitchnComponent<object, React__default.OlHTMLAttributes<HTMLElement>>;
declare const OrderedList: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.OlHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.OlHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type UnorderedListProps = KitchnComponent<object, React__default.OlHTMLAttributes<HTMLElement>>;
declare const UnorderedList: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.OlHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.OlHTMLAttributes<HTMLElement>, never>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$f = {
    /**
     * The link's id.
     */
    id: string;
};
type FragmentLinkProps = KitchnComponent<Props$f, LinkProps>;
declare const FragmentLink: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$f & Omit<LinkProps, "id">, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$f & Omit<LinkProps, "id">, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$e = {
    active: boolean;
    onAnimationDone?: () => void;
    onClickOutside?: () => void;
    onEnterKeyPress?: () => void;
    children?: React__default.ReactNode;
};
type ModalProps = KitchnComponent<Props$e>;
type ModalActionProps = KitchnComponent<{
    disabled?: boolean;
}, ButtonProps>;
declare const Modal: {
    Modal: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$e & Omit<React__default.HTMLAttributes<any>, keyof Props$e>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & Props$e & Omit<React__default.HTMLAttributes<any>, keyof Props$e>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Body: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Header: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    }, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Title: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Subtitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Actions: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLElement>, HTMLElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Action: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
    } & Omit<ButtonProps, "disabled">, "form" | "slot" | "style" | "title" | "hover" | "size" | "name" | "children" | "value" | "width" | "type" | "id" | "hidden" | "color" | "content" | "disabled" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "shape" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "loading" | "suffix" | "htmlType" | "variant"> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
    } & Omit<ButtonProps, "disabled"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
    } & Omit<ButtonProps, "disabled">, "form" | "slot" | "style" | "title" | "hover" | "size" | "name" | "children" | "value" | "width" | "type" | "id" | "hidden" | "color" | "content" | "disabled" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "shape" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "loading" | "suffix" | "htmlType" | "variant"> & {
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        disabled?: boolean;
    } & Omit<ButtonProps, "disabled"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Inset: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
};

type NavigationMenuButtonProps = {
    active?: boolean;
    disabled?: boolean;
    id?: string;
    children?: React__default.ReactNode;
} & (({
    unstyled?: true;
} & React__default.PropsWithChildren) | ({
    unstyled?: false;
} & ButtonProps & DecoratorProps));

type NavigationMenuContainerProps = Omit<TooltipProps, "text"> & DecoratorProps & {
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
    children?: React__default.ReactNode;
};

type NavigationMenuSectionProps = ContainerProps;
type NavigationMenuSectionHeaderProps = TextProps;
type NavigationMenuSectionItemIconProps = ContainerProps & {
    icon: NonNullable<IconProps["icon"]>;
};
type NavigationMenuSectionItemNameProps = TextProps;
type NavigationMenuSectionItemDescriptionProps = TextProps;
declare const NavigationMenu: {
    Container: ({ children, hoverHeightRatio, hoverWidthRatio, highlight, ...props }: NavigationMenuContainerProps) => React__default.JSX.Element;
    List: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Item: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
        children: React__default.ReactNode;
    } & React__default.HTMLAttributes<HTMLLIElement> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & {
        children: React__default.ReactNode;
    } & React__default.HTMLAttributes<HTMLLIElement> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    Button: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<NavigationMenuButtonProps & styled_components_dist_types.BaseObject, styled_components_dist_types.BaseObject>> & string & Omit<({ active, disabled, unstyled, id, ...props }: NavigationMenuButtonProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    ButtonIcon: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<(Omit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        icon: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
        src?: string;
    } & {
        size?: keyof Size | number | string;
        color?: keyof TextColors | string;
        accent?: keyof AccentColors;
        align?: "top" | "middle" | "bottom";
        clickable?: boolean;
    } & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
        ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
    }) | (Omit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        icon?: React__default.ComponentType<React__default.SVGProps<SVGSVGElement>>;
        src: string;
        alt?: string;
    } & {
        size?: keyof Size | number | string;
        color?: keyof TextColors | string;
        accent?: keyof AccentColors;
        align?: "top" | "middle" | "bottom";
        clickable?: boolean;
    } & Omit<React__default.SVGProps<SVGSVGElement>, "size" | "color" | "icon" | "src" | "align" | "accent" | "clickable">, "ref"> & {
        ref?: ((instance: SVGSVGElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<SVGSVGElement> | null | undefined;
    }), styled_components_dist_types.BaseObject>> & string & Omit<({ children, ...props }: IconProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    Content: ({ children, id, ...props }: {
        children: React__default.ReactNode;
        id?: string;
    } & {
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps) => null;
    Section: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    SectionHeader: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never>> & string & Omit<({ children, ...props }: NavigationMenuSectionHeaderProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    SectionContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    SectionItem: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
    }, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
        display?: styled_components_native.CSSProperties["display"];
        overflow?: styled_components_native.CSSProperties["overflow"];
        font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
        cursor?: styled_components_native.CSSProperties["cursor"];
        pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
        userSelect?: styled_components_native.CSSProperties["userSelect"];
    } & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;
    SectionItemIcon: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        row?: boolean;
        flex?: number | string;
        direction?: ["column" | "row", "column" | "row", "column" | "row"];
        gap?: keyof Gap | number;
        align?: "center" | "flex-start" | "flex-end" | "stretch" | "baseline";
        justify?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | "stretch";
        header?: boolean;
        section?: boolean;
        form?: boolean;
        label?: boolean;
        footer?: boolean;
        nav?: boolean;
        aside?: boolean;
        main?: boolean;
        wrap?: "nowrap" | "wrap" | "wrap-reverse" | "inherit" | "initial" | "unset";
        transform?: string;
    } & Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLDivElement> | null | undefined;
    } & {
        icon: NonNullable<IconProps["icon"]>;
    }, never>> & string & Omit<({ icon, ...props }: NavigationMenuSectionItemIconProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    SectionItemName: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never>> & string & Omit<({ children, ...props }: NavigationMenuSectionItemNameProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
    SectionItemDescription: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<{
        as?: React__default.ElementType;
        children?: React__default.ReactNode;
        forwardedAs?: React__default.ElementType;
    } & {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    } & Omit<React__default.HTMLAttributes<any>, keyof {
        h1?: boolean;
        h2?: boolean;
        h3?: boolean;
        h4?: boolean;
        h5?: boolean;
        h6?: boolean;
        b?: boolean;
        i?: boolean;
        span?: boolean;
        em?: boolean;
        pre?: boolean;
        size?: keyof Size | number | string;
        lineHeight?: number | string;
        weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
        transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
        decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
        color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
        accent?: keyof AccentColors;
        truncate?: boolean | number;
        align?: "left" | "center" | "right";
        title?: string;
        wrap?: boolean;
        monospace?: boolean;
    }>, never>> & string & Omit<({ children, ...props }: NavigationMenuSectionItemDescriptionProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
};

type Props$d = {
    /**
     * The size of the note.
     * @default "normal"
     */
    size?: NormalSizes;
    /**
     * The type of the note.
     * @default "primary"
     */
    type?: "primary" | "secondary" | "info" | "success" | "warning" | "danger";
    /**
     * The action of the note.
     */
    action?: JSX.Element;
    /**
     * The fill color of the note.
     * @default false
     */
    fill?: boolean;
    /**
     * The label of the note.
     * @default true
     */
    label?: boolean | string;
};
type NoteProps = KitchnComponent<Props$d>;
declare const NoteLabel: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const NoteContent: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
declare const NoteAction: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const Note: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$d & Omit<React__default.HTMLAttributes<any>, keyof Props$d>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$d> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$d & Omit<React__default.HTMLAttributes<any>, keyof Props$d> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$d & Omit<React__default.HTMLAttributes<any>, keyof Props$d>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$d> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$d & Omit<React__default.HTMLAttributes<any>, keyof Props$d> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$c = {
    value: number;
    max?: number;
    colors?: Record<number, string>;
    states?: Record<number, string | React__default.ReactNode>;
    title?: boolean;
    checkpointTitle?: boolean;
    checkpointStyle?: "round" | "bar";
};
type ProgressProps = KitchnComponent<Props$c, React__default.ProgressHTMLAttributes<HTMLProgressElement>>;
declare const ProgressContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    states?: ProgressProps["states"];
}>> & string;
declare const ProgressState: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    visible: boolean;
}>> & string;
declare const ProgressCheckpointContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const ProgressCheckpointTitle: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    active: boolean;
    first?: boolean;
    last?: boolean;
}>> & string;
declare const ProgressCheckpoint: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    value: number;
    max: number;
    color?: string;
    first?: boolean;
    last?: boolean;
    hasTitle?: boolean;
    amount: number;
    checkpointStyle: ProgressProps["checkpointStyle"];
}>> & string;
declare const Progress: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$c & Omit<React__default.ProgressHTMLAttributes<HTMLProgressElement>, keyof Props$c>, "slot" | "style" | "children" | "id" | "background" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$c> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$c & Omit<React__default.ProgressHTMLAttributes<HTMLProgressElement>, keyof Props$c> & {
    background?: string;
} & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$c & Omit<React__default.ProgressHTMLAttributes<HTMLProgressElement>, keyof Props$c>, "slot" | "style" | "children" | "id" | "background" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | keyof Props$c> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$c & Omit<React__default.ProgressHTMLAttributes<HTMLProgressElement>, keyof Props$c> & {
    background?: string;
} & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$b = React__default.PropsWithChildren;
type ScrollerProps = KitchnComponent<Props$b>;
declare const Scroller: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    children?: React__default.ReactNode | undefined;
} & Omit<React__default.HTMLAttributes<any>, "children">, "slot" | "style" | "title" | "children" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    children?: React__default.ReactNode | undefined;
} & Omit<React__default.HTMLAttributes<any>, "children"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    children?: React__default.ReactNode | undefined;
} & Omit<React__default.HTMLAttributes<any>, "children">, "slot" | "style" | "title" | "children" | "id" | "hidden" | "color" | "content" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs"> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    children?: React__default.ReactNode | undefined;
} & Omit<React__default.HTMLAttributes<any>, "children"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$a = {
    /**
     * The size of the select.
     * @default "normal"
     */
    size?: NormalSizes;
    /**
     * The label of the select.
     */
    label?: string;
    /**
     * The placeholder of the select.
     */
    placeholder?: string;
    /**
     * The prefix of the select.
     */
    prefix?: JSX.Element | string;
    /**
     * The suffix of the select.
     */
    suffix?: JSX.Element | string;
    disabled?: boolean;
};
type SelectProps = KitchnComponent<Props$a, React__default.SelectHTMLAttributes<HTMLSelectElement>>;
declare const SelectSelector: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, SelectProps>> & string;
declare const Select: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$a & Omit<React__default.SelectHTMLAttributes<HTMLSelectElement>, keyof Props$a> & React__default.RefAttributes<HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLSelectElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "multiple" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "autoComplete" | "required" | keyof Props$a> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$a & Omit<React__default.SelectHTMLAttributes<HTMLSelectElement>, keyof Props$a>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$a & Omit<React__default.SelectHTMLAttributes<HTMLSelectElement>, keyof Props$a> & React__default.RefAttributes<HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLSelectElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "multiple" | "dir" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "autoComplete" | "required" | keyof Props$a> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$a & Omit<React__default.SelectHTMLAttributes<HTMLSelectElement>, keyof Props$a>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$9 = {
    /**
     * The skeleton's appearance (if it's shown or not).
     */
    show?: boolean;
    /**
     * The skeleton's width.
     */
    width?: DecoratorProps["width"];
    /**
     * The skeleton's width.
     */
    w?: DecoratorProps["w"];
    /**
     * The skeleton's height.
     */
    height?: DecoratorProps["height"];
    /**
     * The skeleton's height.
     */
    h?: DecoratorProps["h"];
    /**
     * The skeleton's box height.
     */
    boxHeight?: number;
    /**
     * The skeleton's mode (animated or not).
     */
    animated?: boolean;
    /**
     * The skeleton's shape.
     */
    shape?: "normal" | "square" | "round";
    /**
     * The skeleton's children.
     */
    children?: React__default.ReactNode;
    /**
     * The skeleton's key.
     */
    [key: string]: any;
};
type SkeletonProps = KitchnComponent<Props$9>;
declare const Skeleton: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$9 & Omit<React__default.HTMLAttributes<any>, keyof Props$9>, keyof Props$9> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$9 & Omit<React__default.HTMLAttributes<any>, keyof Props$9>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$9 & Omit<React__default.HTMLAttributes<any>, keyof Props$9>, keyof Props$9> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$9 & Omit<React__default.HTMLAttributes<any>, keyof Props$9>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$8 = {
    text: string | string[];
    prompt?: boolean;
    type?: keyof AccentColors;
    onCopy?: (text: string) => void;
};
type SnippetProps = KitchnComponent<Props$8, ContainerProps>;
type SnippetLineProps = TextProps & {
    prompt?: boolean;
};
declare const SnippetLine: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    h1?: boolean;
    h2?: boolean;
    h3?: boolean;
    h4?: boolean;
    h5?: boolean;
    h6?: boolean;
    b?: boolean;
    i?: boolean;
    span?: boolean;
    em?: boolean;
    pre?: boolean;
    size?: keyof Size | number | string;
    lineHeight?: number | string;
    weight?: keyof Weight | number | "initial" | "inherit" | "unset" | "revert" | "revert-layer" | "normal" | "bold" | "bolder" | "lighter";
    transform?: "capitalize" | "uppercase" | "lowercase" | "initial";
    decoration?: "none" | "underline" | "line-through" | "overline" | "dashed" | "blink";
    color?: keyof TextColors | string | "initial" | "inherit" | "unset" | "revert" | "revert-layer";
    accent?: keyof AccentColors;
    truncate?: boolean | number;
    align?: "left" | "center" | "right";
    title?: string;
    wrap?: boolean;
    monospace?: boolean;
}> & {
    prompt?: boolean;
}, SnippetLineProps>> & string & Omit<({ prompt: _prompt, ...props }: SnippetLineProps) => React__default.JSX.Element, keyof React__default.Component<any, {}, any>>;
declare const Snippet: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$8 & Omit<ContainerProps, keyof Props$8>, never>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$8 & Omit<ContainerProps, keyof Props$8>, never>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$7 = {
    x?: number | string | keyof Gap;
    y?: number | string | keyof Gap;
};
type SpacerProps = KitchnComponent<Props$7>;
declare const Spacer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$7 & Omit<React__default.HTMLAttributes<any>, keyof Props$7>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$7> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$7 & Omit<React__default.HTMLAttributes<any>, keyof Props$7> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$7 & Omit<React__default.HTMLAttributes<any>, keyof Props$7>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$7> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$7 & Omit<React__default.HTMLAttributes<any>, keyof Props$7> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$6 = {
    color?: string;
    size?: number;
};
type SpinnerProps = KitchnComponent<Props$6>;
declare const Spinner: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$6 & Omit<React__default.HTMLAttributes<any>, keyof Props$6>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$6 & Omit<React__default.HTMLAttributes<any>, keyof Props$6>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type TabProps = KitchnComponent<{
    title: React__default.ReactNode;
    value: string;
    icon?: JSX.Element;
}, React__default.HTMLProps<HTMLDivElement>>;
type Props$5 = {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
};
type TabsProps = KitchnComponent<Props$5>;
declare const Tab: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    active?: boolean;
    disabled: boolean;
}>> & string;
declare const Tabs: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$5 & Omit<React__default.HTMLAttributes<any>, keyof Props$5>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$5> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$5 & Omit<React__default.HTMLAttributes<any>, keyof Props$5> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$5 & Omit<React__default.HTMLAttributes<any>, keyof Props$5>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$5> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$5 & Omit<React__default.HTMLAttributes<any>, keyof Props$5> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ControlProps = TabProps;
type SwitchProps = TabsProps;
declare const Control: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    active?: boolean;
    disabled: boolean;
}>> & string;
declare const Switch: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
} & Omit<React__default.HTMLAttributes<any>, keyof {
    tabs: TabProps[];
    selected: string;
    setSelected: React__default.Dispatch<React__default.SetStateAction<string>>;
    active?: boolean;
    disabled?: boolean;
    hoverHeightRatio?: number;
    hoverWidthRatio?: number;
    highlight?: boolean;
}> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$4 = {
    placeholder?: string;
    disabled?: boolean;
    errored?: boolean;
    defaultValue?: string;
    width?: number | string;
    height?: number | string;
    resize?: "none" | "both" | "horizontal" | "vertical";
};
type TextareaProps = KitchnComponent<Props$4, React__default.TextareaHTMLAttributes<HTMLTextAreaElement>>;
declare const Textarea: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$4 & Omit<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, keyof Props$4> & React__default.RefAttributes<HTMLTextAreaElement>, "ref"> & {
    ref?: ((instance: HTMLTextAreaElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLTextAreaElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "wrap" | "dir" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "autoComplete" | "maxLength" | "minLength" | "readOnly" | "required" | "cols" | "dirName" | "rows" | keyof Props$4> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$4 & Omit<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, keyof Props$4>, "ref"> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Omit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$4 & Omit<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, keyof Props$4> & React__default.RefAttributes<HTMLTextAreaElement>, "ref"> & {
    ref?: ((instance: HTMLTextAreaElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLTextAreaElement> | null | undefined;
}, "form" | "slot" | "style" | "title" | "name" | "children" | "value" | "id" | "hidden" | "color" | "content" | "wrap" | "dir" | "defaultChecked" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "autoCapitalize" | "autoFocus" | "className" | "contentEditable" | "contextMenu" | "draggable" | "enterKeyHint" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "rel" | "resource" | "rev" | "typeof" | "vocab" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "forwardedAs" | "autoComplete" | "maxLength" | "minLength" | "readOnly" | "required" | "cols" | "dirName" | "rows" | keyof Props$4> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$4 & Omit<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, keyof Props$4>, "ref"> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

interface ToastAction {
    name: string;
    handler: (event: React__default.MouseEvent<HTMLButtonElement>, cancel: () => void) => void;
    passive?: boolean;
}
type ToastPlacement = "topLeft" | "topRight" | "bottomLeft" | "bottomRight";
type ToastTypes = keyof AccentColors;
type ToastLayout = {
    padding?: React__default.CSSProperties["padding"];
    margin?: React__default.CSSProperties["margin"];
    width?: React__default.CSSProperties["width"];
    maxWidth?: React__default.CSSProperties["maxWidth"];
    maxHeight?: React__default.CSSProperties["maxHeight"];
    placement?: ToastPlacement;
};
interface ToastInput {
    text: string | React__default.ReactNode;
    type?: ToastTypes;
    id?: string;
    delay?: number;
    actions?: ToastAction[];
    preserve?: boolean;
}
type ToastInstance = {
    visible: boolean;
    cancel: () => void;
    _timeout: null | number;
    _internalIdent: string;
};
type Toast = Required<ToastInput> & ToastInstance;
type UseToastsResult = {
    toasts: Toast[];
    setToast: (toast: ToastInput) => void;
    removeAll: () => void;
    findOneToastByID: (ident: string) => Toast | undefined;
    removeOneToastByID: (ident: string) => void;
};
declare const useToasts: (layout?: ToastLayout) => UseToastsResult;

type Props$3 = {
    actions: ToastAction[];
    cancelHandle: () => void;
};
type ToastActionsProps = KitchnComponent<Props$3>;
declare const ToastActions: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$3 & Omit<React__default.HTMLAttributes<any>, keyof Props$3>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$3 & Omit<React__default.HTMLAttributes<any>, keyof Props$3>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type Props$2 = {
    toast: Toast;
    layout: Required<ToastLayout>;
};
type ToastItemProps = KitchnComponent<Props$2>;
declare const ToastItemAnimationContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$2 & Omit<React__default.HTMLAttributes<any>, keyof Props$2> & {
    animationState: "entrance" | "exit" | "done";
    enter: string;
    leave: string;
}>> & string;
declare const ToastItem: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$2 & Omit<React__default.HTMLAttributes<any>, keyof Props$2>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$2> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$2 & Omit<React__default.HTMLAttributes<any>, keyof Props$2> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$2 & Omit<React__default.HTMLAttributes<any>, keyof Props$2>, keyof React__default.HTMLAttributes<any> | "as" | "forwardedAs" | keyof Props$2> & {
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & Props$2 & Omit<React__default.HTMLAttributes<any>, keyof Props$2> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

type ToastContainerProps = KitchnComponent<object>;
declare const ToastContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.HTMLAttributes<any>, never>, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<{
    as?: React__default.ElementType;
    children?: React__default.ReactNode;
    forwardedAs?: React__default.ElementType;
} & object & Omit<React__default.HTMLAttributes<any>, never>, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

interface Props$1 {
    checked?: boolean;
    disabled?: boolean;
    onChange?: (_e: React__default.ChangeEvent<HTMLInputElement>) => void;
    large?: boolean;
}
type ToggleProps = KitchnComponent<Props$1, React__default.InputHTMLAttributes<HTMLInputElement>>;
declare const Toggle: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<Omit<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Props$1, never> & React__default.RefAttributes<HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLElement> | null | undefined;
}, DecoratorProps>> & string & Omit<React__default.ForwardRefExoticComponent<{
    display?: styled_components_native.CSSProperties["display"];
    overflow?: styled_components_native.CSSProperties["overflow"];
    font?: styled_components_native.CSSProperties["fontSize"] | keyof Size;
    cursor?: styled_components_native.CSSProperties["cursor"];
    pointerEvents?: styled_components_native.CSSProperties["pointerEvents"];
    userSelect?: styled_components_native.CSSProperties["userSelect"];
} & AreaProps & BackgroundProps & BorderProps & MarginProps & PaddingProps & PositionProps & styled_components.FastOmit<Props$1, never> & React__default.RefAttributes<HTMLElement>>, keyof React__default.Component<any, {}, any>>;

/**
 * KeyBinding Codes
 * The content of this file is based on the design of the open source project "microsoft/vscode",
 *   Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * We inherit the KeyMod values from "microsoft/vscode",
 * but use the Browser's KeyboardEvent event implementation, and all values are used only as identification.
 */
declare enum KeyCode {
    Unknown = 0,
    Backspace = 8,
    Tab = 9,
    Enter = 13,
    Shift = 16,
    Ctrl = 17,
    Alt = 18,
    PauseBreak = 19,
    CapsLock = 20,
    Escape = 27,
    Space = 32,
    PageUp = 33,
    PageDown = 34,
    End = 35,
    Home = 36,
    LeftArrow = 37,
    UpArrow = 38,
    RightArrow = 39,
    DownArrow = 40,
    Insert = 45,
    Delete = 46,
    KEY_0 = 48,
    KEY_1 = 49,
    KEY_2 = 50,
    KEY_3 = 51,
    KEY_4 = 52,
    KEY_5 = 53,
    KEY_6 = 54,
    KEY_7 = 55,
    KEY_8 = 56,
    KEY_9 = 57,
    KEY_A = 65,
    KEY_B = 66,
    KEY_C = 67,
    KEY_D = 68,
    KEY_E = 69,
    KEY_F = 70,
    KEY_G = 71,
    KEY_H = 72,
    KEY_I = 73,
    KEY_J = 74,
    KEY_K = 75,
    KEY_L = 76,
    KEY_M = 77,
    KEY_N = 78,
    KEY_O = 79,
    KEY_P = 80,
    KEY_Q = 81,
    KEY_R = 82,
    KEY_S = 83,
    KEY_T = 84,
    KEY_U = 85,
    KEY_V = 86,
    KEY_W = 87,
    KEY_X = 88,
    KEY_Y = 89,
    KEY_Z = 90,
    Meta = 91,
    F1 = 112,
    F2 = 113,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    NumLock = 144,
    ScrollLock = 145,
    Equal = 187,
    Minus = 189,
    Backquote = 192,
    Backslash = 220
}
declare enum KeyMod {
    CtrlCmd = 2048,
    Shift = 1024,
    Alt = 512,
    WinCtrl = 256
}

declare const getActiveModMap: (bindings: number[]) => Record<keyof typeof KeyMod, boolean>;

declare const getCtrlKeysByPlatform: () => Record<string, "metaKey" | "ctrlKey">;

declare const getElementOffset: (el?: HTMLElement | null | undefined) => {
    top: number;
    left: number;
};

declare const getTranslateByPlacement: (placement: ToastPlacement) => {
    enter: string;
    leave: string;
};

declare const isBrowser: () => boolean;

declare const isMac: () => boolean;

declare const isRefTarget: (eventOrRef: React__default.MouseEvent<HTMLElement> | React__default.FocusEvent<HTMLElement> | React__default.MutableRefObject<HTMLElement>) => eventOrRef is React__default.MutableRefObject<HTMLElement>;

declare const fadeIn: styled_components_dist_models_Keyframes.default;
declare const fadeOut: styled_components_dist_models_Keyframes.default;
declare const fadeInDown: styled_components_dist_models_Keyframes.default;
declare const fadeOutUp: styled_components_dist_models_Keyframes.default;
declare const float: styled_components_dist_models_Keyframes.default;
declare const loading: styled_components_dist_models_Keyframes.default;
declare const rotate: styled_components_dist_models_Keyframes.default;
declare const skBouncedelay: styled_components_dist_models_Keyframes.default;
declare const skeleton: styled_components_dist_models_Keyframes.default;
declare const slideInUp: styled_components_dist_models_Keyframes.default;
declare const slideOutDown: styled_components_dist_models_Keyframes.default;

type TooltipIconOffset = {
    x: string;
    y: string;
};
type Props = {
    parent?: React__default.MutableRefObject<HTMLElement | null> | undefined;
    placement: TooltipPlacement;
    type: TooltipTypes;
    visible: boolean;
    hideArrow: boolean;
    offset: number;
    iconOffset: TooltipIconOffset;
    portalCss: RuleSet<object>;
};
type TooltipContainerProps = KitchnComponent<Props>;
declare const TooltipContentContainer: styled_components_dist_types.IStyledComponentBase<"web", styled_components_dist_types.Substitute<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    rect: TooltipPosition;
    hasShadow: boolean;
    visible: boolean;
    type: TooltipTypes;
}>> & string;
declare const TooltipContentInner: styled_components_dist_types.IStyledComponentBase<"web", styled_components.FastOmit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;

interface ComboboxConfig {
    value?: string;
    updateValue?: (val: string) => unknown;
    visible?: boolean;
    updateVisible?: (next: boolean) => unknown;
    ref?: MutableRefObject<HTMLElement | null>;
}
declare const ComboboxContext: React__default.Context<ComboboxConfig>;

type UpdateToastsFunction = (fn: (toasts: Toast[]) => Toast[]) => void;
type UpdateToastsLayoutFunction = (fn: (layout: Required<ToastLayout>) => Required<ToastLayout>) => void;
type UpdateToastsIDFunction = (fn: () => string | null) => void;
interface ToastsContextParams {
    toasts: Toast[];
    updateToasts: UpdateToastsFunction;
    toastLayout: Required<ToastLayout>;
    updateToastLayout: UpdateToastsLayoutFunction;
    lastUpdateToastId: string | null;
    updateLastToastId: UpdateToastsIDFunction;
}
declare const defaultToastLayout: Required<ToastLayout>;
declare const ToastsContent: React__default.Context<ToastsContextParams>;
declare const useToastsContext: () => ToastsContextParams;

type UseBreakpointResult = {
    isMobile: boolean;
    isTablet: boolean;
    isLaptop: boolean;
    isDesktop: boolean;
};
declare const useBreakpoint: () => UseBreakpointResult;

type UseCheckboxValue = boolean;
type UseCheckboxResult = [boolean, () => void];
declare const useCheckbox: (defaultValue?: UseCheckboxValue) => UseCheckboxResult;

declare const useClickAnyWhere: (handler: (event: Event) => void) => void;

type ClickAwayGetContainer = () => HTMLElement | null;
declare const useClickAway: (ref: React__default.MutableRefObject<HTMLElement | null>, handler: (event: Event) => void) => void;

type UseClipboardOptions = {
    onError: () => unknown;
};
type UseClipboardResult = {
    copy: (text: string) => void;
};
declare const useClipboard: (options?: UseClipboardOptions) => UseClipboardResult;

declare const useCombobox: () => ComboboxConfig;

type CurrentStateType<S> = [
    S,
    React__default.Dispatch<React__default.SetStateAction<S>>,
    React__default.MutableRefObject<S>
];
declare const useCurrentState: <S>(initialState: S | (() => S)) => CurrentStateType<S>;

declare const useDOMObserver: (ref: React__default.MutableRefObject<HTMLElement | null> | undefined, callback?: MutationCallback) => void;

type KeyboardOptions = {
    disableGlobalEvent?: boolean;
    stopPropagation?: boolean;
    preventDefault?: boolean;
    capture?: boolean;
    event?: "keydown" | "keypress" | "keyup";
};
type KeyboardResult = {
    bindings: {
        onKeyDown: React__default.KeyboardEventHandler;
        onKeyDownCapture: React__default.KeyboardEventHandler;
        onKeyPress: React__default.KeyboardEventHandler;
        onKeyPressCapture: React__default.KeyboardEventHandler;
        onKeyUp: React__default.KeyboardEventHandler;
        onKeyUpCapture: React__default.KeyboardEventHandler;
    };
};
type UseKeyboardHandler = (event: React__default.KeyboardEvent | KeyboardEvent) => void;
type UseKeyboard = (handler: UseKeyboardHandler, keyBindings: number[] | number, options?: KeyboardOptions) => KeyboardResult;
declare const useKeyboard: UseKeyboard;

declare function useMediaQuery(query: string): boolean;

type UseModalResult = [boolean, () => void, () => void];
declare const useModal: () => UseModalResult;

declare const createElement: (id: string) => HTMLElement;
declare const usePortal: (selectId?: string, getContainer?: () => HTMLElement | null) => HTMLElement | null;

declare const usePrevious: <T>(state: T) => T | undefined | null;

declare const useResize: (callback: () => unknown, immediatelyInvoke?: boolean) => void;

type SSRState = {
    isBrowser: boolean;
    isServer: boolean;
};
declare const useSSR: () => SSRState;

declare const useTheme: () => {
    theme: styled_components.DefaultTheme;
    setTheme: (theme: keyof Themes | "system") => void;
    setThemeStyle: (theme: styled_components.DefaultTheme) => void;
    resolvedTheme?: keyof Themes | "system";
    forcedTheme?: keyof Themes | "system";
    systemTheme?: keyof Themes;
    storedTheme?: keyof Themes | "system";
    themes: Record<string, styled_components.DefaultTheme>;
};

declare const useWarning: (message: string, component?: string) => void;

declare const kitchn: (<Target extends styled_components.WebTarget, InjectedProps extends object = styled_components_dist_types.BaseObject>(tag: Target) => styled_components.StyledInstance<"web", Target, Target extends styled_components_dist_types.KnownTarget ? React.ComponentPropsWithRef<Target> & InjectedProps : InjectedProps, styled_components_dist_types.BaseObject>) & {
    object: styled_components.StyledInstance<"web", "object", React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>, styled_components_dist_types.BaseObject>;
    g: styled_components.StyledInstance<"web", "g", React.SVGProps<SVGGElement>, styled_components_dist_types.BaseObject>;
    map: styled_components.StyledInstance<"web", "map", React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>, styled_components_dist_types.BaseObject>;
    big: styled_components.StyledInstance<"web", "big", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    link: styled_components.StyledInstance<"web", "link", React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>, styled_components_dist_types.BaseObject>;
    small: styled_components.StyledInstance<"web", "small", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    sub: styled_components.StyledInstance<"web", "sub", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    sup: styled_components.StyledInstance<"web", "sup", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    a: styled_components.StyledInstance<"web", "a", React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, styled_components_dist_types.BaseObject>;
    abbr: styled_components.StyledInstance<"web", "abbr", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    address: styled_components.StyledInstance<"web", "address", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    area: styled_components.StyledInstance<"web", "area", React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>, styled_components_dist_types.BaseObject>;
    article: styled_components.StyledInstance<"web", "article", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    aside: styled_components.StyledInstance<"web", "aside", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    audio: styled_components.StyledInstance<"web", "audio", React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>, styled_components_dist_types.BaseObject>;
    b: styled_components.StyledInstance<"web", "b", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    base: styled_components.StyledInstance<"web", "base", React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>, styled_components_dist_types.BaseObject>;
    bdi: styled_components.StyledInstance<"web", "bdi", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    bdo: styled_components.StyledInstance<"web", "bdo", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    blockquote: styled_components.StyledInstance<"web", "blockquote", React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>, styled_components_dist_types.BaseObject>;
    body: styled_components.StyledInstance<"web", "body", React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>, styled_components_dist_types.BaseObject>;
    br: styled_components.StyledInstance<"web", "br", React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>, styled_components_dist_types.BaseObject>;
    button: styled_components.StyledInstance<"web", "button", React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, styled_components_dist_types.BaseObject>;
    canvas: styled_components.StyledInstance<"web", "canvas", React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>, styled_components_dist_types.BaseObject>;
    caption: styled_components.StyledInstance<"web", "caption", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    cite: styled_components.StyledInstance<"web", "cite", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    code: styled_components.StyledInstance<"web", "code", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    col: styled_components.StyledInstance<"web", "col", React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>, styled_components_dist_types.BaseObject>;
    colgroup: styled_components.StyledInstance<"web", "colgroup", React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>, styled_components_dist_types.BaseObject>;
    data: styled_components.StyledInstance<"web", "data", React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>, styled_components_dist_types.BaseObject>;
    datalist: styled_components.StyledInstance<"web", "datalist", React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>, styled_components_dist_types.BaseObject>;
    dd: styled_components.StyledInstance<"web", "dd", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    del: styled_components.StyledInstance<"web", "del", React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>, styled_components_dist_types.BaseObject>;
    details: styled_components.StyledInstance<"web", "details", React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>, styled_components_dist_types.BaseObject>;
    dfn: styled_components.StyledInstance<"web", "dfn", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    dialog: styled_components.StyledInstance<"web", "dialog", React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>, styled_components_dist_types.BaseObject>;
    div: styled_components.StyledInstance<"web", "div", React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, styled_components_dist_types.BaseObject>;
    dl: styled_components.StyledInstance<"web", "dl", React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>, styled_components_dist_types.BaseObject>;
    dt: styled_components.StyledInstance<"web", "dt", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    em: styled_components.StyledInstance<"web", "em", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    embed: styled_components.StyledInstance<"web", "embed", React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>, styled_components_dist_types.BaseObject>;
    fieldset: styled_components.StyledInstance<"web", "fieldset", React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>, styled_components_dist_types.BaseObject>;
    figcaption: styled_components.StyledInstance<"web", "figcaption", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    figure: styled_components.StyledInstance<"web", "figure", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    footer: styled_components.StyledInstance<"web", "footer", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    form: styled_components.StyledInstance<"web", "form", React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, styled_components_dist_types.BaseObject>;
    h1: styled_components.StyledInstance<"web", "h1", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    h2: styled_components.StyledInstance<"web", "h2", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    h3: styled_components.StyledInstance<"web", "h3", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    h4: styled_components.StyledInstance<"web", "h4", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    h5: styled_components.StyledInstance<"web", "h5", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    h6: styled_components.StyledInstance<"web", "h6", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, styled_components_dist_types.BaseObject>;
    header: styled_components.StyledInstance<"web", "header", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    hgroup: styled_components.StyledInstance<"web", "hgroup", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    hr: styled_components.StyledInstance<"web", "hr", React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>, styled_components_dist_types.BaseObject>;
    html: styled_components.StyledInstance<"web", "html", React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>, styled_components_dist_types.BaseObject>;
    i: styled_components.StyledInstance<"web", "i", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    iframe: styled_components.StyledInstance<"web", "iframe", React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>, styled_components_dist_types.BaseObject>;
    img: styled_components.StyledInstance<"web", "img", React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, styled_components_dist_types.BaseObject>;
    input: styled_components.StyledInstance<"web", "input", React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, styled_components_dist_types.BaseObject>;
    ins: styled_components.StyledInstance<"web", "ins", React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>, styled_components_dist_types.BaseObject>;
    kbd: styled_components.StyledInstance<"web", "kbd", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    keygen: styled_components.StyledInstance<"web", "keygen", React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    label: styled_components.StyledInstance<"web", "label", React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, styled_components_dist_types.BaseObject>;
    legend: styled_components.StyledInstance<"web", "legend", React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>, styled_components_dist_types.BaseObject>;
    li: styled_components.StyledInstance<"web", "li", React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, styled_components_dist_types.BaseObject>;
    main: styled_components.StyledInstance<"web", "main", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    mark: styled_components.StyledInstance<"web", "mark", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    menu: styled_components.StyledInstance<"web", "menu", React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    menuitem: styled_components.StyledInstance<"web", "menuitem", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    meta: styled_components.StyledInstance<"web", "meta", React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>, styled_components_dist_types.BaseObject>;
    meter: styled_components.StyledInstance<"web", "meter", React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>, styled_components_dist_types.BaseObject>;
    nav: styled_components.StyledInstance<"web", "nav", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    noscript: styled_components.StyledInstance<"web", "noscript", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    ol: styled_components.StyledInstance<"web", "ol", React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>, styled_components_dist_types.BaseObject>;
    optgroup: styled_components.StyledInstance<"web", "optgroup", React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>, styled_components_dist_types.BaseObject>;
    option: styled_components.StyledInstance<"web", "option", React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>, styled_components_dist_types.BaseObject>;
    output: styled_components.StyledInstance<"web", "output", React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>, styled_components_dist_types.BaseObject>;
    p: styled_components.StyledInstance<"web", "p", React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, styled_components_dist_types.BaseObject>;
    param: styled_components.StyledInstance<"web", "param", React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>, styled_components_dist_types.BaseObject>;
    picture: styled_components.StyledInstance<"web", "picture", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    pre: styled_components.StyledInstance<"web", "pre", React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>, styled_components_dist_types.BaseObject>;
    progress: styled_components.StyledInstance<"web", "progress", React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>, styled_components_dist_types.BaseObject>;
    q: styled_components.StyledInstance<"web", "q", React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>, styled_components_dist_types.BaseObject>;
    rp: styled_components.StyledInstance<"web", "rp", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    rt: styled_components.StyledInstance<"web", "rt", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    ruby: styled_components.StyledInstance<"web", "ruby", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    s: styled_components.StyledInstance<"web", "s", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    samp: styled_components.StyledInstance<"web", "samp", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    script: styled_components.StyledInstance<"web", "script", React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>, styled_components_dist_types.BaseObject>;
    section: styled_components.StyledInstance<"web", "section", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    select: styled_components.StyledInstance<"web", "select", React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, styled_components_dist_types.BaseObject>;
    source: styled_components.StyledInstance<"web", "source", React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>, styled_components_dist_types.BaseObject>;
    span: styled_components.StyledInstance<"web", "span", React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, styled_components_dist_types.BaseObject>;
    strong: styled_components.StyledInstance<"web", "strong", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    style: styled_components.StyledInstance<"web", "style", React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>, styled_components_dist_types.BaseObject>;
    summary: styled_components.StyledInstance<"web", "summary", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    table: styled_components.StyledInstance<"web", "table", React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>, styled_components_dist_types.BaseObject>;
    tbody: styled_components.StyledInstance<"web", "tbody", React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, styled_components_dist_types.BaseObject>;
    td: styled_components.StyledInstance<"web", "td", React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, styled_components_dist_types.BaseObject>;
    textarea: styled_components.StyledInstance<"web", "textarea", React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, styled_components_dist_types.BaseObject>;
    tfoot: styled_components.StyledInstance<"web", "tfoot", React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, styled_components_dist_types.BaseObject>;
    th: styled_components.StyledInstance<"web", "th", React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>, styled_components_dist_types.BaseObject>;
    thead: styled_components.StyledInstance<"web", "thead", React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, styled_components_dist_types.BaseObject>;
    time: styled_components.StyledInstance<"web", "time", React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>, styled_components_dist_types.BaseObject>;
    tr: styled_components.StyledInstance<"web", "tr", React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, styled_components_dist_types.BaseObject>;
    track: styled_components.StyledInstance<"web", "track", React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>, styled_components_dist_types.BaseObject>;
    u: styled_components.StyledInstance<"web", "u", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    ul: styled_components.StyledInstance<"web", "ul", React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, styled_components_dist_types.BaseObject>;
    var: styled_components.StyledInstance<"web", "var", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    video: styled_components.StyledInstance<"web", "video", React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>, styled_components_dist_types.BaseObject>;
    wbr: styled_components.StyledInstance<"web", "wbr", React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, styled_components_dist_types.BaseObject>;
    svg: styled_components.StyledInstance<"web", "svg", React.SVGProps<SVGSVGElement>, styled_components_dist_types.BaseObject>;
    circle: styled_components.StyledInstance<"web", "circle", React.SVGProps<SVGCircleElement>, styled_components_dist_types.BaseObject>;
    clipPath: styled_components.StyledInstance<"web", "clipPath", React.SVGProps<SVGClipPathElement>, styled_components_dist_types.BaseObject>;
    defs: styled_components.StyledInstance<"web", "defs", React.SVGProps<SVGDefsElement>, styled_components_dist_types.BaseObject>;
    ellipse: styled_components.StyledInstance<"web", "ellipse", React.SVGProps<SVGEllipseElement>, styled_components_dist_types.BaseObject>;
    foreignObject: styled_components.StyledInstance<"web", "foreignObject", React.SVGProps<SVGForeignObjectElement>, styled_components_dist_types.BaseObject>;
    image: styled_components.StyledInstance<"web", "image", React.SVGProps<SVGImageElement>, styled_components_dist_types.BaseObject>;
    line: styled_components.StyledInstance<"web", "line", React.SVGLineElementAttributes<SVGLineElement>, styled_components_dist_types.BaseObject>;
    linearGradient: styled_components.StyledInstance<"web", "linearGradient", React.SVGProps<SVGLinearGradientElement>, styled_components_dist_types.BaseObject>;
    marker: styled_components.StyledInstance<"web", "marker", React.SVGProps<SVGMarkerElement>, styled_components_dist_types.BaseObject>;
    mask: styled_components.StyledInstance<"web", "mask", React.SVGProps<SVGMaskElement>, styled_components_dist_types.BaseObject>;
    path: styled_components.StyledInstance<"web", "path", React.SVGProps<SVGPathElement>, styled_components_dist_types.BaseObject>;
    pattern: styled_components.StyledInstance<"web", "pattern", React.SVGProps<SVGPatternElement>, styled_components_dist_types.BaseObject>;
    polygon: styled_components.StyledInstance<"web", "polygon", React.SVGProps<SVGPolygonElement>, styled_components_dist_types.BaseObject>;
    polyline: styled_components.StyledInstance<"web", "polyline", React.SVGProps<SVGPolylineElement>, styled_components_dist_types.BaseObject>;
    radialGradient: styled_components.StyledInstance<"web", "radialGradient", React.SVGProps<SVGRadialGradientElement>, styled_components_dist_types.BaseObject>;
    rect: styled_components.StyledInstance<"web", "rect", React.SVGProps<SVGRectElement>, styled_components_dist_types.BaseObject>;
    stop: styled_components.StyledInstance<"web", "stop", React.SVGProps<SVGStopElement>, styled_components_dist_types.BaseObject>;
    text: styled_components.StyledInstance<"web", "text", React.SVGTextElementAttributes<SVGTextElement>, styled_components_dist_types.BaseObject>;
    tspan: styled_components.StyledInstance<"web", "tspan", React.SVGProps<SVGTSpanElement>, styled_components_dist_types.BaseObject>;
    use: styled_components.StyledInstance<"web", "use", React.SVGProps<SVGUseElement>, styled_components_dist_types.BaseObject>;
};

export { AccentColors, type AreaProps, Avatar, AvatarGroup, type AvatarGroupProps, AvatarImage, type AvatarProps, type BackgroundProps, Badge, type BadgeProps, type BorderProps, type BoxProps, Breakpoint, Button, ButtonContent, ButtonPrefix, type ButtonProps, ButtonSuffix, Calendar, type CalendarProps, Checkbox, CheckboxCheck, CheckboxCheckContainer, type CheckboxCheckContainerProps, CheckboxCheckmark, CheckboxContainer, CheckboxContent, CheckboxLabel, type CheckboxProps, type ClickAwayGetContainer, Code, CodeContent, CodeHeader, type CodeProps, CodeTitle, Collapse, type CollapseProps, Combobox, type ComboboxConfig, ComboboxContext, ComboboxDropdown, type ComboboxDropdownProps, ComboboxEmpty, type ComboboxEmptyProps, ComboboxItem, type ComboboxItemProps, type ComboboxOption, type ComboboxOptions, type ComboboxProps, ComboboxSearching, type ComboboxSearchingProps, Container, type ContainerProps, Control, type ControlProps, ControlledInput, type CurrentStateType, type DecoratorProps, type DeepPartial, Drawer, DrawerContent, type DrawerProps, Dropdown, type DropdownProps, Entity, EntityField, EntityFieldDescription, type EntityFieldProps, EntityFieldTitle, type EntityFieldTitleProps, type EntityProps, Error, ErrorAction, ErrorActionIcon, ErrorContent, ErrorIconContainer, ErrorLabel, type ErrorProps, ErrorText, ErrorTextContainer, Fieldset, type FieldsetProps, type FieldsetTabsProps, Footer, FooterColumn, FooterGroup, type FooterGroupProps, FooterGroupTitle, FooterLink, type FooterLinkProps, FooterNav, type FooterProps, FragmentLink, type FragmentLinkProps, Gap, GlobalStyle, Highlight, HighlightContainer, type HighlightPosition, type HighlightProps, Icon, type IconProps, Image, type ImageProps, InlineCode, type InlineCodeProps, type InpuPasswordProps, Input, InputClear, InputContainer, InputError, InputField, InputLabel, InputPrefix, type InputProps, InputSuffix, InputSuffixPart, KeyCode, KeyMod, type KeyboardOptions, type KeyboardResult, type KitchnComponent, KitchnProvider, KitchnProviderComponent, type KitchnProviderProps, LayoutColors, Link, type LinkProps, ListItem, type ListItemProps, MainTheme, type MarginProps, Menu, type MenuButtonProps, type MenuContainerProps, type MenuContentProps, type MenuItemProps, type MenuLinkProps, type MenuSectionProps, Modal, type ModalActionProps, type ModalProps, NavigationMenu, type NavigationMenuSectionHeaderProps, type NavigationMenuSectionItemDescriptionProps, type NavigationMenuSectionItemIconProps, type NavigationMenuSectionItemNameProps, type NavigationMenuSectionProps, NextThemeProviderWrapper, type NextThemeProviderWrapperProps, type NormalSizes, Note, NoteAction, NoteContent, NoteLabel, type NoteProps, OrderedList, type OrderedListProps, type PaddingProps, PasswordInput, type Placement, type PositionProps, Progress, ProgressCheckpoint, ProgressCheckpointContainer, ProgressCheckpointTitle, ProgressContainer, type ProgressProps, ProgressState, Radius, type ReactiveDomReact, type SSRState, type ScaleProps, Scroller, type ScrollerProps, Select, type SelectProps, SelectSelector, Size, Skeleton, type SkeletonProps, Snippet, SnippetLine, type SnippetLineProps, type SnippetProps, Spacer, type SpacerProps, Spinner, type SpinnerProps, StyledCheckbox, SubFooter, Switch, type SwitchProps, Tab, type TabProps, Tabs, type TabsProps, Text, TextColors, type TextProps, Textarea, type TextareaProps, Theme, ThemeContext, type ThemeContextParams, ThemeProvider, type ThemeProviderProps, Themes, type Toast, type ToastAction, ToastActions, type ToastActionsProps, ToastContainer, type ToastContainerProps, type ToastInput, type ToastInstance, ToastItem, ToastItemAnimationContainer, type ToastItemProps, type ToastLayout, type ToastPlacement, type ToastTypes, ToastsContent, type ToastsContextParams, Toggle, type ToggleProps, Tooltip, type TooltipContainerProps, TooltipContentContainer, TooltipContentInner, type TooltipIconOffset, type TooltipIconPosition, type TooltipOnContentClick, type TooltipOnVisibleChange, type TooltipPlacement, type TooltipPosition, type TooltipProps, type TooltipReactiveDomReact, type TooltipTriggers, type TooltipTypes, type TriggerTypes, UnorderedList, type UnorderedListProps, type UpdateToastsFunction, type UpdateToastsIDFunction, type UpdateToastsLayoutFunction, type UseBreakpointResult, type UseCheckboxResult, type UseCheckboxValue, type UseClipboardOptions, type UseClipboardResult, type UseKeyboard, type UseKeyboardHandler, type UseModalResult, type UseToastsResult, Weight, areaCss, backgroundCss, borderCss, convertThemeToCssVariables, createElement, createTheme, createThemeVariables, kitchn as default, defaultThemes, defaultToastLayout, defaultTooltipPosition, excludedProperties, fadeIn, fadeInDown, fadeOut, fadeOutUp, float, formatCaption, formatWeekdayName, generateThemes, getActiveModMap, getCtrlKeysByPlatform, getElementOffset, getEventRect, getIconPosition, getPosition, getRefRect, getTooltipRect, getTranslateByPlacement, handleFont, handlePixelValue, handleRadius, handleValue, isBrowser, isFieldsetContainer, isMac, isRefTarget, isUnplacedRect, loading, mainCss, mainTheme, marginCss, paddingCss, positionCss, resetCss, rotate, shouldForwardProp, skBouncedelay, skeleton, slideInUp, slideOutDown, themeCss, useBreakpoint, useCheckbox, useClickAnyWhere, useClickAway, useClipboard, useCombobox, useCurrentState, useDOMObserver, useKeyboard, useMediaQuery, useModal, usePortal, usePrevious, useRect, useResize, useSSR, useTheme, useToasts, useToastsContext, useWarning, type window, withBox, withDecorator, withScale };
