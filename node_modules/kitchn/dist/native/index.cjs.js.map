{"version":3,"sources":["/home/runner/work/kitchn/kitchn/packages/kitchn/dist/native/index.cjs.js","../../src/native/index.ts","../../src/native/themes/main.ts","../../src/native/themes/index.ts","../../src/native/components/Button/index.tsx","../../src/native/components/Container/index.tsx","../../src/native/hoc/withScale.tsx","../../src/native/components/Icon/index.tsx","../../src/native/components/Text/index.tsx","../../src/native/components/Input/index.tsx"],"names":["mainTheme","createTheme","theme","defaultThemes","darkTheme","lightTheme","ButtonComponent","children","size","shape","prefix","type","variant","suffix","props","textColor","React","Container","Prefix","Text","Suffix","styled","width","height","margin","py","View","defaultProps","Input"],"mappings":"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","file":"/home/runner/work/kitchn/kitchn/packages/kitchn/dist/native/index.cjs.js","sourcesContent":[null,"import styled from \"styled-components/native\";\n\n// ./styled-components\nexport * from \"./styled-components\";\n\n// ./types\nexport * from \"./types\";\n\n// ./themes\nexport * from \"./themes\";\n\n// ./components\nexport * from \"./components\";\n\n// ./hooks\nexport * from \"./hooks\";\n\n// ./hoc\nexport * from \"./hoc\";\n\n// ./utils\nexport * from \"../utils/_collections\";\n\nconst kitchn = styled;\nexport default kitchn;\n","import { MainTheme } from \"../types/theme\";\n\nexport const mainTheme: MainTheme = {\n  family: {\n    primary: \"Figtree\",\n    monospace: \"Figtree\",\n  },\n  weight: {\n    thin: 100,\n    extraLight: 200,\n    light: 300,\n    regular: 400,\n    medium: 500,\n    semiBold: 600,\n    bold: 700,\n    extraBold: 800,\n    black: 900,\n  },\n  size: {\n    extraTitle: \"48px\",\n    title: \"32px\",\n    large: \"24px\",\n    medium: \"18px\",\n    normal: \"16px\",\n    compact: \"14px\",\n    small: \"13px\",\n    tiny: \"11px\",\n  },\n  breakpoint: {\n    desktop: \"1824px\",\n    laptop: \"1224px\",\n    tablet: \"1024px\",\n    mobile: \"768px\",\n  },\n  gap: {\n    tiny: \"5px\",\n    small: \"10px\",\n    normal: \"15px\",\n    medium: \"20px\",\n    large: \"30px\",\n    extraLarge: \"60px\",\n  },\n  radius: {\n    square: \"8px\",\n    round: \"99999px\",\n  },\n};\n","import { DefaultTheme } from \"styled-components\";\n\nimport { mainTheme } from \"./main\";\nimport { darkTheme } from \"../../themes/dark\";\nimport { lightTheme } from \"../../themes/light\";\nimport { Theme } from \"../types/theme\";\n\nexport * from \"./main\";\nexport * from \"../../themes/dark\";\nexport * from \"../../themes/light\";\nexport * from \"../../themes/tonightpass\";\n\nexport const createTheme = (theme: Theme): DefaultTheme => {\n  return { ...mainTheme, ...theme };\n};\n\nexport const defaultThemes = {\n  dark: createTheme(darkTheme),\n  light: createTheme(lightTheme),\n};\n","import React from \"react\";\nimport { TouchableOpacityProps } from \"react-native/types\";\nimport styled from \"styled-components/native\";\n\nimport {\n  KitchnComponent,\n  NormalSizes,\n  AccentColors,\n  Text as KitchnText,\n  withScale,\n} from \"../..\";\n\ntype Props = {\n  shape?: \"square\" | \"round\";\n  size?: NormalSizes;\n  loading?: boolean;\n  disabled?: boolean;\n  width?: number | string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  type?: keyof AccentColors;\n  variant?: \"ghost\" | \"shadow\";\n  children?: string | React.ReactNode;\n};\n\nexport type ButtonProps = KitchnComponent<Props, TouchableOpacityProps>;\n\nconst ButtonComponent = ({\n  children,\n  size,\n  shape = \"square\",\n  prefix,\n  type,\n  variant,\n  suffix,\n  ...props\n}: ButtonProps) => {\n  const textColor =\n    props.loading || props.disabled\n      ? \"lightest\"\n      : type === \"light\"\n        ? \"darkest\"\n        : type === \"dark\"\n          ? \"lightest\"\n          : undefined;\n\n  return (\n    <Container\n      shape={shape}\n      size={size}\n      type={type}\n      variant={variant}\n      activeOpacity={0.9}\n      {...props}\n    >\n      {prefix && <Prefix>{prefix}</Prefix>}\n      {children && typeof children === \"string\" ? (\n        <KitchnText\n          color={textColor}\n          accent={\n            variant === \"ghost\"\n              ? type === \"light\"\n                ? \"light\"\n                : type === \"info\"\n                  ? \"info\"\n                  : type === \"success\"\n                    ? \"success\"\n                    : type === \"warning\"\n                      ? \"warning\"\n                      : type === \"danger\"\n                        ? \"danger\"\n                        : type === \"secondary\"\n                          ? \"secondary\"\n                          : type === \"primary\"\n                            ? \"primary\"\n                            : undefined\n              : !textColor\n                ? \"light\"\n                : undefined\n          }\n          size={\n            size === \"small\" ? \"small\" : size === \"large\" ? \"medium\" : \"normal\"\n          }\n          weight={\"bold\"}\n        >\n          {children}\n        </KitchnText>\n      ) : (\n        children\n      )}\n      {suffix && <Suffix>{suffix}</Suffix>}\n    </Container>\n  );\n};\n\nconst Container = styled.TouchableOpacity<ButtonProps>`\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  border-radius: ${({ shape }) => (shape === \"round\" ? \"99999px\" : \"5px\")};\n\n  padding: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"4px 8px\";\n      case \"large\":\n        return \"12px 16px\";\n      case \"normal\":\n      default:\n        return \"8px 12px\";\n    }\n  }};\n\n  background: ${(props) => {\n    if (props.loading || props.disabled)\n      return `${props.theme.colors.layout.darkest}`;\n\n    if (props.variant === \"ghost\") return \"transparent\";\n\n    switch (props.type) {\n      case \"dark\":\n        return props.theme.colors.layout.darkest;\n      case \"light\":\n        return props.theme.colors.layout.lightest;\n      case \"info\":\n        return props.theme.colors.accent.info;\n      case \"success\":\n        return props.theme.colors.accent.success;\n      case \"warning\":\n        return props.theme.colors.accent.warning;\n      case \"danger\":\n        return props.theme.colors.accent.danger;\n      case \"secondary\":\n        return props.theme.colors.accent.secondary;\n      case \"primary\":\n      default:\n        return props.theme.colors.accent.primary;\n    }\n  }};\n\n  border: ${(props) => {\n    if (props.loading || props.disabled)\n      return `1px solid ${props.theme.colors.layout.darker}`;\n\n    if (props.variant === \"ghost\") return \"1px solid transparent\";\n\n    switch (props.type) {\n      case \"dark\":\n        return `1px solid ${props.theme.colors.layout.darker}`;\n      case \"light\":\n        return `1px solid ${props.theme.colors.layout.lightest}`;\n      case \"info\":\n        return `1px solid ${props.theme.colors.accent.info}`;\n      case \"success\":\n        return `1px solid ${props.theme.colors.accent.success}`;\n      case \"warning\":\n        return `1px solid ${props.theme.colors.accent.warning}`;\n      case \"danger\":\n        return `1px solid ${props.theme.colors.accent.danger}`;\n      case \"secondary\":\n        return `1px solid ${props.theme.colors.accent.secondary}`;\n      case \"primary\":\n      default:\n        return `1px solid ${props.theme.colors.accent.secondary}`;\n    }\n  }};\n`;\n\nconst Prefix = styled.View`\n  margin-right: 7px;\n`;\n\nconst Suffix = styled.View`\n  margin-left: 7px;\n`;\n\nButtonComponent.displayName = \"KitchnButton\";\nexport const Button = withScale(ButtonComponent);\nexport default Button;\n","import React from \"react\";\nimport { View, ViewComponent } from \"react-native\";\nimport styled from \"styled-components/native\";\n\nimport { isNumber } from \"../../../utils/isNumber\";\nimport { withScale } from \"../../hoc\";\nimport {\n  AccentColors,\n  Gap,\n  KitchnComponent,\n  LayoutColors,\n  Radius,\n} from \"../../types\";\n\ntype Props = {\n  row?: boolean;\n  flex?: number | string;\n  gap?: keyof Gap | number;\n  align?: \"center\" | \"flex-start\" | \"flex-end\" | \"stretch\" | \"baseline\";\n  justify?:\n    | \"center\"\n    | \"flex-start\"\n    | \"flex-end\"\n    | \"space-between\"\n    | \"space-around\"\n    | \"space-evenly\"\n    | \"stretch\";\n  background?: string | keyof LayoutColors;\n  bg?: string | keyof LayoutColors;\n  backgroundColor?: keyof LayoutColors;\n  bgc?: keyof LayoutColors;\n  backgroundAccent?: keyof AccentColors;\n  bga?: keyof AccentColors;\n  borderRadius?: number | string | keyof Radius;\n  br?: number | string | keyof Radius;\n};\n\nexport type ContainerProps = KitchnComponent<Props, ViewComponent>;\n\nconst ContainerComponent = styled(({ children, ...props }: ContainerProps) => {\n  return <View {...props}>{children}</View>;\n})`\n  display: flex;\n  flex-direction: ${(props) => (props.row ? \"row\" : \"column\")};\n  max-width: 100%;\n  justify-content: ${(props) => props.justify || \"flex-start\"};\n  align-items: ${(props) => props.align || \"stretch\"};\n  background: ${(props) =>\n    props.theme.colors.layout[\n      (props.background || props.bg) as keyof LayoutColors\n    ] ||\n    props.background ||\n    props.bg ||\n    props.theme.colors.layout[\n      (props.backgroundColor || props.bgc) as keyof LayoutColors\n    ] ||\n    props.theme.colors.accent[\n      (props.backgroundAccent || props.bga) as keyof AccentColors\n    ] ||\n    \"transparent\"};\n  ${(props) =>\n    props.gap &&\n    `gap: ${props.theme.gap[props.gap as keyof Gap] || `${props.gap}px`};`}\n  ${(props) => props.flex && props.flex};\n  ${(props) =>\n    (props.borderRadius || props.br) &&\n    `border-radius: ${\n      props.theme.radius[(props.borderRadius || props.br) as keyof Radius] ||\n      (isNumber(props.borderRadius)\n        ? `${props.borderRadius || props.br}px`\n        : props.borderRadius || props.br)\n    };`}\n`;\n\nContainerComponent.displayName = \"KitchnContainer\";\nexport const Container = withScale(ContainerComponent);\nexport default Container;\n","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components/native\";\n\nimport { isNumber } from \"../../utils/isNumber\";\nimport { Breakpoint, Gap, Size } from \"../types/theme\";\n\nexport type ScaleProps = {\n  width?: string | number | keyof Gap | keyof Breakpoint;\n  height?: string | number | keyof Gap | keyof Breakpoint;\n  padding?: string | number | keyof Gap;\n  margin?: string | number | keyof Gap;\n  w?: string | number | keyof Gap | keyof Breakpoint;\n  h?: string | number | keyof Gap | keyof Breakpoint;\n  p?: string | number | keyof Gap;\n  m?: string | number | keyof Gap;\n  paddingLeft?: string | number | keyof Gap;\n  paddingRight?: string | number | keyof Gap;\n  paddingTop?: string | number | keyof Gap;\n  paddingBottom?: string | number | keyof Gap;\n  pl?: string | number | keyof Gap;\n  pr?: string | number | keyof Gap;\n  pt?: string | number | keyof Gap;\n  pb?: string | number | keyof Gap;\n  marginLeft?: string | number | keyof Gap;\n  marginRight?: string | number | keyof Gap;\n  marginTop?: string | number | keyof Gap;\n  marginBottom?: string | number | keyof Gap;\n  ml?: string | number | keyof Gap;\n  mr?: string | number | keyof Gap;\n  mt?: string | number | keyof Gap;\n  mb?: string | number | keyof Gap;\n  px?: string | number | keyof Gap;\n  py?: string | number | keyof Gap;\n  mx?: string | number | keyof Gap;\n  my?: string | number | keyof Gap;\n  minWidth?: string | number | keyof Gap | keyof Breakpoint;\n  minHeight?: string | number | keyof Gap | keyof Breakpoint;\n  maxWidth?: string | number | keyof Gap | keyof Breakpoint;\n  maxHeight?: string | number | keyof Gap | keyof Breakpoint;\n  minW?: string | number | keyof Gap | keyof Breakpoint;\n  minH?: string | number | keyof Gap | keyof Breakpoint;\n  maxW?: string | number | keyof Gap | keyof Breakpoint;\n  maxH?: string | number | keyof Gap | keyof Breakpoint;\n  font?: string | number | keyof Size;\n};\n\nconst handleValue = (\n  theme: DefaultTheme,\n  value?: string | number | keyof Gap | keyof Breakpoint,\n) => {\n  return (\n    theme.gap[value as keyof Gap] ||\n    theme.breakpoint[value as keyof Breakpoint] ||\n    (isNumber(value) ? `${value}px` : value)\n  );\n};\n\nconst handleFont = (\n  theme: DefaultTheme,\n  value: string | number | keyof Size,\n) => {\n  return (\n    theme.size[value as keyof Size] || (isNumber(value) ? `${value}px` : value)\n  );\n};\n\nexport const withScale = <T extends object>(\n  WrappedComponent: React.ComponentType<T & ScaleProps>,\n) => {\n  return styled(WrappedComponent)<T & ScaleProps>`\n    ${({ theme, width, w }) =>\n      width || w ? `width: ${handleValue(theme, width || w)};` : \"\"}\n    ${({ theme, height, h }) =>\n      height || h ? `height: ${handleValue(theme, height || h)};` : \"\"}\n    ${({ theme, padding, p }) =>\n      padding || p ? `padding: ${handleValue(theme, padding || p)};` : \"\"}\n    ${({ theme, margin, m }) =>\n      margin || m ? `margin: ${handleValue(theme, margin || m)};` : \"\"}\n    ${({ theme, paddingLeft, pl, px }) =>\n      paddingLeft || pl || px\n        ? `padding-left: ${handleValue(theme, paddingLeft || pl || px)};`\n        : \"\"}\n    ${({ theme, paddingRight, pr, px }) =>\n      paddingRight || pr || px\n        ? `padding-right: ${handleValue(theme, paddingRight || pr || px)};`\n        : \"\"}\n    ${({ theme, paddingTop, pt, py }) =>\n      paddingTop || pt || py\n        ? `padding-top: ${handleValue(theme, paddingTop || pt || py)};`\n        : \"\"}\n    ${({ theme, paddingBottom, pb, py }) =>\n      paddingBottom || pb || py\n        ? `padding-bottom: ${handleValue(theme, paddingBottom || pb || py)};`\n        : \"\"}\n    ${({ theme, marginLeft, ml, mx }) =>\n      marginLeft || ml || mx\n        ? `margin-left: ${handleValue(theme, marginLeft || ml || mx)};`\n        : \"\"}\n    ${({ theme, marginRight, mr, mx }) =>\n      marginRight || mr || mx\n        ? `margin-right: ${handleValue(theme, marginRight || mr || mx)};`\n        : \"\"}\n    ${({ theme, marginTop, mt, my }) =>\n      marginTop || mt || my\n        ? `margin-top: ${handleValue(theme, marginTop || mt || my)};`\n        : \"\"}\n    ${({ theme, marginBottom, mb, my }) =>\n      marginBottom || mb || my\n        ? `margin-bottom: ${handleValue(theme, marginBottom || mb || my)};`\n        : \"\"}\n    ${({ theme, minWidth, minW }) =>\n      minWidth || minW\n        ? `min-width: ${handleValue(theme, minWidth || minW)};`\n        : \"\"}\n    ${({ theme, minHeight, minH }) =>\n      minHeight || minH\n        ? `min-height: ${handleValue(theme, minHeight || minH)};`\n        : \"\"}\n    ${({ theme, maxWidth, maxW }) =>\n      maxWidth || maxW\n        ? `max-width: ${handleValue(theme, maxWidth || maxW)};`\n        : \"\"}\n    ${({ theme, maxHeight, maxH }) =>\n      maxHeight || maxH\n        ? `max-height: ${handleValue(theme, maxHeight || maxH)};`\n        : \"\"}\n    ${({ theme, font }) =>\n      font ? `font-size: ${handleFont(theme, font)};` : \"\"}\n  `;\n};\n","import React from \"react\";\nimport RemixIcon from \"react-native-remix-icon\";\n\nimport { withScale } from \"../../hoc\";\nimport { useTheme } from \"../../hooks\";\nimport { AccentColors, KitchnComponent, Size, TextColors } from \"../../types\";\n\ntype Props = {\n  name: string;\n  size?: number | string | keyof Size;\n  fill?: boolean;\n  /**\n   * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.\n   */\n  color?: keyof TextColors | string;\n  /**\n   * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.\n   */\n  accent?: keyof AccentColors;\n};\n\nexport type IconProps = KitchnComponent<Props>;\n\nconst IconComponent = ({\n  name,\n  size = \"normal\",\n  fill,\n  color,\n  accent,\n  ...props\n}: IconProps) => {\n  const { theme } = useTheme();\n  return (\n    <RemixIcon\n      name={`${name}-${fill ? \"fill\" : \"line\"}`}\n      size={theme.size[size as keyof Size] || size || theme.size.normal}\n      color={\n        theme.colors.accent[accent as keyof AccentColors] ||\n        theme.colors.text[color as keyof TextColors] ||\n        color ||\n        theme.colors.text.lightest\n      }\n      {...props}\n    />\n  );\n};\n\nIconComponent.displayName = \"KitchnIcon\";\nexport const Icon = withScale(IconComponent);\nexport default Icon;\n","import React from \"react\";\nimport { Text as NText, TextProps as NTextProps } from \"react-native\";\nimport styled from \"styled-components/native\";\n\nimport { capitalize } from \"../../../utils/capitalize\";\nimport { withScale } from \"../../hoc\";\nimport { KitchnComponent } from \"../../types\";\nimport { AccentColors, Size, TextColors, Weight } from \"../../types/theme\";\n\ntype Props = {\n  /**\n   * The font size.\n   */\n  size?: keyof Size;\n  /**\n   * The line height.\n   */\n  lineHeight?: number | string;\n  /**\n   * The font weight.\n   */\n  weight?: keyof Weight;\n  /**\n   * Text transform short hand.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\n   * @default \"initial\"\n   */\n  transform?: \"capitalize\" | \"uppercase\" | \"lowercase\" | \"none\";\n  /**\n   * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.\n   */\n  color?: keyof TextColors;\n  /**\n   * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.\n   */\n  accent?: keyof AccentColors;\n  /**\n   * Truncate a single or multiple line(s). If you pass truncate, make sure to pass `title` so that the full value is shown on hover.\n   * @default false\n   */\n  truncate?: boolean | number;\n  /**\n   * Text alignment short hand.\n   */\n  align?: \"left\" | \"center\" | \"right\";\n  /**\n   * If text is `truncated`, this should be the full text.\n   */\n  title?: string;\n  /**\n   * Whether the text should wrap lines\n   * @type {boolean}\n   * @default true\n   */\n  wrap?: boolean;\n  /**\n   * \tWhether to use the monospace font.\n   * @type {boolean}\n   * @default false\n   */\n  monospace?: boolean;\n};\n\nexport type TextProps = KitchnComponent<Props, NTextProps>;\n\nconst TextComponent = styled(({ children, truncate, ...props }: TextProps) => {\n  return (\n    <NText\n      numberOfLines={truncate ? 1 : undefined}\n      ellipsizeMode={truncate ? \"tail\" : undefined}\n      {...props}\n    >\n      {children}\n    </NText>\n  );\n})<TextProps>`\n  font-size: ${(props) => props.theme.size[props.size || \"normal\"]};\n  color: ${(props) =>\n    props.theme.colors.accent[props.accent as keyof AccentColors] ||\n    props.theme.colors.text[props.color as keyof TextColors] ||\n    props.theme.colors.text.lightest};\n  };\n  text-align: ${(props) => props.align || \"left\"};\n  text-transform: ${(props) => props.transform || \"none\"};\n  line-height: ${(props) => {\n    const lineHeight = props.lineHeight || 1.25;\n    const fontSize = parseInt(\n      props.theme.size[props.size || \"normal\"].replace(\"px\", \"\"),\n      10,\n    );\n\n    return typeof lineHeight === \"number\"\n      ? `${lineHeight * fontSize}px`\n      : lineHeight;\n  }};\n  font-family: ${({ theme, weight = \"regular\", monospace }) => {\n    return `${monospace ? theme.family.monospace : theme.family.primary}_${\n      theme.weight[weight]\n    }${capitalize(weight)}`;\n  }};\n`;\n\nTextComponent.displayName = \"KitchnText\";\nexport const Text = withScale(TextComponent);\nexport default Text;\n","import React from \"react\";\nimport {\n  TextInput,\n  TextInputProps,\n  NativeSyntheticEvent,\n  TextInputChangeEventData,\n  TextInputFocusEventData,\n  // GestureResponderEvent, because\n} from \"react-native/types\";\nimport styled, { useTheme } from \"styled-components/native\";\n\nimport { capitalize } from \"../../../utils/capitalize\";\nimport { convertRGBToRGBA } from \"../../../utils/convertRGBToRGBA\";\nimport { isNumber } from \"../../../utils/isNumber\";\nimport { withScale } from \"../../hoc/withScale\";\nimport { AccentColors, KitchnComponent, NormalSizes } from \"../../types\";\nimport Icon, { IconProps } from \"../Icon\";\nimport Text from \"../Text\";\n\ntype Props = {\n  name?: string;\n  placeholder?: string;\n  size?: NormalSizes;\n  prefix?: JSX.Element | string;\n  suffix?: JSX.Element | string;\n  initialValue?: string;\n  value?: string;\n  disabled?: boolean;\n  prefixStyling?: boolean;\n  suffixStyling?: boolean;\n  prefixContainer?: boolean;\n  suffixContainer?: boolean;\n  clearable?: boolean;\n  width?: number | string;\n  error?: string;\n  readOnly?: boolean;\n  // temporary any because 0.70.6 is not compatible with 0.73.0\n  onClearClick?: (_event: any /* GestureResponderEvent */) => void;\n  type?: keyof AccentColors;\n  label?: string;\n  onChange?: (_event: NativeSyntheticEvent<InputChangeEventData>) => void;\n  onChangeText?: (_value: string) => void;\n  pattern?: { [key: string]: RegExp };\n};\n\nexport type InputProps = KitchnComponent<Props, TextInputProps>;\n\nexport type InputChangeEventData = TextInputChangeEventData & {\n  name?: string;\n  pattern?: { [key: string]: RegExp };\n};\n\nconst defaultProps: Props = {\n  size: \"normal\",\n  disabled: false,\n  prefixStyling: true,\n  suffixStyling: true,\n  prefixContainer: true,\n  suffixContainer: true,\n  clearable: false,\n  initialValue: \"\",\n  readOnly: false,\n};\n\nconst InputComponent: React.FC<InputProps> = React.forwardRef<\n  TextInput,\n  React.PropsWithChildren<InputProps>\n>(\n  (\n    {\n      name,\n      size,\n      prefix,\n      suffix,\n      disabled,\n      prefixContainer,\n      suffixContainer,\n      prefixStyling,\n      suffixStyling,\n      clearable,\n      value,\n      initialValue,\n      readOnly,\n      onChange,\n      onChangeText,\n      width,\n      onClearClick,\n      onFocus,\n      onBlur,\n      error,\n      type,\n      label,\n      pattern,\n      ...props\n    }: InputProps & typeof defaultProps,\n    ref: React.ForwardedRef<TextInput>,\n  ) => {\n    const theme = useTheme();\n    const inputRef = React.useRef<TextInput>(null);\n    React.useImperativeHandle(ref, () => inputRef.current as TextInput);\n\n    const [selfValue, setSelfValue] = React.useState<string | undefined>(\n      initialValue,\n    );\n    const isControlledComponent = React.useMemo(\n      () => value !== undefined,\n      [value],\n    );\n    const [focus, setFocus] = React.useState<boolean>(false);\n\n    const handleChange = (\n      event: NativeSyntheticEvent<InputChangeEventData>,\n    ) => {\n      event.nativeEvent.name = name;\n      event.nativeEvent.pattern = pattern;\n      if (disabled || readOnly) return;\n      setSelfValue(event.nativeEvent.text);\n      onChange && onChange(event);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (disabled || readOnly) return;\n      setSelfValue(value);\n      onChangeText && onChangeText(value);\n    };\n\n    const handleFocus = (\n      event: NativeSyntheticEvent<TextInputFocusEventData>,\n    ) => {\n      if (disabled || readOnly) return;\n      setFocus(true);\n      onFocus && onFocus(event);\n    };\n\n    const handleBlur = (\n      event: NativeSyntheticEvent<TextInputFocusEventData>,\n    ) => {\n      if (disabled || readOnly) return;\n      setFocus(false);\n      onBlur && onBlur(event);\n    };\n\n    const handleClear = (event: any /* GestureResponderEvent */) => {\n      if (disabled || readOnly) return;\n      setSelfValue(\"\");\n      onClearClick && onClearClick(event);\n      if (!inputRef.current) return;\n\n      inputRef.current.clear();\n      inputRef.current.focus();\n      onChange && onChange(event as any);\n      onChangeText && onChangeText(\"\");\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n      if (isControlledComponent) {\n        setSelfValue(value as string);\n      }\n    });\n\n    const controlledValue = isControlledComponent\n      ? { value: selfValue }\n      : { defaultValue: initialValue };\n\n    const inputProps = {\n      ...props,\n      ...controlledValue,\n    };\n\n    return (\n      <Wrapper>\n        {label && (\n          <Text size={\"small\"} weight={\"medium\"} color={\"light\"} mb={\"tiny\"}>\n            {label}\n          </Text>\n        )}\n        <Container disabled={disabled} width={width} size={size}>\n          {prefix && prefixContainer && (\n            <Prefix\n              size={size}\n              disabled={disabled}\n              prefixStyling={prefixStyling}\n              focus={focus}\n              error={error}\n              type={type}\n            >\n              {prefix}\n            </Prefix>\n          )}\n          <Field\n            ref={inputRef}\n            size={size}\n            prefix={prefix}\n            suffix={suffix}\n            prefixContainer={prefixContainer}\n            suffixContainer={suffixContainer}\n            prefixStyling={prefixStyling}\n            suffixStyling={suffixStyling}\n            disabled={disabled}\n            clearable={clearable}\n            error={error}\n            focus={focus}\n            type={type}\n            value={value}\n            selfValue={selfValue}\n            onChange={handleChange}\n            onChangeText={handleChangeText}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            readOnly={readOnly}\n            {...inputProps}\n            placeholderTextColor={\n              error\n                ? convertRGBToRGBA(theme.colors.accent.danger, 0.5)\n                : type\n                  ? convertRGBToRGBA(theme.colors.accent[type], 0.5)\n                  : theme.colors.text.light\n            }\n            {...props}\n          />\n          {clearable && selfValue !== undefined && (\n            <Clear\n              size={size}\n              disabled={disabled}\n              suffix={suffix}\n              suffixContainer={suffixContainer}\n              suffixStyling={suffixStyling}\n              error={error}\n              focus={focus}\n              type={type}\n              onPress={handleClear}\n            >\n              <ClearIcon\n                name={\"close-circle\"}\n                size={\n                  size === \"large\"\n                    ? \"normal\"\n                    : size === \"small\"\n                      ? \"tiny\"\n                      : \"small\"\n                }\n                visible={Boolean(selfValue !== \"\")}\n                fill\n              />\n            </Clear>\n          )}\n          {suffix && (\n            <Suffix\n              size={size}\n              disabled={disabled}\n              suffixStyling={suffixStyling}\n              focus={focus}\n              error={error}\n              type={type}\n            >\n              {suffix}\n            </Suffix>\n          )}\n        </Container>\n        {error && (\n          <Text\n            size={\n              size === \"small\" ? \"tiny\" : size === \"large\" ? \"small\" : \"small\"\n            }\n            width={width}\n            accent={\"danger\"}\n            mt={\"tiny\"}\n          >\n            {error}\n          </Text>\n        )}\n      </Wrapper>\n    );\n  },\n);\n\nconst Wrapper = styled.View``;\n\nconst Container = styled.View<{\n  disabled: InputProps[\"disabled\"];\n  width: InputProps[\"width\"];\n  size: InputProps[\"size\"];\n}>`\n  flex-direction: row;\n  align-items: center;\n  width: ${({ width }) =>\n    width ? (isNumber(width) ? `${width}px` : width) : \"100%\"};\n  max-width: 100%;\n  font-size: ${({ size, theme }) => {\n    switch (size) {\n      case \"small\":\n        return theme.size.tiny;\n      case \"large\":\n        return theme.size.normal;\n      case \"normal\":\n      default:\n        return theme.size.small;\n    }\n  }};\n  border-radius: ${({ theme }) => theme.radius.square};\n`;\n\nconst Field = styled.TextInput<\n  InputProps & {\n    ref: React.ForwardedRef<TextInput>;\n    focus: boolean;\n    selfValue: string | undefined;\n  }\n>`\n  font-family: ${({ theme }) => {\n    const weight = \"regular\";\n    return `${theme.family.primary}_${theme.weight[weight]}${capitalize(\n      weight,\n    )}`;\n  }};\n  flex: 1;\n  min-width: 0;\n  border-radius: ${({ theme }) => theme.radius.square};\n  color: ${({ theme, error, type }) =>\n    error\n      ? theme.colors.accent.danger\n      : type\n        ? theme.colors.accent[type]\n        : theme.colors.text.lightest};\n  background-color: ${({ theme, disabled }) =>\n    disabled ? theme.colors.layout.darker : theme.colors.layout.darkest};\n\n  padding: 0 ${({ theme }) => theme.gap.small};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n\n  border: 1px solid\n    ${({ theme, error, focus, type }) =>\n      error\n        ? theme.colors.accent.danger\n        : type\n          ? theme.colors.accent[type]\n          : focus\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n\n  ${({ prefix, prefixContainer }) =>\n    prefix &&\n    prefixContainer &&\n    `\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `}\n  ${({ suffix, suffixContainer, clearable, selfValue }) =>\n    ((suffix && suffixContainer) || (clearable && selfValue !== undefined)) &&\n    `\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `}\n  ${({ prefix, prefixContainer, prefixStyling }) =>\n    prefix && prefixContainer && !prefixStyling && \"border-left-width: 0;\"}\n  ${({ suffix, suffixContainer, suffixStyling, clearable, selfValue }) =>\n    ((suffix && suffixContainer && !suffixStyling) ||\n      (clearable && selfValue !== undefined)) &&\n    \"border-right-width: 0;\"}\n`;\n\nconst Prefix = styled.View<{\n  size: InputProps[\"size\"];\n  disabled: InputProps[\"disabled\"];\n  prefixStyling: InputProps[\"prefixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n}>`\n  flex-direction: row;\n  align-items: center;\n  flex-shrink: 0;\n  border: 1px solid\n    ${({ theme, error, focus, prefixStyling, type }) =>\n      error && !prefixStyling\n        ? theme.colors.accent.danger\n        : type && !prefixStyling\n          ? theme.colors.accent[type]\n          : focus && !prefixStyling\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-right-width: 0;\n  border-top-left-radius: ${({ theme }) => theme.radius.square};\n  border-bottom-left-radius: ${({ theme }) => theme.radius.square};\n  padding: 0 ${({ theme }) => theme.gap.small};\n  background-color: ${({ theme, prefixStyling, disabled }) =>\n    prefixStyling || disabled\n      ? theme.colors.layout.darker\n      : theme.colors.layout.darkest};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n`;\n\nconst Suffix = styled.View<{\n  size: InputProps[\"size\"];\n  disabled: InputProps[\"disabled\"];\n  suffixStyling: InputProps[\"suffixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n}>`\n  flex-direction: row;\n  align-items: center;\n  flex-shrink: 0;\n  border: 1px solid\n    ${({ theme, error, focus, suffixStyling, type }) =>\n      error && !suffixStyling\n        ? theme.colors.accent.danger\n        : type && !suffixStyling\n          ? theme.colors.accent[type]\n          : focus && !suffixStyling\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-left-width: 0;\n  border-top-right-radius: ${({ theme }) => theme.radius.square};\n  border-bottom-right-radius: ${({ theme }) => theme.radius.square};\n  ${({ theme }) => theme.radius.square} 0;\n  padding: 0 ${({ theme }) => theme.gap.small};\n  background-color: ${({ theme, suffixStyling, disabled }) =>\n    suffixStyling || disabled\n      ? theme.colors.layout.darker\n      : theme.colors.layout.darkest};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n`;\n\nconst Clear = styled.Pressable<{\n  disabled: InputProps[\"disabled\"];\n  size: InputProps[\"size\"];\n  suffix: InputProps[\"suffix\"];\n  suffixContainer: InputProps[\"suffixContainer\"];\n  suffixStyling: InputProps[\"suffixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n}>`\n  flex-direction: row;\n  align-items: center;\n  flex-shrink: 0;\n  color: ${({ theme }) => theme.colors.text.light};\n  border: 1px solid\n    ${({ theme, error, focus, type }) =>\n      error\n        ? theme.colors.accent.danger\n        : type\n          ? theme.colors.accent[type]\n          : focus\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-left-width: 0;\n  padding-right: ${({ theme }) => theme.gap.small};\n  background-color: ${({ theme, disabled }) =>\n    disabled ? theme.colors.layout.darker : theme.colors.layout.darkest};\n  ${({ theme, suffix, suffixContainer }) =>\n    suffix && suffixContainer\n      ? `\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `\n      : `\n    border-top-right-radius: ${theme.radius.square};\n    border-bottom-right-radius: ${theme.radius.square};\n  `}\n  ${({ suffix, suffixContainer, suffixStyling }) =>\n    suffix && suffixContainer && !suffixStyling && \"border-right-width: 0;\"}\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n`;\n\nconst ClearIcon = styled(Icon)<\n  IconProps & {\n    visible: boolean;\n  }\n>`\n  ${({ visible }) => `opacity: ${visible ? 1 : 0};`}\n`;\n\nInputComponent.defaultProps = defaultProps;\nInputComponent.displayName = \"KitchnInput\";\nconst Input = withScale(InputComponent);\nexport default Input;\n"]}