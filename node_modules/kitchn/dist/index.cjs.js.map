{"version":3,"sources":["/home/runner/work/kitchn/kitchn/packages/kitchn/dist/index.cjs.js","../src/index.ts","../src/themes/index.ts","../src/themes/main.ts","../src/constants/index.ts","../src/contexts/Toasts.tsx","../src/hoc/withDecorator/background.ts","../src/hoc/withDecorator/border.ts","../src/hoc/withDecorator/margin.ts","../src/hoc/withDecorator/padding.ts","../src/hoc/withDecorator/position.ts","../src/hoc/withDecorator/decorator.tsx","../src/hoc/withDecorator/area.ts","../src/components/GlobalStyle/main.ts","../src/components/GlobalStyle/reset.ts","../src/components/GlobalStyle/theme.ts","../src/components/GlobalStyle/index.ts","../src/components/Toast/Container/index.tsx","../src/components/Provider/index.tsx","../src/components/Text/index.tsx","../src/components/Avatar/index.tsx","../src/components/Avatar/Group/index.tsx","../src/components/Badge/index.tsx","../src/utils/animate.ts","../src/components/Spinner/index.tsx","../src/components/Button/index.tsx","../src/hooks/useClickAnywhere.ts","../src/components/Container/index.tsx","../src/components/Image/index.tsx","../src/components/Icon/index.tsx","../src/components/Error/index.tsx","../src/components/Input/index.tsx","../src/components/Link/index.tsx","../src/utils/tooltip.ts","../src/components/Tooltip/Icon/index.tsx","../src/components/Tooltip/Content/index.tsx","../src/components/Tooltip/index.tsx","../src/components/Menu/index.tsx","../src/components/Calendar/index.tsx","../src/components/Checkbox/index.tsx","../src/components/Code/index.tsx","../src/components/Code/Inline/index.tsx","../src/components/Collapse/index.tsx","../src/components/Dropdown/index.tsx","../src/components/Combobox/Item/index.tsx","../src/components/Combobox/index.tsx","../src/components/Drawer/index.tsx","../src/components/Skeleton/index.tsx","../src/components/Entity/index.tsx","../src/components/Highlight/index.tsx","../src/components/Tabs/index.tsx","../src/components/Fieldset/index.tsx","../src/components/Footer/index.tsx","../src/components/Input/Password/index.tsx","../src/components/List/Item/index.tsx","../src/components/List/Ordered/index.tsx","../src/components/List/Unordered/index.tsx","../src/components/Modal/index.tsx","../src/components/NavigationMenu/Button/index.tsx","../src/components/NavigationMenu/Container/index.tsx","../src/components/NavigationMenu/Content/index.tsx","../src/components/NavigationMenu/Item/index.tsx","../src/components/NavigationMenu/index.tsx","../src/components/Note/index.tsx","../src/components/Progress/index.tsx","../src/components/Scroller/index.tsx","../src/components/Select/index.tsx","../src/components/Snippet/index.tsx","../src/components/Spacer/index.tsx","../src/components/Switch/index.tsx","../src/components/Textarea/index.tsx","../src/components/Toast/Item/index.tsx","../src/components/Toggle/index.tsx"],"names":["mainTheme","PREFIX","NAME","createTheme","theme","deepmerge","defaultThemes","darkTheme","lightTheme","excludedProperties","createThemeVariables","prefix","themeVariables","key","value","defaultToastLayout","css","createGlobalStyle","keyframes","Dropdown_default","InputComponent","NavigationMenuContext","type","kitchn"],"mappings":"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","file":"/home/runner/work/kitchn/kitchn/packages/kitchn/dist/index.cjs.js","sourcesContent":[null,"import styled from \"styled-components\";\n\n// ./styled-components\nexport * from \"./styled-components\";\n\n// ./types\nexport * from \"./types\";\n\n// ./themes\nexport * from \"./themes\";\n\n// ./components\nexport * from \"./components\";\n\n// ./contexts\nexport * from \"./contexts\";\n\n// ./hooks\nexport * from \"./hooks\";\n\n// .hoc\nexport * from \"./hoc\";\n\n// ./utils\nexport * from \"./utils\";\n\nconst kitchn = styled;\nexport default kitchn;\n","import { deepmerge } from \"deepmerge-ts\";\nimport { DefaultTheme } from \"styled-components\";\n\nimport { darkTheme } from \"./dark\";\nimport { lightTheme } from \"./light\";\nimport { mainTheme } from \"./main\";\nimport { PREFIX } from \"../constants\";\nimport { DeepPartial } from \"../types\";\nimport { MainTheme, Theme } from \"../types/theme\";\n\nexport * from \"./dark\";\nexport * from \"./light\";\nexport * from \"./main\";\nexport * from \"./tonightpass\";\n\nexport const createTheme = (\n  theme: Theme | (Theme & DeepPartial<MainTheme>),\n): DefaultTheme => {\n  return deepmerge(mainTheme, theme);\n};\n\nexport const defaultThemes = {\n  dark: createTheme(darkTheme),\n  light: createTheme(lightTheme),\n};\n\nexport const excludedProperties = [\n  \"name\",\n  \"size\",\n  \"breakpoint\",\n  \"gap\",\n  \"radius\",\n];\n\nexport const createThemeVariables = (\n  theme: DefaultTheme,\n  prefix = \"\",\n): DefaultTheme => {\n  const themeVariables: DefaultTheme = {} as DefaultTheme;\n\n  for (const key in theme) {\n    const value = theme[key as keyof typeof theme];\n\n    if (typeof value === \"object\") {\n      themeVariables[key] = createThemeVariables(value, `${prefix}-${key}`);\n    } else {\n      themeVariables[key] = `var(--${\n        prefix ? `${prefix}` : \"\"\n      }-${key}, ${value})`;\n    }\n\n    if (excludedProperties.includes(key)) {\n      themeVariables[key] = value;\n    }\n  }\n\n  return themeVariables;\n};\n\nexport const convertThemeToCssVariables = (obj: object, prefix = \"\") => {\n  let cssVariables = \"\";\n\n  for (const key in obj) {\n    const value = obj[key as keyof typeof obj];\n\n    if (typeof value === \"object\") {\n      // If the value is an object, recursively call the function with the new prefix\n      cssVariables += convertThemeToCssVariables(value, `${prefix}-${key}`);\n    } else {\n      // If the value is not an object, generate the CSS variable\n      cssVariables += `--${prefix}-${key}: ${value};\\n`;\n    }\n  }\n\n  return cssVariables;\n};\n\nexport const generateThemes = (staticThemes: Record<string, DefaultTheme>) => {\n  const generatedThemes: Record<keyof typeof staticThemes, DefaultTheme> = {};\n\n  for (const key in staticThemes) {\n    generatedThemes[key] = createThemeVariables(staticThemes[key], PREFIX);\n  }\n\n  return generatedThemes;\n};\n","import { MainTheme } from \"../types/theme\";\n\nexport const mainTheme: MainTheme = {\n  family: {\n    primary: \"Figtree, -apple-system, sans-serif\",\n    monospace: \"Fira Code, monospace\",\n  },\n  weight: {\n    thin: 100,\n    extraLight: 200,\n    light: 300,\n    regular: 400,\n    medium: 500,\n    semiBold: 600,\n    bold: 700,\n    extraBold: 800,\n    black: 900,\n  },\n  size: {\n    extraTitle: \"48px\",\n    title: \"32px\",\n    large: \"24px\",\n    medium: \"18px\",\n    normal: \"16px\",\n    compact: \"14px\",\n    small: \"13px\",\n    tiny: \"11px\",\n  },\n  breakpoint: {\n    desktop: \"1824px\",\n    laptop: \"1224px\",\n    tablet: \"1024px\",\n    mobile: \"768px\",\n  },\n  gap: {\n    tiny: \"5px\",\n    small: \"10px\",\n    normal: \"15px\",\n    medium: \"20px\",\n    large: \"30px\",\n    extraLarge: \"60px\",\n  },\n  radius: {\n    square: \"8px\",\n    round: \"99999px\",\n  },\n};\n","export const PREFIX = \"kc\";\nexport const NAME = \"Kitchn\";\n","import React from \"react\";\n\nimport { Toast, ToastLayout } from \"../hooks/useToasts\";\n\nexport type UpdateToastsFunction = (fn: (toasts: Toast[]) => Toast[]) => void;\nexport type UpdateToastsLayoutFunction = (\n  fn: (layout: Required<ToastLayout>) => Required<ToastLayout>,\n) => void;\nexport type UpdateToastsIDFunction = (fn: () => string | null) => void;\n\nexport interface ToastsContextParams {\n  toasts: Toast[];\n  updateToasts: UpdateToastsFunction;\n  toastLayout: Required<ToastLayout>;\n  updateToastLayout: UpdateToastsLayoutFunction;\n  lastUpdateToastId: string | null;\n  updateLastToastId: UpdateToastsIDFunction;\n}\n\nexport const defaultToastLayout: Required<ToastLayout> = {\n  padding: \"12px 16px\",\n  margin: \"8px 0\",\n  width: \"420px\",\n  maxWidth: \"90vw\",\n  maxHeight: \"75px\",\n  placement: \"bottomRight\",\n};\n\nconst defaultParams: ToastsContextParams = {\n  toasts: [],\n  toastLayout: defaultToastLayout,\n  updateToastLayout: (t) => t,\n  updateToasts: (t) => t,\n  lastUpdateToastId: null,\n  updateLastToastId: () => null,\n};\n\nexport const ToastsContent: React.Context<ToastsContextParams> =\n  React.createContext<ToastsContextParams>(defaultParams);\n\nexport const useToastsContext = (): ToastsContextParams =>\n  React.useContext<ToastsContextParams>(ToastsContent);\n","import { CSSProperties } from \"react\";\nimport { css } from \"styled-components\";\n\nimport { AccentColors, LayoutColors } from \"../../types/theme\";\n\nexport type BackgroundProps = {\n  background?: CSSProperties[\"background\"] | keyof LayoutColors;\n  bg?: BackgroundProps[\"background\"];\n  backgroundColor?: CSSProperties[\"backgroundColor\"] | keyof LayoutColors;\n  bgc?: BackgroundProps[\"backgroundColor\"];\n  backgroundAccent?: keyof AccentColors;\n  bga?: BackgroundProps[\"backgroundAccent\"];\n};\n\nexport const backgroundCss = css<BackgroundProps>`\n  ${({ theme, background, bg, backgroundColor, bgc, backgroundAccent, bga }) =>\n    (background || bg || backgroundColor || bgc || backgroundAccent || bga) &&\n    `background: ${\n      theme.colors.layout[(background || bg) as keyof LayoutColors] ||\n      theme.colors.layout[(backgroundColor || bgc) as keyof LayoutColors] ||\n      theme.colors.accent[(backgroundAccent || bga) as keyof AccentColors] ||\n      background ||\n      bg\n    };`}\n`;\n","import { CSSProperties } from \"react\";\nimport { DefaultTheme, css } from \"styled-components\";\n\nimport { handlePixelValue } from \"./decorator\";\nimport { LayoutColors, Radius } from \"../../types/theme\";\n\nexport type BorderProps = {\n  borderStyle?: CSSProperties[\"borderStyle\"];\n  bs?: BorderProps[\"borderStyle\"];\n\n  borderWidth?: CSSProperties[\"borderWidth\"];\n  bw?: BorderProps[\"borderWidth\"];\n  borderLeftWidth?: CSSProperties[\"borderLeftWidth\"];\n  blw?: BorderProps[\"borderWidth\"];\n  borderRightWidth?: CSSProperties[\"borderRightWidth\"];\n  brw?: BorderProps[\"borderWidth\"];\n  borderTopWidth?: CSSProperties[\"borderTopWidth\"];\n  btw?: BorderProps[\"borderWidth\"];\n  borderBottomWidth?: CSSProperties[\"borderBottomWidth\"];\n  bbw?: BorderProps[\"borderWidth\"];\n\n  borderColor?: CSSProperties[\"borderColor\"] | keyof LayoutColors;\n  bc?: BorderProps[\"borderColor\"];\n  borderLeftColor?: CSSProperties[\"borderLeftColor\"] | keyof LayoutColors;\n  blc?: BorderProps[\"borderColor\"];\n  borderRightColor?: CSSProperties[\"borderRightColor\"] | keyof LayoutColors;\n  brc?: BorderProps[\"borderColor\"];\n  borderTopColor?: CSSProperties[\"borderTopColor\"] | keyof LayoutColors;\n  btc?: BorderProps[\"borderColor\"];\n  borderBottomColor?: CSSProperties[\"borderBottomColor\"] | keyof LayoutColors;\n  bbc?: BorderProps[\"borderColor\"];\n\n  borderRadius?: CSSProperties[\"borderRadius\"] | keyof Radius;\n  br?: BorderProps[\"borderRadius\"];\n  borderTopLeftRadius?: CSSProperties[\"borderTopLeftRadius\"] | keyof Radius;\n  btlr?: BorderProps[\"borderRadius\"];\n  borderTopRightRadius?: CSSProperties[\"borderTopRightRadius\"] | keyof Radius;\n  btrr?: BorderProps[\"borderRadius\"];\n  borderBottomLeftRadius?:\n    | CSSProperties[\"borderBottomLeftRadius\"]\n    | keyof Radius;\n  bblr?: BorderProps[\"borderRadius\"];\n  borderBottomRightRadius?:\n    | CSSProperties[\"borderBottomRightRadius\"]\n    | keyof Radius;\n  bbrr?: BorderProps[\"borderRadius\"];\n};\n\nexport const handleRadius = (\n  theme: DefaultTheme,\n  value?: string | number | keyof Radius,\n) => {\n  return (\n    theme.radius[value as keyof Radius] ||\n    handlePixelValue(value as string | number)\n  );\n};\n\nexport const borderCss = css<BorderProps>`\n  ${({ theme, borderRadius, br }) =>\n    borderRadius !== undefined || br !== undefined\n      ? `border-radius: ${handleRadius(theme, borderRadius || br)};`\n      : \"\"}\n\n  ${(props) => {\n    const borderProps = [\n      {\n        key: \"border-width\",\n        value:\n          props.borderWidth ||\n          props.bw ||\n          (props.borderColor ||\n          props.bc ||\n          props.borderTopColor ||\n          props.borderBottomColor ||\n          props.borderLeftColor ||\n          props.borderRightColor ||\n          props.btc ||\n          props.bbc ||\n          props.blc ||\n          props.brc ||\n          props.borderStyle ||\n          props.bs\n            ? \"1px\"\n            : undefined),\n      },\n      {\n        key: \"border-color\",\n        value:\n          props.borderColor ||\n          props.bc ||\n          (props.borderStyle ||\n          props.bs ||\n          props.borderWidth ||\n          props.bw ||\n          props.borderTopWidth ||\n          props.borderBottomWidth ||\n          props.borderLeftWidth ||\n          props.borderRightWidth ||\n          props.btw ||\n          props.bbw ||\n          props.blw ||\n          props.brw\n            ? props.theme.colors.layout.dark\n            : undefined),\n      },\n      {\n        key: \"border-style\",\n        value:\n          props.borderStyle ||\n          props.bs ||\n          (props.borderWidth ||\n          props.bw ||\n          props.borderTopWidth ||\n          props.borderBottomWidth ||\n          props.borderLeftWidth ||\n          props.borderRightWidth ||\n          props.btw ||\n          props.bbw ||\n          props.blw ||\n          props.brw ||\n          props.borderColor ||\n          props.bc ||\n          props.borderTopColor ||\n          props.borderBottomColor ||\n          props.borderLeftColor ||\n          props.borderRightColor ||\n          props.btc ||\n          props.bbc ||\n          props.blc ||\n          props.brc\n            ? \"solid\"\n            : undefined),\n      },\n      { key: \"border-left-width\", value: props.borderLeftWidth || props.blw },\n      {\n        key: \"border-right-width\",\n        value: props.borderRightWidth || props.brw,\n      },\n      { key: \"border-top-width\", value: props.borderTopWidth || props.btw },\n      {\n        key: \"border-bottom-width\",\n        value: props.borderBottomWidth || props.bbw,\n      },\n      { key: \"border-left-color\", value: props.borderLeftColor || props.blc },\n      {\n        key: \"border-right-color\",\n        value: props.borderRightColor || props.brc,\n      },\n      { key: \"border-top-color\", value: props.borderTopColor || props.btc },\n      {\n        key: \"border-bottom-color\",\n        value: props.borderBottomColor || props.bbc,\n      },\n      {\n        key: \"border-top-left-radius\",\n        value: props.borderTopLeftRadius || props.btlr,\n      },\n      {\n        key: \"border-top-right-radius\",\n        value: props.borderTopRightRadius || props.btrr,\n      },\n      {\n        key: \"border-bottom-left-radius\",\n        value: props.borderBottomLeftRadius || props.bblr,\n      },\n      {\n        key: \"border-bottom-right-radius\",\n        value: props.borderBottomRightRadius || props.bbrr,\n      },\n    ];\n\n    return borderProps\n      .filter((prop) => prop.value !== undefined)\n      .map(\n        (prop) =>\n          `${prop.key}: ${\n            prop.key.endsWith(\"color\")\n              ? ((props.theme.colors.layout[prop.value as keyof LayoutColors] ||\n                  prop.value) as string)\n              : prop.key.endsWith(\"radius\")\n                ? handleRadius(props.theme, prop.value as string)\n                : prop.key.endsWith(\"width\")\n                  ? handlePixelValue(prop.value as string)\n                  : prop.value\n          };`,\n      )\n      .join(\"\\n\");\n  }}\n`;\n","import { CSSProperties } from \"react\";\nimport { css } from \"styled-components\";\n\nimport { handleValue } from \"./decorator\";\nimport { Gap } from \"../../types/theme\";\n\nexport type MarginProps = {\n  margin?: CSSProperties[\"margin\"] | keyof Gap;\n  m?: MarginProps[\"margin\"];\n  marginLeft?: CSSProperties[\"marginLeft\"] | keyof Gap;\n  marginRight?: CSSProperties[\"marginRight\"] | keyof Gap;\n  marginTop?: CSSProperties[\"marginTop\"] | keyof Gap;\n  marginBottom?: CSSProperties[\"marginBottom\"] | keyof Gap;\n  ml?: MarginProps[\"marginLeft\"];\n  mr?: MarginProps[\"marginRight\"];\n  mt?: MarginProps[\"marginTop\"];\n  mb?: MarginProps[\"marginBottom\"];\n  mx?: MarginProps[\"margin\"];\n  my?: MarginProps[\"margin\"];\n};\n\nexport const marginCss = css<MarginProps>`\n  ${({ theme, margin, m }) =>\n    margin !== undefined || m !== undefined\n      ? `margin: ${handleValue(theme, margin || m)};`\n      : \"\"}\n  ${({ theme, marginLeft, ml, mx }) =>\n    marginLeft !== undefined || ml !== undefined || mx !== undefined\n      ? `margin-left: ${handleValue(theme, marginLeft || ml || mx)};`\n      : \"\"}\n  ${({ theme, marginRight, mr, mx }) =>\n    marginRight !== undefined || mr !== undefined || mx !== undefined\n      ? `margin-right: ${handleValue(theme, marginRight || mr || mx)};`\n      : \"\"}\n  ${({ theme, marginTop, mt, my }) =>\n    marginTop !== undefined || mt !== undefined || my !== undefined\n      ? `margin-top: ${handleValue(theme, marginTop || mt || my)};`\n      : \"\"}\n  ${({ theme, marginBottom, mb, my }) =>\n    marginBottom !== undefined || mb !== undefined || my !== undefined\n      ? `margin-bottom: ${handleValue(theme, marginBottom || mb || my)};`\n      : \"\"}\n`;\n","import { CSSProperties } from \"react\";\nimport { css } from \"styled-components\";\n\nimport { handleValue } from \"./decorator\";\nimport { Gap } from \"../../types/theme\";\n\nexport type PaddingProps = {\n  padding?: CSSProperties[\"padding\"] | keyof Gap;\n  p?: PaddingProps[\"padding\"];\n  paddingLeft?: CSSProperties[\"paddingLeft\"] | keyof Gap;\n  paddingRight?: CSSProperties[\"paddingRight\"] | keyof Gap;\n  paddingTop?: CSSProperties[\"paddingTop\"] | keyof Gap;\n  paddingBottom?: CSSProperties[\"paddingBottom\"] | keyof Gap;\n  pl?: PaddingProps[\"paddingLeft\"];\n  pr?: PaddingProps[\"paddingRight\"];\n  pt?: PaddingProps[\"paddingTop\"];\n  pb?: PaddingProps[\"paddingBottom\"];\n  px?: PaddingProps[\"padding\"];\n  py?: PaddingProps[\"padding\"];\n};\n\nexport const paddingCss = css<PaddingProps>`\n  ${({ theme, padding, p }) =>\n    padding !== undefined || p !== undefined\n      ? `padding: ${handleValue(theme, padding || p)};`\n      : \"\"}\n  ${({ theme, paddingLeft, pl, px }) =>\n    paddingLeft !== undefined || pl !== undefined || px !== undefined\n      ? `padding-left: ${handleValue(theme, paddingLeft || pl || px)};`\n      : \"\"}\n  ${({ theme, paddingRight, pr, px }) =>\n    paddingRight !== undefined || pr !== undefined || px !== undefined\n      ? `padding-right: ${handleValue(theme, paddingRight || pr || px)};`\n      : \"\"}\n  ${({ theme, paddingTop, pt, py }) =>\n    paddingTop !== undefined || pt !== undefined || py !== undefined\n      ? `padding-top: ${handleValue(theme, paddingTop || pt || py)};`\n      : \"\"}\n  ${({ theme, paddingBottom, pb, py }) =>\n    paddingBottom !== undefined || pb !== undefined || py !== undefined\n      ? `padding-bottom: ${handleValue(theme, paddingBottom || pb || py)};`\n      : \"\"}\n`;\n","import { CSSProperties } from \"react\";\nimport { css } from \"styled-components\";\n\nimport { handleValue } from \"./decorator\";\nimport { Breakpoint, Gap } from \"../../types/theme\";\n\nexport type PositionProps = {\n  position?: CSSProperties[\"position\"];\n  pos?: PositionProps[\"position\"];\n  zIndex?: CSSProperties[\"zIndex\"];\n  zi?: PositionProps[\"zIndex\"];\n  left?: CSSProperties[\"left\"] | keyof Gap | keyof Breakpoint;\n  right?: CSSProperties[\"right\"] | keyof Gap | keyof Breakpoint;\n  top?: CSSProperties[\"top\"] | keyof Gap | keyof Breakpoint;\n  bottom?: CSSProperties[\"bottom\"] | keyof Gap | keyof Breakpoint;\n  l?: PositionProps[\"left\"];\n  r?: PositionProps[\"right\"];\n  t?: PositionProps[\"top\"];\n  b?: PositionProps[\"bottom\"];\n};\n\nexport const positionCss = css<PositionProps>`\n  ${({ position, pos }) =>\n    (position ?? pos) !== undefined ? `position: ${position ?? pos};` : \"\"}\n  ${({ zIndex, zi }) =>\n    (zIndex ?? zi) !== undefined ? `z-index: ${zIndex ?? zi};` : \"\"}\n  ${({ theme, left, l }) =>\n    (left ?? l) !== undefined ? `left: ${handleValue(theme, left ?? l)};` : \"\"}\n  ${({ theme, right, r }) =>\n    (right ?? r) !== undefined\n      ? `right: ${handleValue(theme, right ?? r)};`\n      : \"\"}\n  ${({ theme, top, t }) =>\n    (top ?? t) !== undefined ? `top: ${handleValue(theme, top ?? t)};` : \"\"}\n  ${({ theme, bottom, b }) =>\n    (bottom ?? b) !== undefined\n      ? `bottom: ${handleValue(theme, bottom ?? b)};`\n      : \"\"}\n`;\n","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components\";\nimport { CSSProperties } from \"styled-components/native\";\n\nimport { AreaProps, areaCss } from \"./area\";\nimport { BackgroundProps, backgroundCss } from \"./background\";\nimport { BorderProps, borderCss } from \"./border\";\nimport { MarginProps, marginCss } from \"./margin\";\nimport { PaddingProps, paddingCss } from \"./padding\";\nimport { PositionProps, positionCss } from \"./position\";\nimport { Breakpoint, Gap, Size } from \"../../types/theme\";\nimport { isNumber } from \"../../utils/isNumber\";\n\nexport type DecoratorProps = {\n  display?: CSSProperties[\"display\"];\n  overflow?: CSSProperties[\"overflow\"];\n  font?: CSSProperties[\"fontSize\"] | keyof Size;\n  cursor?: CSSProperties[\"cursor\"];\n  pointerEvents?: CSSProperties[\"pointerEvents\"];\n  userSelect?: CSSProperties[\"userSelect\"];\n} & AreaProps &\n  BackgroundProps &\n  BorderProps &\n  MarginProps &\n  PaddingProps &\n  PositionProps;\n\nexport const handlePixelValue = (value?: string | number) => {\n  return isNumber(value) ? `${value}px` : value;\n};\n\nexport const handleValue = (\n  theme: DefaultTheme,\n  value?: string | number | keyof Gap | keyof Breakpoint,\n) => {\n  return (\n    theme.gap[value as keyof Gap] ||\n    theme.breakpoint[value as keyof Breakpoint] ||\n    handlePixelValue(value as string | number)\n  );\n};\n\nexport const handleFont = (\n  theme: DefaultTheme,\n  value: string | number | keyof Size,\n) => {\n  return (\n    theme.size[value as keyof Size] ||\n    handlePixelValue(value as string | number)\n  );\n};\n\nexport const withDecorator = <T extends object>(\n  WrappedComponent: React.ComponentType<T>,\n  passThroughProps: (keyof DecoratorProps)[] = [],\n) => {\n  const WithDecoratorComponent = React.forwardRef<\n    HTMLElement,\n    DecoratorProps & T\n  >((props, ref) => {\n    const filteredProps = Object.entries(props).reduce((acc, [key, value]) => {\n      if (\n        ![\n          \"w\",\n          \"h\",\n          \"height\",\n          \"width\",\n          \"minW\",\n          \"minH\",\n          \"maxW\",\n          \"maxH\",\n          \"zi\",\n          \"zIndex\",\n        ].includes(key) ||\n        passThroughProps.includes(key as keyof DecoratorProps)\n      ) {\n        (acc as { [key: string]: any })[key] = value;\n      }\n      return acc;\n    }, {} as T);\n\n    return <WrappedComponent {...filteredProps} ref={ref} />;\n  });\n\n  WithDecoratorComponent.displayName = `WithDecorator(${WrappedComponent.displayName || WrappedComponent.name || \"Component\"})`;\n\n  return styled(WithDecoratorComponent)<DecoratorProps>`\n    ${({ display }) => (display !== undefined ? `display: ${display};` : \"\")}\n    ${({ overflow }) =>\n      overflow !== undefined ? `overflow: ${overflow};` : \"\"}\n    ${({ theme, font }) =>\n      font !== undefined ? `font-size: ${handleFont(theme, font)};` : \"\"}\n    ${({ cursor }) => (cursor !== undefined ? `cursor: ${cursor};` : \"\")}\n    ${({ pointerEvents }) =>\n      pointerEvents !== undefined ? `pointer-events: ${pointerEvents};` : \"\"}\n    ${({ userSelect }) =>\n      userSelect !== undefined ? `user-select: ${userSelect};` : \"\"}\n    ${areaCss}\n    ${backgroundCss}\n    ${borderCss}\n    ${marginCss}\n    ${paddingCss}\n    ${positionCss}\n  `;\n};\n","import { CSSProperties } from \"react\";\nimport { css } from \"styled-components\";\n\nimport { handleValue } from \"./decorator\";\nimport { Breakpoint, Gap } from \"../../types/theme\";\n\nexport type AreaProps = {\n  width?: CSSProperties[\"width\"] | keyof Gap | keyof Breakpoint;\n  height?: CSSProperties[\"height\"] | keyof Gap | keyof Breakpoint;\n  w?: AreaProps[\"width\"];\n  h?: AreaProps[\"height\"];\n  minWidth?: CSSProperties[\"minWidth\"] | keyof Gap | keyof Breakpoint;\n  minHeight?: CSSProperties[\"minHeight\"] | keyof Gap | keyof Breakpoint;\n  maxWidth?: CSSProperties[\"maxWidth\"] | keyof Gap | keyof Breakpoint;\n  maxHeight?: CSSProperties[\"maxHeight\"] | keyof Gap | keyof Breakpoint;\n  minW?: AreaProps[\"minWidth\"];\n  minH?: AreaProps[\"minHeight\"];\n  maxW?: AreaProps[\"maxWidth\"];\n  maxH?: AreaProps[\"maxHeight\"];\n};\n\nexport const areaCss = css<AreaProps>`\n  ${({ theme, width, w }) =>\n    width !== undefined || w !== undefined\n      ? `width: ${handleValue(theme, width || w)};`\n      : \"\"}\n  ${({ theme, height, h }) =>\n    height !== undefined || h !== undefined\n      ? `height: ${handleValue(theme, height || h)};`\n      : \"\"}\n  ${({ theme, minWidth, minW }) =>\n    minWidth !== undefined || minW !== undefined\n      ? `min-width: ${handleValue(theme, minWidth || minW)};`\n      : \"\"}\n  ${({ theme, minHeight, minH }) =>\n    minHeight !== undefined || minH !== undefined\n      ? `min-height: ${handleValue(theme, minHeight || minH)};`\n      : \"\"}\n  ${({ theme, maxWidth, maxW }) =>\n    maxWidth !== undefined || maxW !== undefined\n      ? `max-width: ${handleValue(theme, maxWidth || maxW)};`\n      : \"\"}\n  ${({ theme, maxHeight, maxH }) =>\n    maxHeight !== undefined || maxH !== undefined\n      ? `max-height: ${handleValue(theme, maxHeight || maxH)};`\n      : \"\"}\n`;\n","import { css } from \"styled-components\";\n\nexport const mainCss = css`\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\",\n      \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif;\n    background-color: ${({ theme }) => theme.colors.layout.darkest};\n  }\n\n  option {\n    background-color: ${({ theme }) => theme.colors.layout.darkest};\n  }\n\n  /* scrollbar */\n\n  html,\n  body {\n    scrollbar-color: ${({ theme }) => theme.colors.layout.dark}\n      ${({ theme }) => theme.colors.layout.darkest};\n  }\n\n  ::-webkit-scrollbar {\n    width: 5px;\n    /* for vertical scrollbars */\n    height: 5px;\n    /* for horizontal scrollbars */\n  }\n\n  ::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.colors.layout.dark};\n    height: 5px;\n    border-radius: 5px;\n  }\n\n  ::-webkit-scrollbar-track-piece {\n    height: 30px;\n  }\n\n  /* fonts */\n\n  body,\n  input,\n  button,\n  textarea,\n  select,\n  option {\n    font-family: ${({ theme }) => theme.family.primary};\n    font-size: ${({ theme }) => theme.size.normal};\n    font-weight: ${({ theme }) => theme.weight.regular};\n    text-align: left;\n    color: ${({ theme }) => theme.colors.text.lightest};\n    line-height: 1.25;\n  }\n\n  span {\n    line-height: 1;\n  }\n\n  strong,\n  b {\n    font-weight: ${(props) => props.theme.weight.bold};\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n    cursor: pointer;\n\n    &:hover {\n      filter: brightness(0.8);\n    }\n  }\n\n  pre,\n  code {\n    font-family: ${({ theme }) => theme.family.monospace};\n\n    span {\n      font-family: ${({ theme }) => theme.family.monospace};\n    }\n  }\n`;\n","import { css } from \"styled-components\";\n\nexport const resetCss = css`\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  /* HTML5 display-role reset for older browsers */\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n  }\n\n  ol,\n  ul {\n    list-style: none;\n  }\n\n  blockquote,\n  q {\n    quotes: none;\n  }\n\n  blockquote::before,\n  blockquote:after,\n  q::before,\n  q::after {\n    content: \"\";\n    content: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n`;\n","import { css } from \"styled-components\";\n\nimport { PREFIX } from \"../../constants\";\nimport { convertThemeToCssVariables } from \"../../themes\";\nimport { Themes } from \"../../types\";\nimport { KitchnProviderProps } from \"../Provider\";\n\nexport const generateThemeCss = (\n  attribute: KitchnProviderProps[\"attribute\"],\n  themes: Themes,\n  theme: keyof Themes,\n) => {\n  theme = theme.trim();\n\n  return `\n    ${attribute === \"class\" ? `:root.${theme}` : `[${attribute}=\"${theme}\"]`} {\n      ${convertThemeToCssVariables(themes[theme], PREFIX)}\n    }\n  `;\n};\n\nexport const themeCss = css<{\n  staticThemes: Themes;\n  attribute: KitchnProviderProps[\"attribute\"];\n}>`\n  ${({ staticThemes, attribute }) => `\n    :root {\n      ${convertThemeToCssVariables(staticThemes.light, PREFIX)}\n    }\n\n    ${Object.keys(staticThemes)\n      .filter((theme) => theme !== \"light\")\n      .map((theme) => generateThemeCss(attribute, staticThemes, theme))}\n  `}\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nimport { mainCss } from \"./main\";\nimport { resetCss } from \"./reset\";\nimport { themeCss } from \"./theme\";\nimport { Themes } from \"../../types\";\nimport { KitchnProviderProps } from \"../Provider\";\n\nexport const GlobalStyle = createGlobalStyle<{\n  staticThemes: Themes;\n  attribute: KitchnProviderProps[\"attribute\"];\n}>`\n    ${resetCss}\n    ${themeCss}\n    ${mainCss}\n`;\n\nexport { mainCss, resetCss, themeCss };\nexport default GlobalStyle;\n","import React, { useMemo } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport { KitchnComponent, ToastItem, withDecorator } from \"../../..\";\nimport { useToastsContext } from \"../../../contexts/Toasts\";\nimport { useCurrentState } from \"../../../hooks/useCurrentState\";\nimport { usePortal } from \"../../../hooks/usePortal\";\n\nexport type ToastContainerProps = KitchnComponent<object>;\n\nconst ToastContainerComponent = styled((props: ToastContainerProps) => {\n  const portal = usePortal(\"toast\");\n  const [, setHovering, hoveringRef] = useCurrentState<boolean>(false);\n  const { toasts, updateToasts, toastLayout, lastUpdateToastId } =\n    useToastsContext();\n  const memoizedLayout = useMemo(() => toastLayout, [toastLayout]);\n  const toastElements = useMemo(\n    () =>\n      toasts.map((toast) => (\n        <ToastItem\n          toast={toast}\n          layout={memoizedLayout}\n          key={toast._internalIdent}\n        />\n      )),\n    [toasts, memoizedLayout],\n  );\n\n  const hoverHandler = (isHovering: boolean) => {\n    setHovering(isHovering);\n    if (isHovering) {\n      return updateToasts((last) =>\n        last.map((toast) => {\n          if (!toast.visible) return toast;\n          toast._timeout && window.clearTimeout(toast._timeout);\n          return {\n            ...toast,\n            timeout: null,\n          };\n        }),\n      );\n    }\n\n    updateToasts((last) =>\n      last.map((toast, index) => {\n        if (!toast.visible) return toast;\n        toast._timeout && window.clearTimeout(toast._timeout);\n        return {\n          ...toast,\n          _timeout: (() => {\n            const timer = window.setTimeout(\n              () => {\n                toast.cancel();\n                window.clearTimeout(timer);\n              },\n              toast.delay + index * 100,\n            );\n            return timer;\n          })(),\n        };\n      }),\n    );\n  };\n\n  React.useEffect(() => {\n    const index = toasts.findIndex(\n      (r) => r._internalIdent === lastUpdateToastId,\n    );\n    const toast = toasts[index];\n    if (!toast || toast.visible || !hoveringRef.current) return;\n    const hasVisible = toasts.find((r, i) => i < index && r.visible);\n    if (hasVisible || !hoveringRef.current) return;\n    hoverHandler(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toasts, lastUpdateToastId]);\n\n  React.useEffect(() => {\n    let timeout: null | number = null;\n    const timer = window.setInterval(() => {\n      if (toasts.length === 0) return;\n      timeout = window.setTimeout(() => {\n        const allInvisible = !toasts.find((r) => r.visible);\n        allInvisible && updateToasts(() => []);\n        timeout && clearTimeout(timeout);\n      }, 350);\n    }, 5000);\n\n    return () => {\n      timer && clearInterval(timer);\n      timeout && clearTimeout(timeout);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toasts]);\n\n  if (!portal) return null;\n  if (!toasts || toasts.length === 0) return null;\n  return createPortal(\n    <div\n      onMouseEnter={() => hoverHandler(true)}\n      onMouseLeave={() => hoverHandler(false)}\n      {...props}\n    >\n      {toastElements}\n    </div>,\n    portal,\n  );\n})`\n  position: fixed;\n  width: auto;\n  max-width: 100%;\n  right: ${({ theme }) => theme.gap.normal};\n  bottom: ${({ theme }) => theme.gap.normal};\n  z-index: 2000;\n  transition: all 400ms ease;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n`;\n\nToastContainerComponent.displayName = \"KitchnToastContainer\";\nexport const ToastContainer = withDecorator(ToastContainerComponent);\nexport default ToastContainer;\n","import isPropValid from \"@emotion/is-prop-valid\";\nimport { ThemeProvider as NextThemeProvider } from \"next-themes\";\nimport { ThemeProviderProps as NextThemeProviderProps } from \"next-themes/dist/types\";\nimport React from \"react\";\nimport {\n  DefaultTheme,\n  StyleSheetManager,\n  ShouldForwardProp,\n} from \"styled-components\";\n\nimport { PREFIX } from \"../../constants\";\nimport { ThemeProvider, ThemeProviderProps } from \"../../contexts/Theme\";\nimport {\n  defaultToastLayout,\n  ToastsContent,\n  ToastsContextParams,\n  UpdateToastsFunction,\n  UpdateToastsIDFunction,\n  UpdateToastsLayoutFunction,\n} from \"../../contexts/Toasts\";\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useCurrentState } from \"../../hooks/useCurrentState\";\nimport { defaultThemes, generateThemes } from \"../../themes\";\nimport { Themes } from \"../../types\";\nimport GlobalStyle from \"../GlobalStyle\";\nimport ToastContainer from \"../Toast/Container\";\n\nexport type KitchnProviderProps = {\n  children?: React.ReactNode;\n  theme?: ThemeProviderProps[\"theme\"];\n  enableSystem?: boolean;\n  defaultTheme?: keyof Themes | \"system\";\n  forcedTheme?: keyof Themes | \"system\";\n  themes?: Record<string, DefaultTheme>;\n  dangerouslyDisableNextThemeProvider?: boolean;\n  attribute?: string | \"class\";\n};\n\nexport const KitchnProviderComponent: React.FC<KitchnProviderProps> = ({\n  children,\n  enableSystem = true,\n  defaultTheme = enableSystem ? \"system\" : \"dark\",\n  themes: customThemes = {},\n  forcedTheme,\n  attribute = \"data-theme\",\n  dangerouslyDisableNextThemeProvider,\n}: KitchnProviderProps) => {\n  const staticThemes = { ...defaultThemes, ...customThemes };\n  const themes = React.useMemo(\n    () => generateThemes(staticThemes),\n    [customThemes],\n  );\n\n  const [lastUpdateToastId, setLastUpdateToastId] =\n    React.useState<ToastsContextParams[\"lastUpdateToastId\"]>(null);\n  const [toasts, setToasts, toastsRef] = useCurrentState<\n    ToastsContextParams[\"toasts\"]\n  >([]);\n  const [toastLayout, setToastLayout, toastLayoutRef] =\n    useCurrentState<ToastsContextParams[\"toastLayout\"]>(defaultToastLayout);\n  const updateToasts: UpdateToastsFunction = (fn) => {\n    const nextToasts = fn(toastsRef.current);\n    setToasts(nextToasts);\n  };\n  const updateToastLayout: UpdateToastsLayoutFunction = (fn) => {\n    const nextLayout = fn(toastLayoutRef.current);\n    setToastLayout(nextLayout);\n  };\n  const updateLastToastId: UpdateToastsIDFunction = (fn) => {\n    setLastUpdateToastId(fn());\n  };\n\n  const initialValue = React.useMemo<ToastsContextParams>(\n    () => ({\n      toasts,\n      toastLayout,\n      updateToasts,\n      lastUpdateToastId,\n      updateToastLayout,\n      updateLastToastId,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [toasts, toastLayout, lastUpdateToastId],\n  );\n\n  return (\n    <NextThemeProviderWrapper\n      storageKey={`${PREFIX}-theme`}\n      defaultTheme={defaultTheme}\n      enableSystem={enableSystem}\n      themes={Object.keys(themes).map((key) => key.toString())}\n      forcedTheme={forcedTheme}\n      dangerouslyDisableNextThemeProvider={dangerouslyDisableNextThemeProvider}\n      attribute={attribute}\n    >\n      <StyleSheetManager\n        shouldForwardProp={shouldForwardProp}\n        enableVendorPrefixes\n      >\n        <ThemeProvider themes={themes}>\n          <GlobalStyle staticThemes={staticThemes} attribute={attribute} />\n          <ToastsContent.Provider value={initialValue}>\n            {children}\n            <ToastContainer />\n          </ToastsContent.Provider>\n        </ThemeProvider>\n      </StyleSheetManager>\n    </NextThemeProviderWrapper>\n  );\n};\n\nexport const shouldForwardProp: ShouldForwardProp<\"web\"> = (\n  propName,\n  target,\n) => {\n  if (typeof target === \"string\") {\n    return isPropValid(propName);\n  }\n\n  return true;\n};\n\nexport type NextThemeProviderWrapperProps = NextThemeProviderProps & {\n  dangerouslyDisableNextThemeProvider?: boolean;\n};\n\nexport const NextThemeProviderWrapper: React.FC<\n  NextThemeProviderWrapperProps\n> = ({\n  children,\n  dangerouslyDisableNextThemeProvider,\n  ...props\n}: NextThemeProviderWrapperProps) => {\n  if (dangerouslyDisableNextThemeProvider) {\n    return <>{children}</>;\n  }\n\n  return <NextThemeProvider {...props}>{children}</NextThemeProvider>;\n};\n\nKitchnProviderComponent.displayName = \"KitchnProvider\";\nexport const KitchnProvider = withDecorator(KitchnProviderComponent);\nexport default KitchnProvider;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { handlePixelValue, withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { AccentColors, Size, TextColors, Weight } from \"../../types/theme\";\n\ntype Props = {\n  h1?: boolean;\n  h2?: boolean;\n  h3?: boolean;\n  h4?: boolean;\n  h5?: boolean;\n  h6?: boolean;\n  b?: boolean;\n  i?: boolean;\n  span?: boolean;\n  em?: boolean;\n  pre?: boolean;\n  /**\n   * The font size.\n   */\n  size?: keyof Size | number | string;\n  /**\n   * The line height.\n   */\n  lineHeight?: number | string;\n  /**\n   * The font weight.\n   */\n  weight?:\n    | keyof Weight\n    | number\n    | \"initial\"\n    | \"inherit\"\n    | \"unset\"\n    | \"revert\"\n    | \"revert-layer\"\n    | \"normal\"\n    | \"bold\"\n    | \"bolder\"\n    | \"lighter\";\n  /**\n   * Text transform short hand.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\n   * @default \"initial\"\n   */\n  transform?: \"capitalize\" | \"uppercase\" | \"lowercase\" | \"initial\";\n  decoration?:\n    | \"none\"\n    | \"underline\"\n    | \"line-through\"\n    | \"overline\"\n    | \"dashed\"\n    | \"blink\";\n  /**\n   * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.\n   */\n  color?:\n    | keyof TextColors\n    | string\n    | \"initial\"\n    | \"inherit\"\n    | \"unset\"\n    | \"revert\"\n    | \"revert-layer\";\n  /**\n   * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.\n   */\n  accent?: keyof AccentColors;\n  /**\n   * Truncate a single or multiple line(s). If you pass truncate, make sure to pass `title` so that the full value is shown on hover.\n   * @default false\n   */\n  truncate?: boolean | number;\n  /**\n   * Text alignment short hand.\n   */\n  align?: \"left\" | \"center\" | \"right\";\n  /**\n   * If text is `truncated`, this should be the full text.\n   */\n  title?: string;\n  /**\n   * Whether the text should wrap lines\n   * @type {boolean}\n   * @default true\n   */\n  wrap?: boolean;\n  /**\n   * \tWhether to use the monospace font.\n   * @type {boolean}\n   * @default false\n   */\n  monospace?: boolean;\n};\n\nexport type TextProps = KitchnComponent<Props>;\n\nconst TextComponent = styled(\n  ({\n    children,\n    // Prevents 'truncate', 'size', 'weight', 'color', 'accent', 'align', 'transform', 'decoration', 'lineHeight', 'wrap', 'monospace' from being passed to the DOM element, avoiding React warnings\n    truncate: _truncate,\n    size: _size,\n    weight: _weight,\n    color: _color,\n    accent: _accent,\n    align: _align,\n    transform: _transform,\n    decoration: _decoration,\n    lineHeight: _lineHeight,\n    wrap: _wrap,\n    monospace: _monospace,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    b,\n    i,\n    span,\n    em,\n    pre,\n    ...props\n  }: TextProps) => {\n    const Component = h1\n      ? \"h1\"\n      : h2\n        ? \"h2\"\n        : h3\n          ? \"h3\"\n          : h4\n            ? \"h4\"\n            : h5\n              ? \"h5\"\n              : h6\n                ? \"h6\"\n                : b\n                  ? \"b\"\n                  : i\n                    ? \"i\"\n                    : span\n                      ? \"span\"\n                      : em\n                        ? \"em\"\n                        : pre\n                          ? \"pre\"\n                          : \"p\";\n\n    return (\n      <Component role={\"text\"} {...props}>\n        {children}\n      </Component>\n    );\n  },\n)<TextProps>`\n  font-size: ${(props) =>\n    props.size !== undefined\n      ? props.theme.size[props.size as keyof Size] ||\n        handlePixelValue(props.size)\n      : props.theme.size.normal};\n  font-weight: ${(props) =>\n    props.weight\n      ? props.theme.weight[props.weight as keyof Weight] || props.weight\n      : props.b\n        ? props.theme.weight.bold\n        : props.theme.weight.regular};\n  color: ${(props) =>\n    props.theme.colors.accent[props.accent as keyof AccentColors] ||\n    props.theme.colors.text[props.color as keyof TextColors] ||\n    props.color ||\n    props.theme.colors.text.lightest};\n  text-align: ${(props) => props.align || \"left\"};\n  text-transform: ${(props) => props.transform || \"initial\"};\n  text-decoration: ${(props) => props.decoration || \"none\"};\n  line-height: ${(props) => props.lineHeight || 1.25};\n  white-space: ${(props) =>\n    props.wrap !== undefined ? (props.wrap ? \"normal\" : \"nowrap\") : \"normal\"};\n  font-family: ${(props) =>\n    props.monospace && props.theme.family.monospace\n      ? \"monospace\"\n      : props.theme.family.primary};\n  ${(props) =>\n    props.truncate &&\n    `\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-wrap: normal;\n    ${\n      Number(props.truncate) > 1\n        ? `\n      display: -webkit-box;\n      -webkit-line-clamp: ${props.truncate};\n      -webkit-box-orient: vertical;\n      white-space: normal;\n    `\n        : \"\"\n    }\n  `}\n\n  span {\n    line-height: ${(props) => props.lineHeight || 1};\n  }\n\n  em {\n    font-style: italic;\n  }\n`;\n\nTextComponent.displayName = \"KitchnText\";\nexport const Text = withDecorator(TextComponent);\nexport default Text;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { handlePixelValue, withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { shortenName } from \"../../utils/shortenName\";\nimport Text from \"../Text\";\n\ntype Props = {\n  /**\n   * The size of the avatar.\n   */\n  size?: number | string;\n\n  /**\n   * The username of the avatar from tonightpass.com.\n   */\n  username?: string;\n\n  /**\n   * The src of the avatar.\n   */\n  src?: string;\n\n  /**\n   * The text of the avatar\n   * (if it's a placeholder).\n   */\n  text?: string;\n\n  /**\n   * The shape of the avatar.\n   */\n  shape?: \"square\" | \"round\";\n};\n\nexport type AvatarProps = KitchnComponent<Props>;\n\nconst AvatarComponent = styled(\n  ({ size = 30, src, text, shape, username, ...props }: AvatarProps) => {\n    return (\n      <div role={\"img\"} aria-label={text || \"Avatar\"} {...props}>\n        {text && !src && <Text size={\"0.4em\"}>{shortenName(text)}</Text>}\n        {src && (\n          <AvatarImage\n            src={username ? `https://tonightpass.com/@${username}.png` : src}\n            shape={shape}\n            alt={\"Avatar\"}\n            width={size}\n            height={size}\n            draggable={false}\n          />\n        )}\n      </div>\n    );\n  },\n)<AvatarProps>`\n  width: ${({ size }) => handlePixelValue(size || 30)};\n  height: ${({ size }) => handlePixelValue(size || 30)};\n  border-radius: ${({ shape, theme }) =>\n    shape === \"square\" ? theme.radius.square : theme.radius.round};\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  font-size: ${({ size }) => handlePixelValue(size || 30)};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  user-select: none;\n  background-color: ${({ theme }) => theme.colors.layout.darker};\n  transition: all 0.2s;\n  overflow: hidden;\n`;\n\nexport const AvatarImage = styled.img<{ shape?: AvatarProps[\"shape\"] }>`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: ${({ shape, theme }) =>\n    shape === \"square\" ? theme.radius.square : theme.radius.round};\n`;\n\nAvatarComponent.displayName = \"KitchnAvatar\";\nexport const Avatar = withDecorator(AvatarComponent);\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Avatar, { AvatarProps } from \"..\";\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../../types\";\nimport Text from \"../../Text\";\n\ntype Props = {\n  /**\n   * The members of the avatar group.\n   */\n  members: {\n    username?: AvatarProps[\"username\"];\n    src?: AvatarProps[\"src\"];\n    text?: AvatarProps[\"text\"];\n  }[];\n\n  /**\n   * The limit of the avatar group.\n   * If the members are more than the limit,\n   * the last avatar will be a counter.\n   */\n  limit?: number;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number | string;\n};\n\nexport type AvatarGroupProps = KitchnComponent<Props>;\n\nconst AvatarGroupComponent = styled(\n  ({ members, size, limit, ...props }: AvatarGroupProps) => {\n    return (\n      <div role={\"group\"} aria-label={\"Avatar Group\"} {...props}>\n        {members\n          .slice(0, limit ? limit : members.length)\n          .map((member, index) => {\n            return <Avatar key={index} size={size} {...member} />;\n          })}\n        {limit && members.length > limit && (\n          <Text size={\"small\"}>\n            {\"+\"}\n            {members.length - limit}\n          </Text>\n        )}\n      </div>\n    );\n  },\n)`\n  display: flex;\n  align-items: center;\n\n  ${Text} {\n    margin-left: ${({ theme }) => theme.gap.tiny};\n  }\n\n  ${Avatar} {\n    margin-left: -10px;\n\n    ${Text} {\n      margin-left: 0;\n    }\n\n    &:first-child {\n      margin-left: 0;\n    }\n  }\n\n  &:hover {\n    ${Avatar} {\n      margin-left: 0;\n    }\n  }\n`;\n\nAvatarGroupComponent.displayName = \"KitchnAvatarGroup\";\nexport const AvatarGroup = withDecorator(AvatarGroupComponent);\nexport default AvatarGroup;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { capitalize, isString } from \"../..\";\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\n\ntype Props = {\n  /**\n   * The size of the badge.\n   * @default \"normal\"\n   */\n  size?: NormalSizes;\n\n  /**\n   * The type of the badge.\n   * @default \"primary\"\n   */\n  type?: \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\" | \"danger\";\n\n  /**\n   * The font weight of the badge.\n   */\n  bold?: boolean;\n};\n\nexport type BadgeProps = KitchnComponent<Props>;\n\nconst BadgeComponent = styled(({ children, ...props }: BadgeProps) => {\n  return (\n    <span role={\"status\"} aria-live={\"polite\"} {...props}>\n      {children && isString(children)\n        ? capitalize(children as string)\n        : children}\n    </span>\n  );\n})<BadgeProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  user-select: none;\n  white-space: nowrap;\n  padding: 0 10px;\n  font-weight: ${({ bold, theme }) =>\n    bold ? theme.weight.bold : theme.weight.medium};\n  border-radius: 8px;\n\n  padding: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"2px 4px\";\n      case \"large\":\n        return \"8px 12px\";\n      case \"normal\":\n      default:\n        return \"4px 8px\";\n    }\n  }};\n\n  font-size: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return props.theme.size.tiny;\n      case \"large\":\n        return props.theme.size.normal;\n      case \"normal\":\n      default:\n        return props.theme.size.small;\n    }\n  }};\n\n  color: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n      case \"warning\":\n      case \"info\":\n      case \"success\":\n      case \"secondary\":\n        return theme.colors.accent.light;\n      case \"primary\":\n      default:\n        return theme.colors.text.lightest;\n    }\n  }};\n\n  background-color: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n        return theme.colors.accent.danger;\n      case \"warning\":\n        return theme.colors.accent.warning;\n      case \"info\":\n        return theme.colors.accent.info;\n      case \"success\":\n        return theme.colors.accent.success;\n      case \"secondary\":\n        return theme.colors.layout.light;\n      case \"primary\":\n      default:\n        return theme.colors.layout.darker;\n    }\n  }};\n`;\n\nBadgeComponent.displayName = \"KitchnBadge\";\nexport const Badge = withDecorator(BadgeComponent);\nexport default Badge;\n","import { keyframes } from \"styled-components\";\n\nexport const fadeIn = keyframes`\n  0% {\n      opacity: 0;\n  }\n  to {\n      opacity: 1;\n  }\n`;\n\nexport const fadeOut = keyframes`\n  0% {\n      opacity: 1;\n  }\n  to {\n      opacity: 0;\n  }\n`;\n\nexport const fadeInDown = keyframes`\n  from {\n    opacity: 0;\n    transform: translate3d(0, -70%, 0);\n  }\n\n  to {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n`;\n\nexport const fadeOutUp = keyframes`\n  0% {\n      opacity: 1;\n  }\n  to {\n    opacity: 0;\n    transform: translate3d(0, -70%, 0);\n  }\n`;\n\nexport const float = keyframes`\n  0% {\n      transform: translatey(0px);\n  }\n  50% {\n      transform: translatey(-10px);\n  }\n  100% {\n      transform: translatey(0px);\n  }\n`;\n\nexport const loading = keyframes`\n  0% {\n    background-position: 0% 0;\n  }\n  50% {\n    background-position: 100% 0;\n  }\n  100% {\n    background-position: 0% 0;\n  }\n`;\n\nexport const rotate = keyframes`\n  from {\n    transform: rotate(360deg);\n  }\n  to {\n    transform: rotate(0deg);\n  }\n`;\n\nexport const skBouncedelay = keyframes`\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n  }\n  40% {\n    transform: scale(1);\n  }\n`;\n\nexport const skeleton = keyframes`\n  0% {\n    background-position: 200% 0;\n  }\n  to {\n    background-position: -200% 0;\n  }\n`;\n\nexport const slideInUp = keyframes`\n  0% {\n    transform: translate3d(0, 100%, 0);\n    visibility: visible;\n  }\n  to {\n    transform: translateZ(0);\n  }\n`;\n\nexport const slideOutDown = keyframes`\n  0% {\n    transform: translateZ(0);\n  }\n  to {\n    visibility: hidden;\n    transform: translate3d(0, 100%, 0);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { skBouncedelay } from \"../../utils/animate\";\n\ntype Props = {\n  color?: string;\n  size?: number;\n};\n\nexport type SpinnerProps = KitchnComponent<Props>;\n\nconst SpinnerComponent = styled(({ ...props }: SpinnerProps) => {\n  return (\n    <div role={\"status\"} aria-label={\"Loading\"} {...props}>\n      <div className={\"bounce1\"} />\n      <div className={\"bounce2\"} />\n      <div className={\"bounce3\"} />\n    </div>\n  );\n})`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({ size }) => size || 50}px;\n  height: ${({ size }) => size || 50}px;\n  text-align: center;\n\n  div {\n    width: 25%;\n    height: 25%;\n    background-color: ${({ color, theme }) =>\n      color || theme.colors.accent.light};\n\n    border-radius: 100%;\n    display: inline-block;\n    animation: ${skBouncedelay} 1.4s infinite ease-in-out both;\n  }\n\n  .bounce1 {\n    animation-delay: -0.32s;\n  }\n\n  .bounce2 {\n    animation-delay: -0.16s;\n  }\n`;\n\nSpinnerComponent.displayName = \"KitchnSpinner\";\nexport const Spinner = withDecorator(SpinnerComponent);\nexport default Spinner;\n","import React from \"react\";\nimport styled, { useTheme } from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\nimport { AccentColors } from \"../../types/theme\";\nimport { convertRGBToRGBA } from \"../../utils/convertRGBToRGBA\";\nimport { isNumber } from \"../../utils/isNumber\";\nimport Spinner from \"../Spinner\";\n\ntype Props = {\n  shape?: \"square\" | \"round\";\n  size?: NormalSizes;\n  loading?: boolean;\n  disabled?: boolean;\n  width?: number | string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  type?: keyof AccentColors;\n  htmlType?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"];\n  variant?: \"ghost\" | \"shadow\";\n  hover?: {\n    background: string;\n    color: string;\n    border: string;\n  };\n};\n\nexport type ButtonProps = KitchnComponent<\n  Props,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>;\n\nconst ForwardedButton = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      as: Component = \"button\",\n      children,\n      loading,\n      size,\n      width,\n      prefix,\n      suffix,\n      type: _type,\n      htmlType = \"button\",\n      ...props\n    },\n    ref: React.ForwardedRef<HTMLButtonElement>,\n  ) => {\n    const theme = useTheme();\n    return (\n      <Component\n        ref={ref}\n        aria-label={children ? undefined : \"Button\"}\n        aria-busy={loading ? \"true\" : undefined}\n        aria-disabled={props.disabled ? \"true\" : undefined}\n        role={\"button\"}\n        type={htmlType}\n        {...props}\n      >\n        {(prefix || loading) && (\n          <ButtonPrefix hasContent={children !== undefined}>\n            {loading ? (\n              <Spinner\n                size={\n                  size\n                    ? size === \"small\"\n                      ? 12\n                      : size === \"large\"\n                        ? 20\n                        : 16\n                    : 16\n                }\n                color={theme.colors.text.dark}\n              />\n            ) : (\n              prefix\n            )}\n          </ButtonPrefix>\n        )}\n        <ButtonContent width={width}>{children}</ButtonContent>\n        {suffix && <ButtonSuffix>{suffix}</ButtonSuffix>}\n      </Component>\n    );\n  },\n);\n\nForwardedButton.displayName = \"Button\";\n\nconst ButtonComponent = styled(ForwardedButton)<ButtonProps>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  outline: none;\n  transition: all 0.2s;\n  line-height: 1;\n  user-select: none;\n  font-weight: ${({ theme }) => theme.weight.bold};\n  font-family: ${({ theme }) => theme.family.primary};\n  cursor: ${(props) =>\n    props.disabled || props.loading ? \"not-allowed\" : \"pointer\"};\n  border-radius: ${({ shape }) => (shape === \"round\" ? \"99999px\" : \"8px\")};\n  width: ${({ width }) =>\n    width ? (isNumber(width) ? `${width}px` : width) : \"auto\"};\n\n  padding: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"6px 8px\";\n      case \"large\":\n        return \"12px 16px\";\n      case \"normal\":\n      default:\n        return \"8px 12px\";\n    }\n  }};\n\n  color: ${(props) => {\n    if (props.loading || props.disabled)\n      return `${props.theme.colors.text.light}`;\n\n    if (props.variant === \"ghost\") {\n      switch (props.type) {\n        case \"light\":\n          return props.theme.colors.text.lightest;\n        case \"dark\":\n          return props.theme.colors.text.light;\n        case \"info\":\n          return props.theme.colors.accent.info;\n        case \"success\":\n          return props.theme.colors.accent.success;\n        case \"warning\":\n          return props.theme.colors.accent.warning;\n        case \"danger\":\n          return props.theme.colors.accent.danger;\n        case \"secondary\":\n          return props.theme.colors.accent.secondary;\n        case \"primary\":\n          return props.theme.colors.accent.primary;\n      }\n    }\n\n    switch (props.type) {\n      case \"light\":\n        return props.theme.colors.text.darkest;\n      case \"dark\":\n        return props.theme.colors.text.lightest;\n      default:\n        return props.theme.colors.accent.light;\n    }\n  }};\n\n  background: ${(props) => {\n    if (props.loading || props.disabled)\n      return `${props.theme.colors.layout.darker}`;\n\n    if (props.variant === \"ghost\") return \"transparent\";\n\n    switch (props.type) {\n      case \"dark\":\n        return props.theme.colors.layout.darkest;\n      case \"light\":\n        return props.theme.colors.layout.lightest;\n      case \"info\":\n        return props.theme.colors.accent.info;\n      case \"success\":\n        return props.theme.colors.accent.success;\n      case \"warning\":\n        return props.theme.colors.accent.warning;\n      case \"danger\":\n        return props.theme.colors.accent.danger;\n      case \"secondary\":\n        return props.theme.colors.accent.secondary;\n      case \"primary\":\n      default:\n        return props.theme.colors.accent.primary;\n    }\n  }};\n\n  border: ${(props) => {\n    if (props.loading || props.disabled)\n      return `1px solid ${props.theme.colors.layout.dark}`;\n\n    if (props.variant === \"ghost\") return \"1px solid transparent\";\n\n    switch (props.type) {\n      case \"dark\":\n        return `1px solid ${props.theme.colors.layout.dark}`;\n      case \"light\":\n        return `1px solid ${props.theme.colors.layout.lightest}`;\n      case \"info\":\n        return `1px solid ${props.theme.colors.accent.info}`;\n      case \"success\":\n        return `1px solid ${props.theme.colors.accent.success}`;\n      case \"warning\":\n        return `1px solid ${props.theme.colors.accent.warning}`;\n      case \"danger\":\n        return `1px solid ${props.theme.colors.accent.danger}`;\n      case \"secondary\":\n        return `1px solid ${props.theme.colors.accent.secondary}`;\n      case \"primary\":\n      default:\n        return `1px solid ${props.theme.colors.accent.secondary}`;\n    }\n  }};\n\n  font-size: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return props.theme.size.small;\n      case \"large\":\n        return props.theme.size.medium;\n      case \"normal\":\n      default:\n        return props.theme.size.normal;\n    }\n  }};\n\n  &:hover {\n    ${(props) =>\n      props.hover?.background && `background: ${props.hover.background}`};\n    ${(props) => props.hover?.color && `color: ${props.hover.background}`};\n\n    background: ${(props) => {\n      if (props.variant === \"ghost\") {\n        switch (props.type) {\n          case \"light\":\n            return convertRGBToRGBA(props.theme.colors.layout.lightest, 0.25);\n          case \"dark\":\n            return convertRGBToRGBA(props.theme.colors.layout.light, 0.25);\n          case \"info\":\n            return convertRGBToRGBA(props.theme.colors.accent.info, 0.25);\n          case \"success\":\n            return convertRGBToRGBA(props.theme.colors.accent.success, 0.25);\n          case \"warning\":\n            return convertRGBToRGBA(props.theme.colors.accent.warning, 0.25);\n          case \"danger\":\n            return convertRGBToRGBA(props.theme.colors.accent.danger, 0.25);\n          case \"secondary\":\n            return convertRGBToRGBA(props.theme.colors.accent.secondary, 0.25);\n          case \"primary\":\n            return convertRGBToRGBA(props.theme.colors.accent.primary, 0.25);\n        }\n      }\n\n      return \"\";\n    }};\n\n    border: ${(props) => {\n      if (props.loading || props.disabled)\n        return `1px solid ${props.theme.colors.layout.dark}`;\n\n      if (props.variant === \"ghost\") {\n        return `1px solid ${convertRGBToRGBA(\n          props.theme.colors.accent.light,\n          0.25,\n        )}`;\n      }\n\n      switch (props.type) {\n        case \"dark\":\n          return `1px solid ${props.theme.colors.layout.light}`;\n        case \"light\":\n        case \"info\":\n        case \"success\":\n        case \"warning\":\n        case \"danger\":\n        case \"secondary\":\n          return `1px solid ${convertRGBToRGBA(\n            props.theme.colors.accent.light,\n            0.25,\n          )}`;\n        case \"primary\":\n        default:\n          return `1px solid ${props.theme.colors.accent.secondary}`;\n      }\n    }};\n\n    &:focus {\n      filter: brightness(\n        ${(props) => {\n          if (props.disabled || props.loading) return \"1\";\n          return \"0.8\";\n        }}\n      );\n    }\n  }\n`;\n\nexport const ButtonContent = styled.span<{ width?: string | number }>`\n  font-weight: ${({ theme }) => theme.weight.semiBold};\n  font-size: inherit;\n  font-family: inherit;\n  color: inherit;\n\n  ${({ width }) =>\n    width &&\n    \"text-overflow: ellipsis; overflow: hidden;  white-space: nowrap;\"};\n`;\n\nexport const ButtonPrefix = styled.span<{ hasContent: boolean }>`\n  font-size: inherit;\n  color: inherit;\n  ${({ hasContent }) => hasContent && \"margin-right: 7px;\"}\n`;\nexport const ButtonSuffix = styled.span`\n  font-size: inherit;\n  margin-left: 7px;\n  color: inherit;\n`;\n\nButtonComponent.displayName = \"KitchnButton\";\nexport const Button = withDecorator(ButtonComponent);\nexport default Button;\n","import React from \"react\";\n\nexport const useClickAnyWhere = (handler: (event: Event) => void) => {\n  React.useEffect(() => {\n    const callback = (event: Event) => handler(event);\n\n    document.addEventListener(\"click\", callback);\n    return () => document.removeEventListener(\"click\", callback);\n  }, [handler]);\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { Gap } from \"../../types/theme\";\n\ntype Direction = \"row\" | \"column\";\n\ntype Props = {\n  row?: boolean;\n  flex?: number | string;\n  direction?: [Direction, Direction, Direction];\n  gap?: keyof Gap | number;\n  align?: \"center\" | \"flex-start\" | \"flex-end\" | \"stretch\" | \"baseline\";\n  justify?:\n    | \"center\"\n    | \"flex-start\"\n    | \"flex-end\"\n    | \"space-between\"\n    | \"space-around\"\n    | \"space-evenly\"\n    | \"stretch\";\n  header?: boolean;\n  section?: boolean;\n  form?: boolean;\n  label?: boolean;\n  footer?: boolean;\n  nav?: boolean;\n  aside?: boolean;\n  main?: boolean;\n  wrap?: \"nowrap\" | \"wrap\" | \"wrap-reverse\" | \"inherit\" | \"initial\" | \"unset\";\n  transform?: string;\n};\n\nexport type ContainerProps = Props & React.ComponentPropsWithRef<\"div\">;\n\nconst ForwardedContainer = React.forwardRef<HTMLDivElement, ContainerProps>(\n  (\n    {\n      children,\n      header,\n      section,\n      form,\n      label,\n      footer,\n      nav,\n      aside,\n      main,\n      // This prevents 'row' and 'gap' from being passed to the DOM element, avoiding React warnings\n      row: _row,\n      gap: _gap,\n      ...rest\n    }: ContainerProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => {\n    const Component = header\n      ? \"header\"\n      : section\n        ? \"section\"\n        : form\n          ? \"form\"\n          : label\n            ? \"label\"\n            : footer\n              ? \"footer\"\n              : nav\n                ? \"nav\"\n                : aside\n                  ? \"aside\"\n                  : main\n                    ? \"main\"\n                    : \"div\";\n    return (\n      <Component\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        ref={ref}\n        role={header ? \"banner\" : section ? \"region\" : undefined}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nForwardedContainer.displayName = \"Container\";\n\nconst ContainerComponent = styled(ForwardedContainer)<ContainerProps>`\n  display: flex;\n  flex-direction: ${(props) =>\n    (props.direction && props.direction[props.direction.length - 1]) ||\n    (props.row ? \"row\" : \"column\")};\n  ${(props) => props.flex && `flex: ${props.flex};`}\n  justify-content: ${(props) => props.justify || \"flex-start\"};\n  align-items: ${(props) => props.align || \"stretch\"};\n  ${(props) => props.wrap && `flex-wrap: ${props.wrap};`}\n  ${(props) => props.transform && `transform: ${props.transform};`}\n\n  ${(props) =>\n    props.gap &&\n    `gap: ${props.theme.gap[props.gap as keyof Gap] || `${props.gap}px`};`}\n  @media (max-width: ${(props) => props.theme.breakpoint.laptop}) {\n    ${(props) =>\n      props.direction &&\n      props.direction[2] &&\n      `flex-direction: ${props.direction[2]};`}\n  }\n\n  @media (max-width: ${(props) => props.theme.breakpoint.tablet}) {\n    ${(props) =>\n      props.direction &&\n      props.direction[1] &&\n      `flex-direction: ${props.direction[1]};`}\n  }\n\n  @media (max-width: ${(props) => props.theme.breakpoint.mobile}) {\n    ${(props) =>\n      props.direction &&\n      props.direction[0] &&\n      `flex-direction: ${props.direction[0]};`}\n  }\n`;\n\nContainerComponent.displayName = \"KitchnContainer\";\nexport const Container = withDecorator(ContainerComponent);\nexport default Container;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\n\ntype Props = {\n  htmlWidth?: string | number;\n  htmlHeight?: string | number;\n  src: string;\n  alt: string;\n  objectFit?:\n    | \"cover\"\n    | \"contain\"\n    | \"fill\"\n    | \"scale-down\"\n    | \"inherit\"\n    | \"initial\"\n    | \"unset\"\n    | \"none\";\n};\n\nexport type ImageProps = KitchnComponent<\n  Props,\n  React.ImgHTMLAttributes<HTMLImageElement>\n>;\n\nconst ImageComponent = styled(\n  ({\n    src,\n    alt,\n    htmlWidth,\n    htmlHeight,\n    width: _width,\n    height: _height,\n    ...props\n  }: ImageProps) => {\n    return (\n      <img\n        src={src}\n        alt={alt}\n        width={htmlWidth}\n        height={htmlHeight}\n        draggable={false}\n        {...props}\n      />\n    );\n  },\n)<ImageProps>`\n  ${({ objectFit }) => objectFit && `object-fit: ${objectFit};`}\n`;\n\nImageComponent.displayName = \"KitchnImage\";\nexport const Image = withDecorator(ImageComponent);\nexport default Image;\n","import React from \"react\";\nimport styled, { useTheme } from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { AccentColors, Size, TextColors } from \"../../types/theme\";\nimport Image from \"../Image\";\n\ntype IconSource =\n  | {\n      icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n      src?: string;\n    }\n  | {\n      icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n      src: string;\n      alt?: string;\n    };\n\ntype Props = IconSource & {\n  size?: keyof Size | number | string;\n  /**\n   * The text color. Strictly limited to colors of our design system. If you want to pass accent color make sure to pass `accent` instead of `color`.\n   */\n  color?: keyof TextColors | string;\n  /**\n   * The accent color. Strictly limited to colors of our design system, but can be used in combination with `color` prop.\n   */\n  accent?: keyof AccentColors;\n  align?: \"top\" | \"middle\" | \"bottom\";\n  clickable?: boolean;\n};\n\nexport type IconProps = KitchnComponent<Props, React.SVGProps<SVGSVGElement>>;\n\nconst IconComponent = styled(\n  ({\n    size,\n    src,\n    icon: IconComponent,\n    clickable: _clickable,\n    ...rest\n  }: IconProps) => {\n    const theme = useTheme();\n\n    if (src) {\n      return (\n        <Image\n          src={src}\n          height={theme.size[size as keyof Size] || size || theme.size.normal}\n          width={theme.size[size as keyof Size] || size || theme.size.normal}\n          {...rest}\n        />\n      );\n    }\n\n    if (IconComponent) {\n      return (\n        <IconComponent\n          role={\"img\"}\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          size={theme.size[size as keyof Size] || size || theme.size.normal}\n          height={theme.size[size as keyof Size] || size || theme.size.normal}\n          width={theme.size[size as keyof Size] || size || theme.size.normal}\n          {...rest}\n        />\n      );\n    }\n\n    return null;\n  },\n)<IconProps>`\n  user-select: none;\n  color: ${(props) =>\n    props.theme.colors.accent[props.accent as keyof AccentColors] ||\n    props.theme.colors.text[props.color as keyof TextColors] ||\n    props.color ||\n    props.theme.colors.text.lightest};\n  vertical-align: ${({ align }) => {\n    switch (align) {\n      case \"top\":\n        return \"text-top\";\n      case \"middle\":\n        return \"middle\";\n      case \"bottom\":\n        return \"text-bottom\";\n      default:\n        return \"middle\";\n    }\n  }};\n  cursor: ${({ clickable }) => (clickable ? \"pointer\" : \"default\")};\n  pointer-events: ${({ clickable }) => (clickable ? \"auto\" : \"none\")};\n`;\n\nIconComponent.displayName = \"KitchnIcon\";\nexport const Icon = withDecorator(IconComponent);\nexport default Icon;\n","import React from \"react\";\nimport { RiErrorWarningLine, RiExternalLinkLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\nimport Icon from \"../Icon\";\nimport Text from \"../Text\";\n\ntype Props = {\n  /**\n   * The label of the error.\n   * @default true\n   */\n  label?: boolean | string;\n\n  /**\n   * The size of the error.\n   * @default \"normal\"\n   */\n  size?: NormalSizes;\n\n  error?: { message: string; action?: string; link?: string };\n};\n\nexport type ErrorProps = KitchnComponent<Props>;\n\nconst ErrorComponent = styled(\n  ({ label = true, size, error, children, ...props }: ErrorProps) => {\n    return (\n      <div role={\"alert\"} aria-live={\"assertive\"} {...props}>\n        <ErrorIconContainer>\n          <Icon\n            icon={RiErrorWarningLine}\n            accent={\"danger\"}\n            size={size === \"small\" ? 15 : size === \"large\" ? 20 : 18}\n            align={\"bottom\"}\n          />\n        </ErrorIconContainer>\n        <ErrorTextContainer>\n          <ErrorText size={size} accent={\"danger\"}>\n            {label && (\n              <ErrorLabel>\n                {typeof label === \"string\" ? label : \"Error\"}\n                {label ? \": \" : \"\"}\n              </ErrorLabel>\n            )}\n            <ErrorContent>{error ? error.message : children}</ErrorContent>\n            {error && (\n              <ErrorAction\n                href={error.link}\n                target={\"_blank\"}\n                rel={\"noopener noreferrer\"}\n              >\n                {error.action}\n                <ErrorActionIcon\n                  accent={\"danger\"}\n                  icon={RiExternalLinkLine}\n                  size={size}\n                />\n              </ErrorAction>\n            )}\n          </ErrorText>\n        </ErrorTextContainer>\n      </div>\n    );\n  },\n)<ErrorProps>`\n  display: flex;\n  line-height: 1;\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n`;\n\nexport const ErrorIconContainer = styled.div``;\n\nexport const ErrorTextContainer = styled.div`\n  margin-left: 8px;\n`;\n\nexport const ErrorText = styled(Text)<{ size: ErrorProps[\"size\"] }>`\n  font-size: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return props.theme.size.tiny;\n      case \"large\":\n        return props.theme.size.normal;\n      case \"normal\":\n      default:\n        return props.theme.size.small;\n    }\n  }};\n  word-break: break-word;\n`;\n\nexport const ErrorLabel = styled.b`\n  font-size: inherit;\n  font-weight: ${({ theme }) => theme.weight.semiBold};\n  color: ${({ theme }) => theme.colors.accent.danger};\n`;\n\nexport const ErrorContent = styled.span`\n  font-size: inherit;\n  font-family: inherit;\n  color: ${({ theme }) => theme.colors.accent.danger};\n`;\n\nexport const ErrorAction = styled.a`\n  display: inline-flex;\n  font-size: inherit;\n  color: inherit;\n  margin-left: ${({ theme }) => theme.gap.tiny};\n  background-image: linear-gradient(currentColor, currentColor);\n  background-size: 100% 1px;\n  background-position: 0 100%;\n  background-repeat: no-repeat;\n`;\n\nexport const ErrorActionIcon = styled(Icon)`\n  margin-left: ${({ theme }) => theme.gap.tiny};\n`;\n\nErrorComponent.displayName = \"KitchnError\";\nexport const Error = withDecorator(ErrorComponent);\nexport default Error;\n","import React, { forwardRef, useImperativeHandle } from \"react\";\nimport { RiCloseLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\nimport { AccentColors } from \"../../types/theme\";\nimport { convertRGBToRGBA } from \"../../utils/convertRGBToRGBA\";\nimport { isNumber } from \"../../utils/isNumber\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Error from \"../Error\";\nimport Icon, { IconProps } from \"../Icon\";\nimport Text, { TextProps } from \"../Text\";\n\nconst simulateChangeEvent = (\n  el: HTMLInputElement,\n  event: React.MouseEvent<SVGElement>,\n): React.ChangeEvent<HTMLInputElement> => {\n  return {\n    ...event,\n    target: el,\n    currentTarget: el,\n  };\n};\n\ntype Props = {\n  placeholder?: string;\n  size?: NormalSizes;\n  prefix?: JSX.Element | string;\n  suffix?: JSX.Element | string;\n  prefixIcon?: IconProps[\"icon\"];\n  suffixIcon?: IconProps[\"icon\"];\n  onIconClick?: (_event: React.MouseEvent<SVGSVGElement>) => void;\n  clickableIcon?: boolean;\n  initialValue?: string;\n  value?: string;\n  disabled?: boolean;\n  prefixStyling?: boolean;\n  suffixStyling?: boolean;\n  prefixContainer?: boolean;\n  suffixContainer?: boolean;\n  clearable?: boolean;\n  width?: number | string;\n  w?: Props[\"width\"];\n  error?: string;\n  readOnly?: boolean;\n  onClearClick?: (_event: React.MouseEvent<SVGElement>) => void;\n  type?: keyof AccentColors;\n  label?: string;\n  htmlType?: React.InputHTMLAttributes<HTMLInputElement>[\"type\"];\n};\n\nexport type InputProps = KitchnComponent<\n  Props,\n  React.InputHTMLAttributes<HTMLInputElement>\n>;\n\nconst ForwardedInput = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      size = \"normal\",\n      prefix,\n      suffix,\n      // prefixIcon,\n      suffixIcon,\n      onIconClick,\n      clickableIcon,\n      disabled = false,\n      prefixContainer = true,\n      suffixContainer = true,\n      prefixStyling = true,\n      suffixStyling = true,\n      clearable = false,\n      value,\n      initialValue = \"\",\n      readOnly = false,\n      onChange,\n      width,\n      w,\n      onClearClick,\n      onFocus,\n      onBlur,\n      error,\n      type,\n      label,\n      htmlType,\n      ...props\n    }: InputProps,\n    ref: React.Ref<HTMLInputElement>,\n  ) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [selfValue, setSelfValue] = React.useState<string>(initialValue);\n    const [focus, setFocus] = React.useState<boolean>(false);\n    const [clearIconHover, setClearIconHover] = React.useState<boolean>(false);\n    const isControlledComponent = React.useMemo(\n      () => value !== undefined,\n      [value],\n    );\n\n    useImperativeHandle(ref, () => inputRef.current as HTMLInputElement);\n\n    const Wrapper = label ? InputWrapper : React.Fragment;\n\n    const controlledValue = isControlledComponent\n      ? { value: selfValue }\n      : { defaultValue: initialValue };\n\n    const inputProps = {\n      ...props,\n      ...controlledValue,\n    };\n\n    const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n      if (disabled || readOnly) return;\n      setFocus(true);\n      onFocus && onFocus(event);\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled || readOnly) return;\n      setSelfValue(event.target.value);\n      onChange && onChange(event);\n    };\n\n    const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n      if (disabled || readOnly) return;\n      setFocus(false);\n      onBlur && onBlur(event);\n    };\n\n    const handleClearIconEnter = () => {\n      if (disabled || readOnly) return;\n      setClearIconHover(true);\n    };\n\n    const handleClearIconLeave = () => {\n      if (disabled || readOnly) return;\n      setClearIconHover(false);\n    };\n\n    const handleClear = (event: React.MouseEvent<SVGElement>) => {\n      if (disabled || readOnly) return;\n      setSelfValue(\"\");\n      onClearClick && onClearClick(event);\n      /* istanbul ignore next */\n      if (!inputRef.current) return;\n\n      const changeEvent = simulateChangeEvent(inputRef.current, event);\n      changeEvent.target.value = \"\";\n      onChange && onChange(changeEvent);\n      inputRef.current.focus();\n    };\n\n    const iconClickHandler = (e: React.MouseEvent<SVGSVGElement>) => {\n      if (disabled) return;\n      onIconClick && onIconClick(e);\n    };\n\n    const iconProps = React.useMemo(\n      () => ({\n        clickable: clickableIcon,\n        onClick: iconClickHandler,\n      }),\n      [clickableIcon, iconClickHandler],\n    );\n\n    React.useEffect(() => {\n      if (isControlledComponent) {\n        setSelfValue(value as string);\n      }\n    }, [isControlledComponent, value]);\n\n    return (\n      <Wrapper>\n        {label && <InputLabel>{label}</InputLabel>}\n        <InputContainer disabled={disabled} width={width || w} size={size}>\n          {prefix && prefixContainer && (\n            <InputPrefix\n              size={size}\n              disabled={disabled}\n              prefixStyling={prefixStyling}\n              focus={focus}\n              error={error}\n              type={type}\n            >\n              {prefix}\n            </InputPrefix>\n          )}\n          <InputField\n            ref={inputRef}\n            size={size}\n            prefix={prefix}\n            suffix={suffix}\n            prefixContainer={prefixContainer}\n            suffixContainer={suffixContainer}\n            suffixIcon={suffixIcon}\n            prefixStyling={prefixStyling}\n            suffixStyling={suffixStyling}\n            disabled={disabled}\n            clearable={clearable}\n            value={value}\n            onChange={handleChange}\n            error={error}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            focus={focus}\n            $type={type}\n            type={htmlType}\n            {...inputProps}\n          />\n          {clearable && value !== undefined && (\n            <InputClear\n              size={size}\n              disabled={disabled}\n              suffix={suffix}\n              suffixContainer={suffixContainer}\n              suffixStyling={suffixStyling}\n              error={error}\n              focus={focus}\n              type={type}\n              visible={Boolean(\n                inputRef.current && inputRef.current.value !== \"\",\n              )}\n              lastItem={!suffixIcon}\n            >\n              <Icon\n                icon={RiCloseLine}\n                onMouseEnter={handleClearIconEnter}\n                onMouseLeave={handleClearIconLeave}\n                onClick={handleClear}\n                color={\n                  clearIconHover && !disabled && !readOnly\n                    ? \"lightest\"\n                    : \"light\"\n                }\n                size={size === \"small\" ? 16 : size === \"large\" ? 24 : 20}\n              />\n            </InputClear>\n          )}\n          {suffixIcon && (\n            <InputSuffixPart\n              size={size}\n              disabled={disabled}\n              suffix={suffix}\n              suffixContainer={suffixContainer}\n              suffixStyling={suffixStyling}\n              error={error}\n              focus={focus}\n              type={type}\n              lastItem\n            >\n              <Icon\n                icon={suffixIcon}\n                color={!disabled && !readOnly ? \"lightest\" : \"light\"}\n                size={size === \"small\" ? 16 : size === \"large\" ? 24 : 20}\n                {...iconProps}\n              />\n            </InputSuffixPart>\n          )}\n          {suffix && suffixContainer && (\n            <InputSuffix\n              size={size}\n              disabled={disabled}\n              suffixStyling={suffixStyling}\n              focus={focus}\n              error={error}\n              type={type}\n            >\n              {suffix}\n            </InputSuffix>\n          )}\n        </InputContainer>\n        {error && (\n          <InputError size={size} width={width || w}>\n            {error}\n          </InputError>\n        )}\n      </Wrapper>\n    );\n  },\n);\n\nForwardedInput.displayName = \"Input\";\n\nconst InputWrapper = styled((props: ContainerProps) => (\n  <Container label {...props} />\n))``;\n\nconst InputComponent = styled(ForwardedInput)`\n  font: inherit;\n  width: 100%;\n  min-width: 0;\n  display: inline-flex;\n  appearance: none;\n  line-height: normal;\n  outline: none;\n  transition: border-color 0.2s ease-in-out;\n  -webkit-tap-highlight-color: transparent;\n  border-radius: ${({ theme }) => theme.radius.square};\n  color: ${({ theme, error, type }) =>\n    error\n      ? theme.colors.accent.danger\n      : type\n        ? theme.colors.accent[type]\n        : theme.colors.text.lightest};\n  background-color: ${({ theme, disabled }) =>\n    disabled ? theme.colors.layout.darker : theme.colors.layout.darkest};\n  ${({ disabled }) => disabled && \"cursor: not-allowed;\"}\n\n  ::placeholder {\n    color: ${({ theme, error, type }) =>\n      error\n        ? convertRGBToRGBA(theme.colors.accent.danger, 0.5)\n        : type\n          ? convertRGBToRGBA(theme.colors.accent[type], 0.5)\n          : theme.colors.text.light};\n    font-weight: ${({ theme }) => theme.weight.semiBold};\n  }\n`;\n\nexport const InputContainer = styled.div<{\n  disabled: InputProps[\"disabled\"];\n  width: InputProps[\"width\"];\n  size: InputProps[\"size\"];\n}>`\n  display: flex;\n  align-items: center;\n  width: ${({ width }) =>\n    width ? (isNumber(width) ? `${width}px` : width) : \"100%\"};\n  max-width: 100%;\n  font-size: ${({ size, theme }) => {\n    switch (size) {\n      case \"small\":\n        return theme.size.compact;\n      case \"large\":\n        return theme.size.normal;\n      case \"normal\":\n      default:\n        return theme.size.small;\n    }\n  }};\n  border-radius: ${({ theme }) => theme.radius.square};\n  ${({ disabled }) => disabled && \"cursor: not-allowed;\"}\n`;\n\nexport const InputField = styled.input<\n  InputProps & {\n    $type: InputProps[\"type\"];\n    focus: boolean;\n  }\n>`\n  padding: 0 ${({ theme }) => theme.gap.small};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n  font-size: inherit;\n\n  border: 1px solid\n    ${({ theme, error, focus, $type }) =>\n      error\n        ? theme.colors.accent.danger\n        : $type\n          ? theme.colors.accent[$type]\n          : focus\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n\n  ${({ prefix, prefixContainer }) =>\n    prefix &&\n    prefixContainer &&\n    `\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `}\n  ${({ suffix, suffixContainer, suffixIcon, clearable, value }) =>\n    ((suffix && suffixContainer) ||\n      suffixIcon ||\n      (clearable && value !== undefined)) &&\n    `\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `}\n  ${({ prefix, prefixContainer, prefixStyling }) =>\n    prefix && prefixContainer && !prefixStyling && \"border-left: none;\"}\n  ${({\n    suffix,\n    suffixContainer,\n    suffixIcon,\n    suffixStyling,\n    clearable,\n    value,\n  }) =>\n    ((suffix && suffixContainer && !suffixStyling) ||\n      suffixIcon ||\n      (clearable && value !== undefined)) &&\n    \"border-right: none;\"}\n`;\n\nexport const InputPrefix = styled.span<{\n  size: InputProps[\"size\"];\n  disabled: InputProps[\"disabled\"];\n  prefixStyling: InputProps[\"prefixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n}>`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  color: ${({ theme }) => theme.colors.text.light};\n  border: 1px solid\n    ${({ theme, error, focus, prefixStyling, type }) =>\n      error && !prefixStyling\n        ? theme.colors.accent.danger\n        : type && !prefixStyling\n          ? theme.colors.accent[type]\n          : focus && !prefixStyling\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-right: none;\n  font-size: inherit;\n  transition: border-color 0.2s ease-in-out;\n  border-radius: ${({ theme }) => theme.radius.square} 0 0\n    ${({ theme }) => theme.radius.square};\n  padding: 0 ${({ theme }) => theme.gap.small};\n  background-color: ${({ theme, prefixStyling, disabled }) =>\n    prefixStyling || disabled\n      ? theme.colors.layout.darker\n      : theme.colors.layout.darkest};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n\n  svg {\n    width: ${({ size }) =>\n      size === \"small\" ? 16 : size === \"large\" ? 24 : 20}px;\n    height: ${({ size }) =>\n      size === \"small\" ? 16 : size === \"large\" ? 24 : 20}px;\n  }\n`;\n\nexport const InputSuffix = styled.span<{\n  size: InputProps[\"size\"];\n  disabled: InputProps[\"disabled\"];\n  suffixStyling: InputProps[\"suffixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n}>`\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  color: ${({ theme }) => theme.colors.text.light};\n  border: 1px solid\n    ${({ theme, error, focus, suffixStyling, type }) =>\n      error && !suffixStyling\n        ? theme.colors.accent.danger\n        : type && !suffixStyling\n          ? theme.colors.accent[type]\n          : focus && !suffixStyling\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-left: none;\n  font-size: inherit;\n  transition: border-color 0.2s ease-in-out;\n  border-radius: 0 ${({ theme }) => theme.radius.square}\n    ${({ theme }) => theme.radius.square} 0;\n  padding: 0 ${({ theme }) => theme.gap.small};\n  background-color: ${({ theme, suffixStyling, disabled }) =>\n    suffixStyling || disabled\n      ? theme.colors.layout.darker\n      : theme.colors.layout.darkest};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n\n  svg {\n    width: ${({ size }) =>\n      size === \"small\" ? 16 : size === \"large\" ? 24 : 20}px;\n    height: ${({ size }) =>\n      size === \"small\" ? 16 : size === \"large\" ? 24 : 20}px;\n  }\n`;\n\nexport const InputSuffixPart = styled.span<{\n  disabled: InputProps[\"disabled\"];\n  size: InputProps[\"size\"];\n  suffix: InputProps[\"suffix\"];\n  suffixContainer: InputProps[\"suffixContainer\"];\n  suffixStyling: InputProps[\"suffixStyling\"];\n  error: InputProps[\"error\"];\n  focus: boolean;\n  type: InputProps[\"type\"];\n  lastItem?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  transition: border-color 0.2s ease-in-out;\n  color: ${({ theme }) => theme.colors.text.light};\n  border: 1px solid\n    ${({ theme, error, focus, type }) =>\n      error\n        ? theme.colors.accent.danger\n        : type\n          ? theme.colors.accent[type]\n          : focus\n            ? theme.colors.layout.lighter\n            : theme.colors.layout.dark};\n  border-left: none;\n  padding-right: ${({ theme, lastItem }) =>\n    lastItem ? theme.gap.small : theme.gap.tiny};\n  ${({ theme, disabled }) =>\n    disabled && `background-color: ${theme.colors.layout.darker};`};\n  ${({ theme, suffix, suffixContainer }) =>\n    suffix && suffixContainer\n      ? `\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `\n      : `\n    border-radius: 0 ${theme.radius.square}\n    ${theme.radius.square} 0;\n  `}\n  ${({ suffix, suffixContainer, suffixStyling, lastItem }) =>\n    ((suffix && suffixContainer && !suffixStyling) || !lastItem) &&\n    \"border-right: none;\"}\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n\n  ${Icon} {\n    cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  }\n`;\n\nexport const InputClear = styled(InputSuffixPart)<{\n  visible: boolean;\n}>`\n  ${Icon} {\n    transition:\n      color,\n      opacity 0.2s ease-in-out;\n    opacity: ${({ visible }) => (visible ? 1 : 0)};\n    pointer-events: ${({ visible }) => (visible ? \"auto\" : \"none\")};\n  }\n`;\n\nexport const InputError = styled(Error)<{\n  width: InputProps[\"width\"];\n}>`\n  margin-top: ${({ theme }) => theme.gap.tiny};\n  width: ${({ width }) =>\n    width ? (isNumber(width) ? `${width}px` : width) : \"auto\"};\n`;\n\nexport const InputLabel = styled((props: TextProps) => (\n  <Text\n    size={\"compact\"}\n    weight={\"medium\"}\n    mb={\"tiny\"}\n    color={\"light\"}\n    span\n    {...props}\n  />\n))``;\n\nInputComponent.displayName = \"KitchnInput\";\nexport const Input = withDecorator(InputComponent);\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { UrlObject } from \"url\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { isString } from \"../../utils/isString\";\n\ntype Props = {\n  /**\n   * The link's href.\n   */\n  href?: string | UrlObject;\n\n  /**\n   * The link's classname.\n   */\n  className?: string;\n\n  /**\n   * The link's onClick.\n   */\n  onClick?: (_event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n\n  /**\n   * The link's status (if it's disabled or not).\n   */\n  disabled?: boolean;\n\n  /**\n   * The link's variant.\n   */\n  variant?: \"highlight\" | \"primary\" | \"secondary\" | \"blend\";\n};\n\nexport type LinkProps = KitchnComponent<\n  Props,\n  React.AnchorHTMLAttributes<HTMLAnchorElement>\n>;\n\nconst LinkComponent = styled(\n  ({\n    as: Component = \"a\",\n    href,\n    className,\n    disabled,\n    onClick,\n    variant,\n    children,\n    ...props\n  }: LinkProps) => {\n    const [NextLink, setNextLink] = React.useState<any>(null);\n\n    React.useEffect(() => {\n      const fetchNextLink = async () => {\n        try {\n          const { default: NextLinkModule } = await import(\"next/link\");\n          setNextLink(NextLinkModule);\n        } catch (_err) {\n          // ignore\n        }\n      };\n\n      fetchNextLink();\n    }, []);\n    disabled = disabled || (!onClick && !href);\n\n    const handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n      if (disabled) return event.preventDefault();\n      if (onClick) onClick(event);\n    };\n\n    if (isString(href)) {\n      const internal = (href as string).match(/^(\\/(?!\\/)[^#]*|#.*)$/);\n      if (!internal) {\n        return (\n          <Component\n            aria-disabled={disabled}\n            href={href}\n            className={className}\n            target={\"_blank\"}\n            rel={\"noopener noreferrer\"}\n            onClick={handleClick}\n            {...props}\n          >\n            {children}\n          </Component>\n        );\n      }\n    }\n\n    if (href && NextLink) {\n      return (\n        <NextLink\n          aria-disabled={disabled}\n          href={href}\n          className={className}\n          onClick={handleClick}\n          {...props}\n        >\n          {children}\n        </NextLink>\n      );\n    }\n\n    return (\n      <Component\n        aria-disabled={disabled}\n        className={className}\n        onClick={handleClick}\n        href={href}\n        variant={variant}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  },\n)<LinkProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  font-weight: ${({ theme, variant }) =>\n    variant === \"blend\" && theme.weight.medium};\n  text-decoration: none;\n  transition:\n    opacity 0.2s ease-in-out,\n    filter 0.2s ease-in-out;\n  line-height: 1.25;\n  ${({ variant }) =>\n    variant === \"blend\" &&\n    `\n  background-image: linear-gradient(currentColor, currentColor);\n  background-size: 100% 1px;\n  background-position: 0 100%;\n  background-repeat: no-repeat;`};\n\n  color: ${({ theme, variant }) => {\n    if (variant === \"highlight\") {\n      return theme.colors.accent.primary;\n    } else if (variant === \"blend\") {\n      return \"inherit\";\n    } else if (variant === \"secondary\") {\n      return theme.colors.text.lighter;\n    } else {\n      return \"inherit\";\n    }\n  }};\n\n  &:hover {\n    ${({ theme, disabled, variant, onClick, href }) => {\n      disabled = disabled || (!onClick && !href);\n\n      return `\n      cursor: ${disabled ? \"default\" : \"pointer\"};\n      filter: ${\n        (variant && variant !== \"blend\") || disabled\n          ? \"none\"\n          : \"brightness(0.8)\"\n      };\n      ${\n        variant === \"secondary\"\n          ? `\n  background-image: linear-gradient(currentColor, currentColor);\n  background-size: 100% 1px;\n  background-position: 0 100%;\n  background-repeat: no-repeat;\n  color: ${theme.colors.text.lightest};`\n          : \"\"\n      };\n    `;\n    }}\n  }\n`;\n\nLinkComponent.displayName = \"KitchnLink\";\nexport const Link = withDecorator(LinkComponent);\nexport default Link;\n","export type TooltipPosition = {\n  top: string;\n  left: string;\n  transform: string;\n};\n\nexport const defaultTooltipPosition = {\n  top: \"-1000px\",\n  left: \"-1000px\",\n  transform: \"none\",\n};\n\nexport type Placement =\n  | \"top\"\n  | \"topStart\"\n  | \"topEnd\"\n  | \"left\"\n  | \"leftStart\"\n  | \"leftEnd\"\n  | \"bottom\"\n  | \"bottomStart\"\n  | \"bottomEnd\"\n  | \"right\"\n  | \"rightStart\"\n  | \"rightEnd\";\n\nexport type TooltipReactiveDomReact = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  width: number;\n  height: number;\n};\n\nconst defaultRect: TooltipReactiveDomReact = {\n  top: -1000,\n  left: -1000,\n  right: -1000,\n  bottom: -1000,\n  width: 0,\n  height: 0,\n};\n\nexport const getTooltipRect = (\n  ref: React.MutableRefObject<HTMLElement | null>,\n): TooltipReactiveDomReact => {\n  if (!ref || !ref.current) return defaultRect;\n  const rect = ref.current.getBoundingClientRect();\n  return {\n    ...rect,\n    width: rect.width || rect.right - rect.left,\n    height: rect.height || rect.bottom - rect.top,\n    top: rect.top + document.documentElement.scrollTop,\n    bottom: rect.bottom + document.documentElement.scrollTop,\n    left: rect.left + document.documentElement.scrollLeft,\n    right: rect.right + document.documentElement.scrollLeft,\n  };\n};\n\nexport const getPosition = (\n  placement: Placement,\n  rect: TooltipReactiveDomReact,\n  offset: number,\n): TooltipPosition => {\n  const positions: { [key in Placement]: TooltipPosition } = {\n    top: {\n      top: `${rect.top - offset}px`,\n      left: `${rect.left + rect.width / 2}px`,\n      transform: \"translate(-50%, -100%)\",\n    },\n    topStart: {\n      top: `${rect.top - offset}px`,\n      left: `${rect.left}px`,\n      transform: \"translate(0, -100%)\",\n    },\n    topEnd: {\n      top: `${rect.top - offset}px`,\n      left: `${rect.left + rect.width}px`,\n      transform: \"translate(-100%, -100%)\",\n    },\n    bottom: {\n      top: `${rect.bottom + offset}px`,\n      left: `${rect.left + rect.width / 2}px`,\n      transform: \"translate(-50%, 0)\",\n    },\n    bottomStart: {\n      top: `${rect.bottom + offset}px`,\n      left: `${rect.left}px`,\n      transform: \"translate(0, 0)\",\n    },\n    bottomEnd: {\n      top: `${rect.bottom + offset}px`,\n      left: `${rect.left + rect.width}px`,\n      transform: \"translate(-100%, 0)\",\n    },\n    left: {\n      top: `${rect.top + rect.height / 2}px`,\n      left: `${rect.left - offset}px`,\n      transform: \"translate(-100%, -50%)\",\n    },\n    leftStart: {\n      top: `${rect.top}px`,\n      left: `${rect.left - offset}px`,\n      transform: \"translate(-100%, 0)\",\n    },\n    leftEnd: {\n      top: `${rect.top + rect.height}px`,\n      left: `${rect.left - offset}px`,\n      transform: \"translate(-100%, -100%)\",\n    },\n    right: {\n      top: `${rect.top + rect.height / 2}px`,\n      left: `${rect.right + offset}px`,\n      transform: \"translate(0, -50%)\",\n    },\n    rightStart: {\n      top: `${rect.top}px`,\n      left: `${rect.right + offset}px`,\n      transform: \"translate(0, 0)\",\n    },\n    rightEnd: {\n      top: `${rect.top + rect.height}px`,\n      left: `${rect.right + offset}px`,\n      transform: \"translate(0, -100%)\",\n    },\n  };\n  return positions[placement] || (positions.top as TooltipPosition);\n};\n\nexport interface TooltipIconPosition {\n  top: string;\n  left: string;\n  right: string;\n  bottom: string;\n  transform: string;\n}\n\nexport const getIconPosition = (\n  placement: Placement,\n  offsetX: string,\n  offsetY: string,\n  offsetAbsolute: string = \"3px\",\n): TooltipIconPosition => {\n  const positions: { [key in Placement]?: TooltipIconPosition } = {\n    top: {\n      top: \"auto\",\n      right: \"auto\",\n      left: \"50%\",\n      bottom: `${offsetAbsolute}`,\n      transform: \"translate(-50%, 100%) rotate(-90deg)\",\n    },\n    topStart: {\n      top: \"auto\",\n      right: \"auto\",\n      left: `${offsetX}`,\n      bottom: `${offsetAbsolute}`,\n      transform: \"translate(0, 100%) rotate(-90deg)\",\n    },\n    topEnd: {\n      top: \"auto\",\n      right: `${offsetX}`,\n      left: \"auto\",\n      bottom: `${offsetAbsolute}`,\n      transform: \"translate(0, 100%) rotate(-90deg)\",\n    },\n    bottom: {\n      top: `${offsetAbsolute}`,\n      right: \"auto\",\n      left: \"50%\",\n      bottom: \"auto\",\n      transform: \"translate(-50%, -100%) rotate(90deg)\",\n    },\n    bottomStart: {\n      top: `${offsetAbsolute}`,\n      right: \"auto\",\n      left: `${offsetX}`,\n      bottom: \"auto\",\n      transform: \"translate(0, -100%) rotate(90deg)\",\n    },\n    bottomEnd: {\n      top: `${offsetAbsolute}`,\n      right: `${offsetX}`,\n      left: \"auto\",\n      bottom: \"auto\",\n      transform: \"translate(0, -100%) rotate(90deg)\",\n    },\n    left: {\n      top: \"50%\",\n      right: \"0\",\n      left: \"auto\",\n      bottom: \"auto\",\n      transform: \"translate(100%, -50%) rotate(180deg)\",\n    },\n    leftStart: {\n      top: `${offsetY}`,\n      right: \"0\",\n      left: \"auto\",\n      bottom: \"auto\",\n      transform: \"translate(100%, -50%) rotate(180deg)\",\n    },\n    leftEnd: {\n      top: \"auto\",\n      right: \"0\",\n      left: \"auto\",\n      bottom: `${offsetY}`,\n      transform: \"translate(100%, 50%) rotate(180deg)\",\n    },\n    right: {\n      top: \"50%\",\n      right: \"auto\",\n      left: \"0\",\n      bottom: \"auto\",\n      transform: \"translate(-100%, -50%) rotate(0deg)\",\n    },\n    rightStart: {\n      top: `${offsetY}`,\n      right: \"auto\",\n      left: \"0\",\n      bottom: \"auto\",\n      transform: \"translate(-100%, -50%) rotate(0deg)\",\n    },\n    rightEnd: {\n      top: \"auto\",\n      right: \"auto\",\n      left: \"0\",\n      bottom: `${offsetY}`,\n      transform: \"translate(-100%, 50%) rotate(0deg)\",\n    },\n  };\n\n  return positions[placement] || (positions.top as TooltipIconPosition);\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { TooltipTypes } from \"..\";\nimport { KitchnComponent } from \"../../../types\";\nimport {\n  Placement,\n  TooltipIconPosition,\n  convertRGBToRGBA,\n  getIconPosition,\n} from \"../../../utils\";\nimport { TooltipIconOffset } from \"../Content\";\n\ninterface Props {\n  placement: Placement;\n  iconOffset: TooltipIconOffset;\n  type: TooltipTypes;\n}\n\nexport type TooltipIconProps = KitchnComponent<Props>;\n\nconst TooltipIcon = styled(\n  ({ placement, iconOffset, type, ...props }: TooltipIconProps) => {\n    const { transform, top, left, right, bottom } = React.useMemo(\n      () => getIconPosition(placement, iconOffset.x, iconOffset.y),\n      [placement],\n    );\n\n    return (\n      <TooltipIconContainer\n        transform={transform}\n        top={top}\n        left={left}\n        right={right}\n        bottom={bottom}\n        type={type}\n        {...props}\n      />\n    );\n  },\n)`\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 6px 7px 6px 0;\n  position: absolute;\n  border-color: transparent\n    ${({ theme, type }) => {\n      switch (type) {\n        case \"danger\":\n          return convertRGBToRGBA(theme.colors.accent.danger, 0.5);\n        case \"warning\":\n          return convertRGBToRGBA(theme.colors.accent.warning, 0.5);\n        case \"info\":\n          return convertRGBToRGBA(theme.colors.accent.info, 0.5);\n        case \"success\":\n          return convertRGBToRGBA(theme.colors.accent.success, 0.5);\n        case \"secondary\":\n          return theme.colors.layout.lighter;\n        case \"primary\":\n        default:\n          return theme.colors.layout.dark;\n      }\n    }}\n    transparent transparent;\n`;\n\nconst TooltipIconContainer = styled.span<TooltipIconPosition>`\n  left: ${({ left }) => left};\n  right: ${({ right }) => right};\n  top: ${({ top }) => top};\n  bottom: ${({ bottom }) => bottom};\n  transform: ${({ transform }) => transform};\n`;\n\nexport default TooltipIcon;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled, { RuleSet } from \"styled-components\";\n\nimport { TooltipPlacement, TooltipTypes } from \"..\";\nimport { useClickAnyWhere, usePortal } from \"../../../hooks\";\nimport { useResize } from \"../../../hooks/useResize\";\nimport { KitchnComponent } from \"../../../types\";\nimport {\n  TooltipPosition,\n  defaultTooltipPosition,\n  getPosition,\n  getTooltipRect,\n} from \"../../../utils\";\nimport { convertRGBToRGBA } from \"../../../utils/convertRGBToRGBA\";\nimport TooltipIcon from \"../Icon\";\n\nexport type TooltipIconOffset = {\n  x: string;\n  y: string;\n};\n\ntype Props = {\n  parent?: React.MutableRefObject<HTMLElement | null> | undefined;\n  placement: TooltipPlacement;\n  type: TooltipTypes;\n  visible: boolean;\n  hideArrow: boolean;\n  offset: number;\n  iconOffset: TooltipIconOffset;\n  portalCss: RuleSet<object>;\n};\n\nexport type TooltipContainerProps = KitchnComponent<Props>;\n\nconst TooltipContent = styled(\n  ({\n    children,\n    parent,\n    visible,\n    offset,\n    iconOffset,\n    placement,\n    type,\n    hideArrow,\n    portalCss,\n    ...props\n  }: TooltipContainerProps) => {\n    const el = usePortal(\"tooltip\");\n    const selfRef = React.useRef<HTMLDivElement>(null);\n    const [rect, setRect] = React.useState<TooltipPosition>(\n      defaultTooltipPosition,\n    );\n\n    if (!parent) return null;\n\n    const updateRect = () => {\n      const position = getPosition(placement, getTooltipRect(parent), offset);\n      setRect(position);\n    };\n\n    useResize(updateRect);\n    useClickAnyWhere(() => updateRect());\n\n    React.useEffect(() => {\n      updateRect();\n    }, [visible]);\n\n    const preventHandler = (event: React.MouseEvent<HTMLDivElement>) => {\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n    };\n\n    if (!el) return null;\n\n    return createPortal(\n      <TooltipContentContainer\n        ref={selfRef}\n        onClick={preventHandler}\n        rect={rect}\n        visible={visible}\n        type={type}\n        portalCss={portalCss}\n        {...props}\n      >\n        <TooltipContentInner>\n          {!hideArrow && (\n            <TooltipIcon\n              placement={placement}\n              iconOffset={iconOffset}\n              type={type}\n            />\n          )}\n          {children}\n        </TooltipContentInner>\n      </TooltipContentContainer>,\n      el,\n    );\n  },\n)`\n  box-sizing: border-box;\n  position: absolute;\n  padding: 0;\n  z-index: 1000;\n  width: auto;\n  height: auto;\n  border-radius: ${({ theme }) => theme.radius.square};\n  background-color: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n        return theme.colors.accent.danger;\n      case \"warning\":\n        return theme.colors.accent.warning;\n      case \"info\":\n        return theme.colors.accent.info;\n      case \"success\":\n        return theme.colors.accent.success;\n      case \"secondary\":\n        return theme.colors.layout.light;\n      case \"primary\":\n      default:\n        return theme.colors.layout.darkest;\n    }\n  }};\n  border: 1px solid\n    ${({ theme, type }) => {\n      switch (type) {\n        case \"danger\":\n          return convertRGBToRGBA(theme.colors.accent.danger, 0.5);\n        case \"warning\":\n          return convertRGBToRGBA(theme.colors.accent.warning, 0.5);\n        case \"info\":\n          return convertRGBToRGBA(theme.colors.accent.info, 0.5);\n        case \"success\":\n          return convertRGBToRGBA(theme.colors.accent.success, 0.5);\n        case \"secondary\":\n          return theme.colors.layout.lighter;\n        case \"primary\":\n        default:\n          return theme.colors.layout.dark;\n      }\n    }};\n  ${({ portalCss }) => portalCss};\n`;\n\nexport const TooltipContentContainer = styled.div<{\n  rect: TooltipPosition;\n  hasShadow: boolean;\n  visible: boolean;\n  type: TooltipTypes;\n}>`\n  opacity: ${({ visible }) => (visible ? 1 : 0)};\n  pointer-events: ${({ visible }) => (visible ? \"auto\" : \"none\")};\n  top: ${({ rect }) => rect.top};\n  left: ${({ rect }) => rect.left};\n  transform: ${({ rect }) => rect.transform};\n`;\n\nexport const TooltipContentInner = styled.div`\n  box-sizing: border-box;\n  position: relative;\n  height: 100%;\n  padding: 0.5em 0.75em;\n`;\n\nexport default TooltipContent;\n","import React from \"react\";\nimport styled, { RuleSet, css } from \"styled-components\";\n\nimport TooltipContent, { TooltipIconOffset } from \"./Content\";\nimport { withDecorator } from \"../../hoc\";\nimport { useClickAway } from \"../../hooks\";\nimport { AccentColors, KitchnComponent, TriggerTypes } from \"../../types\";\nimport { Placement, getTooltipRect } from \"../../utils/tooltip\";\n\nexport type TooltipOnVisibleChange = (visible: boolean) => void;\nexport type TooltipOnContentClick = (\n  e: React.MouseEvent,\n  visible: boolean,\n  setVisible: (visible: boolean) => void,\n) => void;\nexport type TooltipTypes = keyof AccentColors;\nexport type TooltipPlacement = Placement;\nexport type TooltipTriggers = TriggerTypes;\n\ntype Props = {\n  text: React.ReactNode;\n  placement?: TooltipPlacement;\n  type?: TooltipTypes;\n  visible?: boolean;\n  initialVisible?: boolean;\n  hideArrow?: boolean;\n  trigger?: TooltipTriggers;\n  enterDelay?: number;\n  leaveDelay?: number;\n  offset?: number;\n  className?: string;\n  portalCss?: RuleSet<object>;\n  onVisibleChange?: TooltipOnVisibleChange;\n  onContentClick?: TooltipOnContentClick;\n};\n\nexport type TooltipProps = KitchnComponent<Props>;\n\nconst TooltipComponent = styled(\n  ({\n    children,\n    initialVisible = false,\n    text,\n    offset = 12,\n    placement = \"top\",\n    enterDelay = 150,\n    leaveDelay = 150,\n    trigger = \"hover\",\n    onVisibleChange = () => {},\n    onContentClick = () => {},\n    hideArrow = false,\n    type = \"primary\",\n    visible: customVisible,\n    portalCss = css``,\n    ...props\n  }: TooltipProps) => {\n    const timer = React.useRef<number>();\n    const ref = React.useRef<HTMLDivElement>(null);\n    const [visible, setVisible] = React.useState<boolean>(initialVisible);\n    const iconOffset = React.useMemo<TooltipIconOffset>(() => {\n      if (!ref?.current) return { x: \"0.75em\", y: \"0.75em\" };\n      const rect = getTooltipRect(ref);\n      return {\n        x: `${rect.width ? rect.width / 2 : 0}px`,\n        y: `${rect.height ? rect.height / 2 : 0}px`,\n      };\n    }, [ref?.current]);\n\n    const contentProps = {\n      type,\n      visible,\n      offset,\n      placement,\n      hideArrow,\n      iconOffset,\n      parent: ref,\n      portalCss,\n      onClick: (e: React.MouseEvent) => onContentClick(e, visible, setVisible),\n    };\n\n    const changeVisible = (nextState: boolean) => {\n      const clear = () => {\n        clearTimeout(timer.current);\n        timer.current = undefined;\n      };\n      const handler = (nextState: boolean) => {\n        setVisible(nextState);\n        onVisibleChange(nextState);\n        clear();\n      };\n      clear();\n      if (nextState) {\n        timer.current = window.setTimeout(() => handler(true), enterDelay);\n        return;\n      }\n      const leaveDelayWithoutClick = trigger === \"click\" ? 0 : leaveDelay;\n      timer.current = window.setTimeout(\n        () => handler(false),\n        leaveDelayWithoutClick,\n      );\n    };\n\n    const mouseEventHandler = (next: boolean) =>\n      trigger === \"hover\" && changeVisible(next);\n    const clickEventHandler = () =>\n      trigger === \"click\" && changeVisible(!visible);\n\n    useClickAway(ref, () => trigger === \"click\" && changeVisible(false));\n    React.useEffect(() => {\n      if (customVisible === undefined) return;\n      changeVisible(customVisible);\n    }, [customVisible]);\n\n    return (\n      <div\n        ref={ref}\n        onClick={clickEventHandler}\n        onMouseEnter={() => mouseEventHandler(true)}\n        onMouseLeave={() => mouseEventHandler(false)}\n        {...props}\n      >\n        {children}\n        <TooltipContent {...contentProps}>{text}</TooltipContent>\n      </div>\n    );\n  },\n)`\n  width: max-content;\n  display: inline-block;\n  user-select: none;\n`;\n\nTooltipComponent.displayName = \"KitchnTooltip\";\nexport const Tooltip = withDecorator(TooltipComponent);\nexport default Tooltip;\n","import React, { Children } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { DecoratorProps, withDecorator } from \"../../hoc\";\nimport { KitchnComponent } from \"../../types\";\nimport Button, { ButtonProps } from \"../Button\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Link, { LinkProps } from \"../Link\";\nimport Text from \"../Text\";\nimport Tooltip, { TooltipOnContentClick, TooltipProps } from \"../Tooltip\";\nimport { TooltipContentInner } from \"../Tooltip/Content\";\n\nexport type MenuContainerProps = Omit<TooltipProps, \"text\">;\n\nconst MenuContainer = styled(\n  ({\n    children,\n    placement = \"bottomStart\",\n    portalCss = css``,\n    hideArrow = true,\n    trigger = \"click\",\n    ...props\n  }: MenuContainerProps) => {\n    const menuButtons = Children.toArray(children).filter(\n      (child) => React.isValidElement(child) && child.type === MenuButton,\n    );\n\n    const menuContent = Children.toArray(children).find(\n      (child) => React.isValidElement(child) && child.type === MenuContent,\n    );\n\n    const mergedPortalCss = css`\n      ${portalMenuCss} ${portalCss}\n    `;\n\n    const onContentClick: TooltipOnContentClick = (e, _, setVisible) => {\n      let targetElement = e.target as HTMLElement | null;\n\n      while (targetElement && targetElement !== e.currentTarget) {\n        if (targetElement.hasAttribute(\"data-menuitem\")) {\n          setVisible(false);\n          return;\n        }\n        targetElement = targetElement.parentElement;\n      }\n\n      e.stopPropagation();\n      e.nativeEvent.stopImmediatePropagation();\n    };\n\n    return (\n      <Tooltip\n        role={\"menu\"}\n        trigger={trigger}\n        text={menuContent}\n        portalCss={mergedPortalCss}\n        hideArrow={hideArrow}\n        placement={placement}\n        onContentClick={onContentClick}\n        offset={5}\n        {...props}\n      >\n        {menuButtons}\n      </Tooltip>\n    );\n  },\n)``;\n\nconst portalMenuCss = css`\n  ${TooltipContentInner} {\n    padding: ${({ theme }) => theme.gap.tiny};\n  }\n`;\n\nexport type MenuButtonProps =\n  | ({\n      unstyled?: true;\n    } & React.PropsWithChildren)\n  | ({\n      unstyled?: false;\n    } & ButtonProps &\n      DecoratorProps);\n\nconst MenuButton = ({ unstyled, ...props }: MenuButtonProps) => {\n  if (unstyled && props.children) {\n    return React.cloneElement(props.children as React.ReactElement, props);\n  }\n\n  return <Button role={\"menuitem\"} {...props} />;\n};\n\nexport type MenuContentProps = ContainerProps;\n\nconst MenuContent = styled(\n  ({ children, ...props }: MenuItemProps & DecoratorProps) => {\n    return (\n      <Container as={\"ul\"} {...props}>\n        {children}\n      </Container>\n    );\n  },\n)``;\n\nexport type MenuItemProps = KitchnComponent<\n  {\n    disabled?: boolean;\n    active?: boolean;\n  },\n  ContainerProps\n>;\n\nconst MenuItem = styled.li.attrs<{\n  \"data-menuitem\"?: boolean;\n}>({ \"data-menuitem\": true })<MenuItemProps>`\n  list-style: none;\n  padding: ${({ theme }) => theme.gap.small} ${({ theme }) => theme.gap.normal};\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  transition: background-color 0.2s ease;\n  font-size: ${({ theme }) => theme.size.compact};\n  border-radius: ${({ theme }) => theme.radius.square};\n  width: 100%;\n  ${({ disabled }) =>\n    disabled &&\n    `\n    opacity: 0.5;\n  `}\n\n  ${({ active, theme }) =>\n    active &&\n    `\n    background-color: ${theme.colors.layout.dark};\n  `}\n\n  &:hover {\n    ${({ disabled, theme }) =>\n      !disabled && `background-color: ${theme.colors.layout.dark};`}\n  }\n`;\n\nexport type MenuLinkProps = KitchnComponent<\n  MenuItemProps,\n  LinkProps & DecoratorProps\n>;\n\nconst MenuLink = styled((props: MenuLinkProps) => (\n  <MenuItem as={Link} {...props} />\n))`\n  &:hover {\n    filter: brightness(1);\n  }\n`;\n\nexport type MenuSectionProps = KitchnComponent<\n  {\n    title: string;\n  },\n  ContainerProps\n>;\n\nconst MenuSection = styled(\n  ({ title, children, ...props }: MenuSectionProps) => (\n    <Container role={\"presentation\"} as={\"li\"} {...props}>\n      <Text\n        size={\"tiny\"}\n        color={\"light\"}\n        px={\"small\"}\n        pb={\"tiny\"}\n        pt={\"normal\"}\n      >\n        {title}\n      </Text>\n      {children}\n    </Container>\n  ),\n)``;\n\nconst MenuDivider = styled.div`\n  height: 1px;\n  width: calc(100% + ${({ theme }) => theme.gap.tiny} * 2);\n  background-color: ${({ theme }) => theme.colors.layout.dark};\n  margin: ${({ theme }) => theme.gap.tiny} 0 ${({ theme }) => theme.gap.tiny} -${({ theme }) => theme.gap.tiny};\n`;\n\nexport const Menu = {\n  Container: MenuContainer,\n  Button: MenuButton,\n  Content: MenuContent,\n  Item: withDecorator(MenuItem),\n  Link: MenuLink,\n  Section: MenuSection,\n  Divider: withDecorator(MenuDivider),\n};\n","import { isSameDay, isSameMonth, isValid } from \"date-fns\";\nimport React, { ChangeEvent, KeyboardEvent, MouseEvent } from \"react\";\nimport {\n  DateFormatter,\n  DayPicker,\n  DateRange,\n  isDateRange,\n  ActiveModifiers,\n} from \"react-day-picker\";\nimport { RiCalendarLine } from \"react-icons/ri\";\nimport styled, { css } from \"styled-components\";\n\nimport { DecoratorProps, withDecorator } from \"../../hoc\";\nimport Container from \"../Container\";\nimport Icon from \"../Icon\";\nimport Input from \"../Input\";\nimport { Menu, MenuButtonProps, MenuContainerProps } from \"../Menu\";\nimport Text from \"../Text\";\nimport { TooltipContentInner } from \"../Tooltip/Content\";\n\nexport type { DateFormatter, DateRange };\n\ntype Props = {\n  format?: Intl.DateTimeFormatOptions;\n  placeholder?: string;\n  multiplePlaceholder?: string;\n  rangePlaceholder?: string;\n  menuContainerProps?: MenuContainerProps & DecoratorProps;\n  menuButtonProps?: MenuButtonProps & DecoratorProps;\n  time?: boolean;\n  timeStartLabel?: string;\n  timeEndLabel?: string;\n} & React.ComponentProps<typeof DayPicker>;\n\nexport type CalendarProps = Props;\n\nexport const formatWeekdayName: DateFormatter = (date, options) => {\n  return date\n    .toLocaleDateString(options?.locale?.code, { weekday: \"short\" })\n    .slice(0, 1);\n};\n\nexport const formatCaption: DateFormatter = (date) =>\n  date.toLocaleDateString(undefined, {\n    month: \"long\",\n    year: \"numeric\",\n  });\n\nconst CalendarComponent = styled(\n  ({\n    placeholder = \"Select a date\",\n    multiplePlaceholder = \"%s days selected\",\n    rangePlaceholder = \"Select an end date\",\n    menuContainerProps,\n    menuButtonProps,\n    format,\n    time = false,\n    timeStartLabel = \"Start\",\n    timeEndLabel = \"End\",\n    ...props\n  }: CalendarProps) => {\n    if (!format) {\n      switch (props.mode) {\n        case \"range\":\n          if (\n            props.selected?.from &&\n            props.selected?.to &&\n            isSameMonth(props.selected.from, props.selected.to)\n          ) {\n            format = {\n              weekday: \"short\",\n              day: \"numeric\",\n              hour: time ? \"numeric\" : undefined,\n              minute: time ? \"numeric\" : undefined,\n            };\n          } else {\n            format = {\n              weekday: \"short\",\n              month: \"short\",\n              day: \"numeric\",\n              hour: time ? \"numeric\" : undefined,\n              minute: time ? \"numeric\" : undefined,\n            };\n          }\n          break;\n        case \"single\":\n        case \"multiple\":\n        default:\n          format = {\n            weekday: \"short\",\n            month: \"short\",\n            day: \"numeric\",\n          };\n          break;\n      }\n    }\n\n    const activeModifiers: ActiveModifiers = {\n      selected: true,\n      customModifier: true,\n    };\n\n    const handleSingleInput = (\n      e: ChangeEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\n      props: CalendarProps,\n      isTimeInput: boolean = false,\n    ) => {\n      if (props.mode !== \"single\") return;\n\n      let date: Date;\n      if (isTimeInput) {\n        // For time input, consider today's date and set the time part\n        const currentTime = new Date(props.selected || new Date());\n        const [hours, minutes] = (e.target as HTMLInputElement).value.split(\n          \":\",\n        );\n        date = new Date(\n          currentTime.getFullYear(),\n          currentTime.getMonth(),\n          currentTime.getDate(),\n          parseInt(hours, 10),\n          parseInt(minutes, 10),\n        );\n      } else {\n        // For date input, parse the input value as date\n        date = new Date((e.target as HTMLInputElement).value);\n      }\n\n      if (isValid(date)) {\n        if (props.onSelect) {\n          props.onSelect(\n            date,\n            date,\n            activeModifiers,\n            e as unknown as MouseEvent,\n          );\n        }\n      }\n    };\n\n    const handleRangeInput = (\n      e: ChangeEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\n      props: CalendarProps,\n      isEndInput: boolean = false,\n    ) => {\n      if (props.mode !== \"range\") return;\n\n      let date: Date;\n      if (isEndInput) {\n        // For end date input, parse the input value as date\n        date = new Date((e.target as HTMLInputElement).value);\n      } else {\n        // For start date input, consider today's date and set the time part\n        const currentTime = new Date(props.selected?.from || new Date());\n        date = new Date((e.target as HTMLInputElement).value);\n        date.setHours(currentTime.getHours(), currentTime.getMinutes());\n      }\n\n      if (isValid(date)) {\n        if (props.onSelect) {\n          props.onSelect(\n            {\n              from: isEndInput ? props.selected?.from : date,\n              to: isEndInput ? date : props.selected?.to,\n            },\n            date,\n            activeModifiers,\n            e as unknown as MouseEvent,\n          );\n        }\n      }\n    };\n\n    return (\n      <Menu.Container\n        portalCss={css`\n          ${TooltipContentInner} {\n            padding: 0;\n            width: 280px;\n          }\n        `}\n        {...menuContainerProps}\n      >\n        <Menu.Button\n          unstyled={false}\n          prefix={<Icon icon={RiCalendarLine} />}\n          type={\"dark\"}\n          htmlType={\"button\"}\n          {...menuButtonProps}\n        >\n          <Text size={\"small\"}>\n            {props.selected instanceof Date\n              ? props.selected.toLocaleDateString(undefined, format)\n              : props.selected instanceof Array &&\n                  props.mode === \"multiple\" &&\n                  props.selected.length > 0\n                ? props.selected &&\n                  props.selected.length === 1 &&\n                  props.selected.every((d) => d instanceof Date)\n                  ? props.selected[0].toLocaleDateString(undefined, format)\n                  : multiplePlaceholder.replace(\n                      \"%s\",\n                      props.selected.length.toString(),\n                    )\n                : isDateRange(props.selected) && props.mode === \"range\"\n                  ? props.selected.from && props.selected.to\n                    ? isSameDay(props.selected.from, props.selected.to)\n                      ? props.selected.from.toLocaleDateString(\n                          undefined,\n                          format,\n                        )\n                      : isSameMonth(props.selected.from, props.selected.to)\n                        ? `${props.selected.from.toLocaleDateString(undefined, format)} - ${props.selected.to.toLocaleDateString(\n                            undefined,\n                            format,\n                          )} ${props.selected.to.toLocaleDateString(undefined, {\n                            month: \"short\",\n                          })}`\n                        : `${props.selected.from.toLocaleDateString(undefined, format)} - ${props.selected.to.toLocaleDateString(\n                            undefined,\n                            format,\n                          )}`\n                    : rangePlaceholder\n                  : placeholder}\n          </Text>\n        </Menu.Button>\n        <Menu.Content as={\"div\"}>\n          <Container p={\"small\"}>\n            <StyledDayPicker\n              weekStartsOn={1}\n              showOutsideDays\n              formatters={{\n                formatWeekdayName,\n                formatCaption: (date) =>\n                  date.toLocaleDateString(undefined, {\n                    month: \"long\",\n                    year: \"numeric\",\n                  }),\n              }}\n              {...props}\n            />\n          </Container>\n          {time && (\n            <Container btw={1} p={\"small\"} gap={\"small\"}>\n              <Container gap={\"tiny\"}>\n                {props.mode === \"single\" && (\n                  <Container gap={\"tiny\"} row>\n                    <Input\n                      size={\"small\"}\n                      placeholder={\"mm/dd/yyyy\"}\n                      value={props.selected?.toLocaleDateString(\"en-US\", {\n                        month: \"2-digit\",\n                        day: \"2-digit\",\n                        year: \"numeric\",\n                      })}\n                      onBlur={(e) => handleSingleInput(e, props)}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          handleSingleInput(e, props);\n                        }\n                      }}\n                    />\n                    <Input\n                      size={\"small\"}\n                      placeholder={\"hh:mm\"}\n                      value={props.selected?.toLocaleTimeString(\"en-US\", {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                        timeZoneName: \"short\",\n                      })}\n                      onBlur={(e) => handleSingleInput(e, props, true)}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          handleSingleInput(e, props, true);\n                        }\n                      }}\n                    />\n                  </Container>\n                )}\n                {props.mode === \"range\" && (\n                  <Container gap={\"tiny\"}>\n                    <Text ml={\"tiny\"} size={\"tiny\"} color={\"light\"} span>\n                      {timeStartLabel}\n                    </Text>\n                    <Container gap={\"tiny\"} row>\n                      <Container>\n                        <Input\n                          size={\"small\"}\n                          placeholder={\"mm/dd/yyyy\"}\n                          value={props.selected?.from?.toLocaleDateString(\n                            \"en-US\",\n                            {\n                              month: \"2-digit\",\n                              day: \"2-digit\",\n                              year: \"numeric\",\n                            },\n                          )}\n                          onBlur={(e) => handleRangeInput(e, props)}\n                          onKeyDown={(e) => {\n                            if (e.key === \"Enter\") {\n                              handleRangeInput(e, props);\n                            }\n                          }}\n                        />\n                      </Container>\n                      <Container>\n                        <Input\n                          size={\"small\"}\n                          placeholder={\"hh:mm\"}\n                          value={props.selected?.from?.toLocaleTimeString(\n                            \"en-US\",\n                            {\n                              hour: \"2-digit\",\n                              minute: \"2-digit\",\n                              timeZoneName: \"short\",\n                            },\n                          )}\n                          onBlur={(e) => handleRangeInput(e, props, false)}\n                          onKeyDown={(e) => {\n                            if (e.key === \"Enter\") {\n                              handleRangeInput(e, props, false);\n                            }\n                          }}\n                        />\n                      </Container>\n                    </Container>\n\n                    <Text ml={\"tiny\"} size={\"tiny\"} color={\"light\"} span>\n                      {timeEndLabel}\n                    </Text>\n                    <Container gap={\"tiny\"} row>\n                      <Input\n                        size={\"small\"}\n                        placeholder={\"mm/dd/yyyy\"}\n                        value={props.selected?.to?.toLocaleDateString(\"en-US\", {\n                          month: \"2-digit\",\n                          day: \"2-digit\",\n                          year: \"numeric\",\n                        })}\n                        onBlur={(e) => handleRangeInput(e, props, true)}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\") {\n                            handleRangeInput(e, props, true);\n                          }\n                        }}\n                      />\n                      <Input\n                        size={\"small\"}\n                        placeholder={\"hh:mm\"}\n                        value={props.selected?.to?.toLocaleTimeString(\"en-US\", {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                          timeZoneName: \"short\",\n                        })}\n                        onBlur={(e) => handleRangeInput(e, props, true)}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\") {\n                            handleRangeInput(e, props, true);\n                          }\n                        }}\n                      />\n                    </Container>\n                  </Container>\n                )}\n              </Container>\n            </Container>\n          )}\n        </Menu.Content>\n      </Menu.Container>\n    );\n  },\n)``;\n\nconst StyledDayPicker = styled(DayPicker)`\n  &.rdp {\n    .rdp-vhidden {\n      display: none;\n    }\n\n    .rdp-caption {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n\n      .rdp-caption_label {\n        font-size: ${({ theme }) => theme.size.compact};\n      }\n\n      .rdp-nav {\n        display: flex;\n        align-items: center;\n        gap: ${({ theme }) => theme.gap.normal};\n\n        .rdp-button {\n          background-color: transparent;\n          border: none;\n          cursor: pointer;\n          padding: ${({ theme }) => theme.gap.tiny};\n          transition: background-color 0.2s;\n          padding: 0;\n\n          .rdp-nav_icon {\n            height: 10px;\n            width: 10px;\n            color: ${({ theme }) => theme.colors.text.light};\n          }\n        }\n      }\n\n      .rdp-caption_dropdowns {\n        display: flex;\n        gap: ${({ theme }) => theme.gap.small};\n        align-items: center;\n\n        .rdp-dropdown_month,\n        .rdp-dropdown_year {\n          position: relative;\n\n          .rdp-dropdown {\n            position: absolute;\n            top: 0;\n            left: 0;\n            opacity: 0;\n            width: 100%;\n            height: 100%;\n            cursor: pointer;\n          }\n\n          .rdp-caption_label {\n            display: flex;\n            gap: ${({ theme }) => theme.gap.tiny};\n            align-items: center;\n          }\n        }\n      }\n    }\n\n    .rdp-table {\n      display: block;\n      order-collapse: collapse;\n      table-layout: fixed;\n      margin-top: ${({ theme }) => theme.gap.small};\n\n      .rdp-head {\n        display: block;\n        .rdp-head_row {\n          display: flex;\n          flex-wrap: nowrap;\n          margin-top: ${({ theme }) => theme.gap.tiny};\n          .rdp-head_cell {\n            flex: 1;\n            text-align: center;\n            padding: 0;\n            text-transform: uppercase;\n            font-size: ${({ theme }) => theme.size.tiny};\n            color: ${({ theme }) => theme.colors.text.light};\n          }\n        }\n      }\n\n      .rdp-tbody {\n        display: block;\n        margin-top: ${({ theme }) => theme.gap.tiny};\n        .rdp-row {\n          display: flex;\n          flex-wrap: nowrap;\n          width: 100%;\n          margin-top: ${({ theme }) => theme.gap.tiny};\n          .rdp-cell {\n            display: flex;\n            flex: 1;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            font-size: ${({ theme }) => theme.size.normal};\n            transition: background-color 0.2s;\n            width: 100%;\n            height: 32px;\n            padding: 0;\n\n            .rdp-button {\n              z-index: 1;\n              outline: none;\n              display: block;\n              line-height: 30px;\n              width: 100%;\n              height: 32px;\n              border-radius: 4px;\n              font-size: 14px;\n              font-weight: 400;\n              text-align: center;\n              margin: 0;\n              background-color: transparent;\n              cursor: pointer;\n              border: 1px solid transparent;\n              transition:\n                background-color 0.2s,\n                border 0.2s,\n                border-radius 0.2s;\n\n              &:hover {\n                border: 1px solid ${({ theme }) => theme.colors.layout.light};\n              }\n\n              &.rdp-day_outside,\n              &.rdp-day_disabled {\n                color: ${({ theme }) => theme.colors.text.light};\n              }\n\n              &.rdp-day_disabled {\n                &:hover {\n                  border: 1px solid transparent;\n                  cursor: initial;\n                }\n              }\n\n              &.rdp-day_today {\n                background-color: ${({ theme }) => theme.colors.layout.dark};\n              }\n\n              &.rdp-day_selected {\n                background-color: ${({ theme }) =>\n                  theme.colors.layout.lightest};\n                color: ${({ theme }) => theme.colors.text.darkest};\n                border: 1px solid ${({ theme }) => theme.colors.layout.lightest};\n              }\n\n              &.rdp-day_range_middle {\n                background-color: ${({ theme }) => theme.colors.layout.dark};\n                color: ${({ theme }) => theme.colors.text.lightest};\n                border: 1px solid transparent;\n                border-radius: 0;\n                height: 28px;\n                line-height: 26px;\n\n                &.rdp-day_today {\n                  background-color: ${({ theme }) => theme.colors.layout.dark};\n                  height: 32px;\n                  line-height: 30px;\n                  border-radius: 4px;\n                }\n              }\n            }\n\n            &:first-child {\n              .rdp-button {\n                border-top-left-radius: 4px;\n                border-bottom-left-radius: 4px;\n              }\n            }\n\n            &:last-child {\n              .rdp-button {\n                border-top-right-radius: 4px;\n                border-bottom-right-radius: 4px;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nCalendarComponent.displayName = \"KitchnCalendar\";\nexport const Calendar = withDecorator(CalendarComponent);\nexport default Calendar;\n","import React from \"react\";\nimport { RiCheckLine, RiSubtractLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { convertRGBToRGBA } from \"../../utils/convertRGBToRGBA\";\nimport Icon from \"../Icon\";\n\ntype Props = {\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n  label?: string;\n  fullWidth?: boolean;\n};\n\nexport type CheckboxProps = KitchnComponent<\n  Props,\n  React.InputHTMLAttributes<HTMLInputElement>\n>;\n\nconst CheckboxComponent = styled(\n  ({\n    children,\n    checked,\n    onChange,\n    disabled,\n    fullWidth,\n    indeterminate,\n    label,\n    ...props\n  }: CheckboxProps) => {\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return e.preventDefault();\n      if (onChange) onChange(e);\n    };\n\n    return (\n      <CheckboxContainer\n        role={\"checkbox\"}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        disabled={disabled}\n        fullWidth={fullWidth}\n        label={label}\n        {...props}\n      >\n        {label && <CheckboxLabel>{label}</CheckboxLabel>}\n        <CheckboxCheckContainer label={!!label}>\n          <CheckboxCheck>\n            <StyledCheckbox\n              type={\"checkbox\"}\n              checked={checked}\n              onChange={handleChange}\n            />\n            <CheckboxCheckmark\n              checked={checked}\n              indeterminate={indeterminate}\n              disabled={disabled}\n              aria-hidden={\"true\"}\n            >\n              {checked ? (\n                <Icon\n                  icon={RiCheckLine}\n                  color={disabled ? \"darker\" : \"darkest\"}\n                  size={16}\n                />\n              ) : (\n                indeterminate && (\n                  <Icon icon={RiSubtractLine} color={\"darker\"} size={16} />\n                )\n              )}\n            </CheckboxCheckmark>\n          </CheckboxCheck>\n          {children && <CheckboxContent>{children}</CheckboxContent>}\n        </CheckboxCheckContainer>\n      </CheckboxContainer>\n    );\n  },\n)<CheckboxProps>`\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport const CheckboxCheckmark = styled.span<{\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  border-radius: 3px;\n  height: 1rem;\n  width: 1rem;\n  position: relative;\n  transition: all 0.2s;\n  transform: rotate(0.000001deg);\n  background-color: ${(props) => {\n    if (props.disabled)\n      return convertRGBToRGBA(props.theme.colors.layout.lightest, 0.1);\n    if (props.checked) return props.theme.colors.layout.lightest;\n    return \"transparent\";\n  }};\n\n  color: ${(props) => {\n    if (props.disabled) return props.theme.colors.text.light;\n\n    if (props.checked) return props.theme.colors.layout.darkest;\n    if (props.indeterminate) return props.theme.colors.layout.light;\n    return \"transparent\";\n  }};\n`;\n\nexport const CheckboxContainer = styled.label<{\n  disabled?: boolean;\n  fullWidth?: boolean;\n  label: boolean;\n}>`\n  ${({ label }) =>\n    !label &&\n    `\n  display: inline-flex;\n  align-items: flex-start;\n  user-select: none;\n  `}\n  ${({ fullWidth }) => fullWidth && \"width: 100%;\"};\n\n  &:hover {\n    ${CheckboxCheckmark} {\n      border-color: ${({ theme, disabled }) =>\n        disabled ? theme.colors.layout.dark : theme.colors.layout.light};\n    }\n  }\n\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n\n  ${({ theme, disabled }) =>\n    disabled &&\n    `\n    cursor: not-allowed;\n    color: ${theme.colors.text.light};\n    filter: brightness(0.8);\n  `}\n`;\n\nexport const CheckboxLabel = styled.div`\n  margin-bottom: 8px;\n  font-size: ${({ theme }) => theme.size.small};\n  font-weight: ${({ theme }) => theme.weight.medium};\n  color: ${({ theme }) => theme.colors.text.dark};\n`;\n\nexport type CheckboxCheckContainerProps = KitchnComponent<\n  {\n    label?: boolean;\n  },\n  React.HTMLAttributes<HTMLDivElement>\n>;\n\nconst BaseCheckboxCheckContainer: React.FC<CheckboxCheckContainerProps> = ({\n  children,\n  label,\n  ...props\n}: CheckboxCheckContainerProps) =>\n  label ? <div {...props}>{children}</div> : <>{children}</>;\n\nexport const CheckboxCheckContainer = styled(BaseCheckboxCheckContainer)`\n  display: inline-flex;\n  align-items: flex-start;\n  user-select: none;\n`;\n\nexport const CheckboxCheck = styled.span`\n  display: flex;\n  position: relative;\n  align-items: center;\n  padding: 2px;\n  margin: -2px;\n`;\n\nexport const CheckboxContent = styled.span`\n  margin-left: 8px;\n  font-size: ${({ theme }) => theme.size.compact};\n`;\n\nexport const StyledCheckbox = styled.input`\n  cursor: inherit;\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n`;\n\nCheckboxComponent.displayName = \"KitchnCheckbox\";\nexport const Checkbox = withDecorator(CheckboxComponent);\nexport default Checkbox;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\n\ntype Props = {\n  title: string;\n};\n\nexport type CodeProps = KitchnComponent<\n  Props,\n  React.HTMLAttributes<HTMLPreElement>\n>;\n\nconst CodeComponent = styled(({ children, title, ...props }: CodeProps) => {\n  return (\n    <pre role={\"code\"} aria-label={title} title={title} {...props}>\n      {title && (\n        <CodeHeader>\n          <CodeTitle>{title}</CodeTitle>\n        </CodeHeader>\n      )}\n      <CodeContent>{children}</CodeContent>\n    </pre>\n  );\n})<CodeProps>`\n  position: relative;\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  border-radius: 8px;\n  padding: ${({ title }) => (title ? \"35px 15px 15px\" : \"15px\")};\n  margin: 30px 0;\n  white-space: pre;\n  overflow: auto;\n`;\n\nexport const CodeHeader = styled.header`\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: space-between;\n  border-radius: 6px;\n`;\n\nexport const CodeTitle = styled.div`\n  font-size: ${({ theme }) => theme.size.small};\n  background-color: ${({ theme }) => theme.colors.layout.dark};\n  color: ${({ theme }) => theme.colors.text.lighter};\n  border-top-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n  padding: 5px;\n`;\n\nexport const CodeContent = styled.code`\n  color: ${({ theme }) => theme.colors.text.lightest};\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  font-size: ${({ theme }) => theme.size.small};\n  line-height: 1.5;\n  font-family: ${({ theme }) => theme.family.monospace};\n  tab-size: 4;\n  hyphens: none;\n`;\n\nCodeComponent.displayName = \"KitchnCode\";\nexport const Code = withDecorator(CodeComponent);\nexport default Code;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../../types\";\n\nexport type InlineCodeProps = KitchnComponent<\n  object,\n  React.HTMLAttributes<HTMLElement>\n>;\n\nconst InlineCodeComponent = styled((props: InlineCodeProps) => {\n  return <code role={\"presentation\"} {...props} />;\n})`\n  display: inline-block;\n  background: ${({ theme }) => theme.colors.layout.dark};\n  color: ${({ theme }) => theme.colors.text.lighter};\n  border-radius: 5px;\n  font-family: ${({ theme }) => theme.family.monospace};\n  padding: 0 5px;\n  line-height: 1.5;\n  white-space: pre-wrap;\n`;\n\nInlineCodeComponent.displayName = \"KitchnInlineCode\";\nexport const InlineCode = withDecorator(InlineCodeComponent);\nexport default InlineCode;\n","import React from \"react\";\nimport { RiArrowDownSLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport Icon from \"../Icon\";\n\ntype Props = {\n  title: string;\n  subtitle?: React.ReactNode;\n  children?: React.ReactNode;\n  defaultExpanded?: boolean;\n  card?: boolean;\n  size?: \"normal\" | \"small\" | \"medium\";\n};\n\nexport type CollapseProps = KitchnComponent<Props>;\n\nconst CollapseComponent = styled(\n  ({\n    title,\n    subtitle,\n    children,\n    defaultExpanded = false,\n    size = \"medium\",\n    // Prevent 'card' from being passed to the DOM element\n    card: _card,\n    ...props\n  }: CollapseProps) => {\n    const contentContainerRef = React.useRef<HTMLDivElement>(null);\n\n    const [isOpen, setIsOpen] = React.useState<boolean>(defaultExpanded);\n    const [height, setHeight] = React.useState<number | undefined>(\n      defaultExpanded ? undefined : 0,\n    );\n\n    const handleClick = () => {\n      setIsOpen((prev) => !prev);\n    };\n\n    React.useEffect(() => {\n      if (!height || !isOpen || !contentContainerRef.current) return undefined;\n      const resizeObserver = new ResizeObserver((el) => {\n        setHeight(el[0].contentRect.height);\n      });\n      resizeObserver.observe(contentContainerRef.current);\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [height, isOpen]);\n\n    React.useEffect(() => {\n      if (isOpen && contentContainerRef.current)\n        setHeight(contentContainerRef.current.getBoundingClientRect().height);\n      else setHeight(0);\n    }, [isOpen]);\n\n    return (\n      <div role={\"region\"} aria-expanded={isOpen} {...props}>\n        <CollapseHeader onClick={handleClick} isOpen={isOpen}>\n          <CollapseHeaderContent>\n            <CollapseTitle size={size}>{title}</CollapseTitle>\n            {subtitle && <CollapseSubtitle>{subtitle}</CollapseSubtitle>}\n          </CollapseHeaderContent>\n          <Icon icon={RiArrowDownSLine} />\n        </CollapseHeader>\n        <CollapseContent height={height}>\n          <CollapseContentContainer ref={contentContainerRef}>\n            {children}\n          </CollapseContentContainer>\n        </CollapseContent>\n      </div>\n    );\n  },\n)<CollapseProps>`\n  position: relative;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  border-top: 1px solid ${({ theme }) => theme.colors.layout.dark};\n\n  &:last-child {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  }\n\n  ${({ card, theme }) =>\n    card &&\n    `\n  border: 1px solid ${theme.colors.layout.dark};\n  border-radius: 5px;\n  background: ${theme.colors.layout.darker};\n  margin-bottom: 10px;\n  width: 100%;\n\n  &:first-child {\n    margin-top: 0;\n  }\n`}\n`;\n\nconst CollapseHeader = styled.button<{ isOpen: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  outline: none;\n  border: none;\n  background-color: transparent;\n  padding: 10px;\n  cursor: pointer;\n  transition: all 0.2s;\n  user-select: none;\n\n  ${Icon} {\n    transition: transform 0.2s;\n    transform: ${({ isOpen }) => (isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\")};\n  }\n`;\n\nconst CollapseHeaderContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst CollapseTitle = styled.h3<{ size?: \"normal\" | \"small\" | \"medium\" }>`\n  font-size: ${({ size, theme }) => {\n    switch (size) {\n      case \"small\":\n        return theme.size.small;\n      case \"medium\":\n        return theme.size.medium;\n      default:\n        return theme.size.normal;\n    }\n  }};\n  font-weight: ${({ theme }) => theme.weight.bold};\n`;\n\nconst CollapseSubtitle = styled.span`\n  margin-top: 5px;\n  font-size: ${({ theme }) => theme.size.small};\n  font-weight: ${({ theme }) => theme.weight.regular};\n  color: ${({ theme }) => theme.colors.text.light};\n`;\n\nconst CollapseContent = styled.div<{ height?: number }>`\n  overflow: hidden;\n  transition: height 0.2s ease-in-out;\n  height: ${({ height }) => (height ? `calc(${height}px + 10px * 2)` : \"0px\")};\n`;\n\nconst CollapseContentContainer = styled.span`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  padding: 10px;\n`;\n\nCollapseComponent.displayName = \"KitchnCollapse\";\nexport const Collapse = withDecorator(CollapseComponent);\nexport default Collapse;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { withDecorator } from \"../../hoc\";\nimport {\n  getRefRect,\n  useClickAnyWhere,\n  useDOMObserver,\n  usePortal,\n  useResize,\n} from \"../../hooks\";\nimport { KitchnComponent } from \"../../types\";\nimport Container from \"../Container\";\n\ninterface Props {\n  visible: boolean;\n  disableMatchWidth?: boolean;\n  parent?: React.MutableRefObject<HTMLElement | null> | undefined;\n}\n\ninterface ReactiveDomReact {\n  top: number;\n  left: number;\n  right: number;\n  width: number;\n}\n\nconst defaultRect: ReactiveDomReact = {\n  top: -1000,\n  left: -1000,\n  right: -1000,\n  width: 0,\n};\n\nexport type DropdownProps = KitchnComponent<Props>;\n\nconst DropdownComponent: React.FC<DropdownProps> = React.memo(\n  ({ visible, disableMatchWidth, children, parent }: DropdownProps) => {\n    const el = usePortal(\"dropdown\");\n    const [rect, setRect] = React.useState<ReactiveDomReact>(defaultRect);\n\n    if (!parent) return null;\n\n    const updateRect = () => {\n      const { top, left, right, width: nativeWidth } = getRefRect(parent);\n      setRect({ top, left, right, width: nativeWidth });\n    };\n\n    useResize(updateRect);\n    useClickAnyWhere(() => {\n      const { top, left } = getRefRect(parent);\n      const shouldUpdatePosition = top !== rect.top || left !== rect.left;\n      if (!shouldUpdatePosition) return;\n      updateRect();\n    });\n    useDOMObserver(parent, () => {\n      updateRect();\n    });\n\n    React.useEffect(() => {\n      if (!parent || !parent.current) return;\n      parent.current.addEventListener(\"mouseenter\", updateRect);\n      return () => {\n        if (!parent || !parent.current) return;\n        parent.current.removeEventListener(\"mouseenter\", updateRect);\n      };\n    }, [parent]);\n\n    const clickHandler = (event: React.MouseEvent<HTMLDivElement>) => {\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n      event.preventDefault();\n    };\n    const mouseDownHandler = (event: React.MouseEvent<HTMLDivElement>) => {\n      event.preventDefault();\n    };\n\n    if (!el) return null;\n\n    return createPortal(\n      <Container\n        display={visible ? \"flex\" : \"none\"}\n        position={\"absolute\"}\n        top={rect.top + 2}\n        left={rect.left}\n        zIndex={1000}\n        width={!disableMatchWidth ? rect.width : \"auto\"}\n        minWidth={disableMatchWidth ? rect.width : \"auto\"}\n        onMouseDown={mouseDownHandler}\n        onClick={clickHandler}\n      >\n        {children}\n      </Container>,\n      el,\n    );\n  },\n);\n\nDropdownComponent.displayName = \"KitchenDropdown\";\nexport const Dropdown = withDecorator(DropdownComponent);\nexport default Dropdown;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../../hoc\";\nimport { useCombobox } from \"../../../hooks\";\nimport { KitchnComponent } from \"../../../types\";\nimport Container, { ContainerProps } from \"../../Container\";\nimport Text from \"../../Text\";\n\ntype Props = {\n  value: string;\n  isLabelOnly?: boolean;\n};\n\nexport type ComboboxItemProps = KitchnComponent<Props, ContainerProps>;\n\nconst ComboboxItemComponent = styled(\n  ({\n    value: identValue,\n    children,\n    isLabelOnly,\n    onClick,\n    ...props\n  }: ComboboxItemProps) => {\n    const { value, updateValue, updateVisible } = useCombobox();\n    const selectHandler = (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => {\n      updateValue && updateValue(identValue);\n      updateVisible && updateVisible(false);\n      onClick && onClick(event);\n    };\n\n    const isActive = React.useMemo(\n      () => value === identValue,\n      [identValue, value],\n    );\n\n    return (\n      <Container\n        br={\"square\"}\n        p={\"tiny\"}\n        cursor={\"pointer\"}\n        onClick={selectHandler}\n        bg={isActive ? \"dark\" : \"darkest\"}\n        {...props}\n      >\n        {isLabelOnly ? (\n          <Text size={\"compact\"} truncate span>\n            {children}\n          </Text>\n        ) : (\n          <Text size={\"compact\"} span>\n            {children}\n          </Text>\n        )}\n      </Container>\n    );\n  },\n)`\n  transition: all 0.2s;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.layout.dark};\n  }\n`;\n\nComboboxItemComponent.displayName = \"KitchenComboboxItem\";\nexport const ComboboxItem = withDecorator(ComboboxItemComponent);\nexport default ComboboxItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ComboboxDropdown from \"./Dropdown\";\nimport ComboboxEmpty from \"./Empty\";\nimport ComboboxItem, { ComboboxItemProps } from \"./Item\";\nimport ComboboxSearching from \"./Searching\";\nimport { ComboboxConfig, ComboboxContext } from \"../../contexts\";\nimport { withDecorator } from \"../../hoc\";\nimport { useCurrentState } from \"../../hooks\";\nimport { KitchnComponent } from \"../../types\";\nimport { pickChild } from \"../../utils\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Input, { InputProps } from \"../Input\";\n\nexport type ComboboxOption = {\n  label: string;\n  value: string;\n};\n\nexport type ComboboxOptions = (\n  | typeof ComboboxItem\n  | ComboboxOption\n  | React.ReactElement<ComboboxItemProps>\n)[];\n\ntype Props = {\n  options?: ComboboxOptions;\n  containerProps?: ContainerProps;\n  initialValue?: string;\n  onChange?: (value: string) => void;\n  onSearch?: (value: string) => void;\n  onSelect?: (value: string) => void;\n  disableMatchWidth?: boolean;\n  disableFreeSolo?: boolean;\n  value?: string;\n  clearable?: boolean;\n  searching?: boolean;\n};\n\nexport type ComboboxProps = KitchnComponent<Props, InputProps>;\n\nconst childrenToOptionsNode = (options: ComboboxOption[]) =>\n  options.map((item, index) => {\n    if (React.isValidElement(item))\n      return React.cloneElement(item, { key: index });\n    const validItem = item as ComboboxOption;\n    return (\n      <ComboboxItem key={index} value={validItem.value} isLabelOnly>\n        {validItem.label}\n      </ComboboxItem>\n    );\n  });\n\nconst ForwardedCombobox = React.forwardRef<HTMLInputElement, ComboboxProps>(\n  (\n    {\n      containerProps,\n      initialValue: customInitialValue = \"\",\n      clearable = false,\n      searching,\n      onChange,\n      onSelect,\n      onSearch,\n      value,\n      disabled,\n      disableFreeSolo = false,\n      disableMatchWidth = false,\n      options = [],\n      children,\n      ...props\n    }: ComboboxProps,\n    comboxRef: React.Ref<HTMLInputElement | null>,\n  ) => {\n    const resetTimer = React.useRef<number>();\n    const ref = React.useRef<HTMLDivElement>(null);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [state, setState, stateRef] =\n      useCurrentState<string>(customInitialValue);\n    const [selectVal, setSelectVal] =\n      React.useState<string>(customInitialValue);\n    const [visible, setVisible] = React.useState<boolean>(false);\n    React.useImperativeHandle(comboxRef, () => inputRef.current);\n\n    const [, searchChild] = pickChild(children, ComboboxSearching);\n    const [, emptyChild] = pickChild(children, ComboboxEmpty);\n    const comboboxItems = React.useMemo(() => {\n      const hasSearchChild =\n        searchChild && React.Children.count(searchChild) > 0;\n      const hasEmptyChild = emptyChild && React.Children.count(emptyChild) > 0;\n      if (searching) {\n        return hasSearchChild ? (\n          searchChild\n        ) : (\n          <ComboboxSearching>{\"Searching...\"}</ComboboxSearching>\n        );\n      }\n      if (options.length === 0) {\n        if (state === \"\") return null;\n        return hasEmptyChild ? (\n          emptyChild\n        ) : (\n          <ComboboxEmpty>{\"No results\"}</ComboboxEmpty>\n        );\n      }\n\n      return childrenToOptionsNode(options as ComboboxOption[]);\n    }, [searching, options, state]);\n\n    const showClearIcon = React.useMemo(\n      () => clearable && searching === undefined,\n      [clearable, searching],\n    );\n\n    const updateValue = (val: string) => {\n      if (disabled) return;\n      setSelectVal(val);\n      onSelect && onSelect(val);\n      setState(val);\n      inputRef.current && inputRef.current.focus();\n    };\n    const updateVisible = (next: boolean) => setVisible(next);\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (state === event.target.value || event.target.value === \"\") {\n        setVisible(false);\n      } else {\n        setVisible(true);\n      }\n      onSearch && onSearch(event.target.value);\n      setState(event.target.value);\n    };\n    const resetInputValue = () => {\n      if (!disableFreeSolo) return;\n      if (!state || state === \"\") return;\n      if (state !== selectVal) {\n        setState(selectVal);\n      }\n    };\n\n    React.useEffect(() => {\n      onChange && onChange(state);\n    }, [state]);\n    React.useEffect(() => {\n      if (value === undefined) return;\n      setState(value);\n    }, [value]);\n\n    const initialValue = React.useMemo<ComboboxConfig>(\n      () => ({\n        ref,\n        value: state,\n        updateValue,\n        visible,\n        updateVisible,\n      }),\n      [state, visible],\n    );\n\n    const toggleFocusHandler = (next: boolean) => {\n      clearTimeout(resetTimer.current);\n\n      if (next && state === \"\") {\n        setVisible(false);\n      } else {\n        setVisible(next);\n      }\n      if (next) {\n        onSearch && onSearch(stateRef.current);\n      } else {\n        resetTimer.current = window.setTimeout(() => {\n          resetInputValue();\n          clearTimeout(resetTimer.current);\n        }, 100);\n      }\n    };\n\n    const inputProps = {\n      ...props,\n      disabled,\n      value: state,\n    };\n\n    return (\n      <ComboboxContext.Provider value={initialValue}>\n        <Container ref={ref} {...containerProps}>\n          <Input\n            ref={inputRef}\n            onChange={onInputChange}\n            onFocus={() => toggleFocusHandler(true)}\n            onBlur={() => toggleFocusHandler(false)}\n            onClick={() => toggleFocusHandler(true)}\n            clearable={showClearIcon}\n            {...inputProps}\n          />\n\n          <ComboboxDropdown\n            visible={visible}\n            disableMatchWidth={disableMatchWidth}\n          >\n            {comboboxItems}\n          </ComboboxDropdown>\n        </Container>\n      </ComboboxContext.Provider>\n    );\n  },\n);\n\nForwardedCombobox.displayName = \"Combobox\";\n\nconst ComboboxComponent = styled(ForwardedCombobox)``;\n\nComboboxComponent.displayName = \"KitchnCombobox\";\nexport const Combobox = withDecorator(ComboboxComponent);\nexport default Combobox;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useKeyboard } from \"../../hooks/useKeyboard\";\nimport { usePortal } from \"../../hooks/usePortal\";\nimport { KitchnComponent } from \"../../types\";\nimport { slideInUp, slideOutDown } from \"../../utils/animate\";\nimport { KeyCode } from \"../../utils/codes\";\n\ntype Props = {\n  show: boolean;\n  onDismiss?: () => void;\n  onAnimationDone?: () => void;\n  children?: React.ReactNode;\n  height?: number;\n};\n\nexport type DrawerProps = KitchnComponent<Props>;\n\nconst DrawerComponent = styled(\n  ({\n    children,\n    show,\n    onDismiss,\n    onAnimationDone,\n    height,\n    ...props\n  }: DrawerProps) => {\n    const portal = usePortal(\"drawer\");\n    const containerRef = React.useRef<HTMLDivElement>(null);\n\n    const [animationState, setAnimationState] = React.useState<\n      \"entrance\" | \"exit\" | null\n    >(null);\n\n    const handleDismiss = React.useCallback(\n      (isDismiss = true) => {\n        if (animationState) setAnimationState(\"exit\");\n        if (isDismiss && onDismiss) onDismiss();\n        setTimeout(() => {\n          setAnimationState(null);\n          if (onAnimationDone && animationState === \"exit\") {\n            onAnimationDone();\n          }\n        }, 210);\n      },\n      [animationState, onDismiss, onAnimationDone],\n    );\n\n    const handleContainerClick = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (e.target === e.currentTarget) {\n        handleDismiss();\n      }\n    };\n\n    const { bindings } = useKeyboard(\n      () => {\n        handleDismiss();\n      },\n      KeyCode.Escape,\n      {\n        disableGlobalEvent: true,\n      },\n    );\n\n    React.useEffect(() => {\n      if (show) {\n        document.body.style.overflow = \"hidden\";\n        setAnimationState(\"entrance\");\n\n        setTimeout(() => {\n          if (containerRef.current) {\n            containerRef.current.focus();\n          }\n        }, 100);\n      } else {\n        document.body.style.overflow = \"unset\";\n        handleDismiss(false);\n      }\n    }, [handleDismiss, show]);\n\n    if (!portal) return null;\n    return createPortal(\n      (show && animationState) || animationState ? (\n        <div\n          role={\"dialog\"}\n          aria-modal={\"true\"}\n          onClick={handleContainerClick}\n          tabIndex={-1}\n          ref={containerRef}\n          {...bindings}\n          {...props}\n        >\n          <DrawerContent\n            animationState={animationState}\n            height={height}\n            tabIndex={0}\n          >\n            {children}\n          </DrawerContent>\n        </div>\n      ) : null,\n      portal,\n    );\n  },\n)<DrawerProps>`\n  top: 0px;\n  left: 0px;\n  width: 100vw;\n  min-height: 100vh;\n  min-height: -webkit-fill-available;\n  position: fixed;\n  z-index: 101;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nexport const DrawerContent = styled.div<{\n  animationState: \"entrance\" | \"exit\";\n  height?: number;\n}>`\n  width: 100%;\n  max-width: 100%;\n  background-color: ${({ theme }) => theme.colors.layout.darkest};\n  color: ${({ theme }) => theme.colors.layout.lightest};\n  display: flex;\n  flex-direction: column;\n  border-top: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  border-radius: 5px 5px 0 0;\n  overflow: hidden;\n  overflow-y: auto;\n  animation-duration: 0.2s;\n  animation-fill-mode: both;\n  animation-name: ${({ animationState }) =>\n    animationState === \"entrance\" ? slideInUp : slideOutDown};\n  ${({ height }) => height && `height: ${height}px`};\n`;\n\nDrawerComponent.displayName = \"KitchnDrawer\";\nexport const Drawer = withDecorator(DrawerComponent);\nexport default Drawer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  DecoratorProps,\n  handleValue,\n  withDecorator,\n} from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\n\ntype Props = {\n  /**\n   * The skeleton's appearance (if it's shown or not).\n   */\n  show?: boolean;\n\n  /**\n   * The skeleton's width.\n   */\n  width?: DecoratorProps[\"width\"];\n\n  /**\n   * The skeleton's width.\n   */\n  w?: DecoratorProps[\"w\"];\n\n  /**\n   * The skeleton's height.\n   */\n  height?: DecoratorProps[\"height\"];\n\n  /**\n   * The skeleton's height.\n   */\n  h?: DecoratorProps[\"h\"];\n\n  /**\n   * The skeleton's box height.\n   */\n  boxHeight?: number;\n\n  /**\n   * The skeleton's mode (animated or not).\n   */\n  animated?: boolean;\n\n  /**\n   * The skeleton's shape.\n   */\n  shape?: \"normal\" | \"square\" | \"round\";\n\n  /**\n   * The skeleton's children.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * The skeleton's key.\n   */\n  [key: string]: any;\n};\n\nexport type SkeletonProps = KitchnComponent<Props>;\n\nconst SkeletonComponent = styled(\n  ({\n    as: Component = \"span\",\n    children,\n    width,\n    w,\n    height,\n    h,\n    show = true,\n    animated: _animated = true,\n    // Prevents the 'boxHeight' prop from being passed to the DOM element\n    boxHeight: _boxHeight,\n    ...props\n  }: SkeletonProps) => {\n    if (!show && !children) return <></>;\n    if (!show && children) return children as JSX.Element;\n    return (\n      <Component\n        role={\"status\"}\n        aria-busy={show ? \"true\" : \"false\"}\n        aria-hidden={!show}\n        width={width || w}\n        height={height || h}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  },\n)<SkeletonProps>`\n  position: relative;\n  display: block;\n  user-select: none;\n  cursor: default;\n  overflow: hidden;\n  border-radius: ${({ shape, theme }) =>\n    shape === \"square\"\n      ? \"0\"\n      : shape === \"round\"\n        ? theme.radius.round\n        : theme.radius.square};\n\n  ${({ children, shape, width, w, height, h, theme, animated = true }) =>\n    children\n      ? `\n        width: ${width ? \"100%\" : \"auto\"};\n        max-width: ${width ? handleValue(theme, width || w) : \"unset\"};\n        min-height: ${height ? handleValue(theme, height || h) : \"auto\"};\n        &::before {\n          content: \"\";\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          z-index: 100;\n          user-select: none;\n          cursor: default;\n          border-radius: ${\n            shape === \"square\"\n              ? \"0\"\n              : shape === \"round\"\n                ? theme.radius.round\n                : theme.radius.square\n          };\n          background-image: linear-gradient(\n            270deg,\n            ${theme.colors.layout.darkest},\n            ${theme.colors.layout.dark},\n            ${theme.colors.layout.dark},\n            ${theme.colors.layout.darkest}\n          );\n          background-size: 400% 100%;\n          animation: ${animated ? \"skeleton 8s ease-in-out infinite\" : \"none\"};\n        }\n      `\n      : `\n        width: 100%;\n        max-width: ${width ? handleValue(theme, width || w) : \"24px\"};\n        min-height: ${height ? handleValue(theme, height || h) : \"24px\"};\n        background-size: 400% 100%;\n        background-image: linear-gradient(\n          270deg,\n          ${theme.colors.layout.darkest},\n          ${theme.colors.layout.dark},\n          ${theme.colors.layout.dark},\n          ${theme.colors.layout.darkest}\n        );\n        animation: ${animated ? \"skeleton 8s ease-in-out infinite\" : \"none\"};\n  `}\n\n  ${({ boxHeight, height }) =>\n    boxHeight &&\n    height &&\n    `margin-bottom: calc(${boxHeight}px - ${height || 24}px);`}\n\n  @keyframes skeleton {\n    0% {\n      background-position: 200% 0;\n    }\n    to {\n      background-position: -200% 0;\n    }\n  }\n`;\n\nSkeletonComponent.displayName = \"KitchnSkeleton\";\nexport const Skeleton = withDecorator(SkeletonComponent, [\n  \"width\",\n  \"w\",\n  \"height\",\n  \"h\",\n]);\nexport default Skeleton;\n","import React from \"react\";\nimport { RiMoreLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc\";\nimport { KitchnComponent } from \"../../types\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Icon from \"../Icon\";\nimport { Menu } from \"../Menu\";\nimport Skeleton from \"../Skeleton\";\n\ntype Props = {\n  thumbnail?: React.ReactNode;\n  menuContent?: React.ReactNode;\n  actions?: React.ReactNode;\n  checkbox?: React.ReactNode;\n  placeholder?: boolean;\n};\n\nexport type EntityProps = KitchnComponent<Props, ContainerProps>;\n\nconst EntityComponent = styled(\n  ({\n    checkbox,\n    children,\n    thumbnail,\n    menuContent,\n    actions,\n    placeholder = false,\n    ...rest\n  }: EntityProps) => {\n    const childrenWithProps = React.Children.map(children, (child) => {\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child as React.ReactElement<any>, {\n          placeholder,\n        });\n      }\n      return child;\n    });\n\n    return (\n      <Container bg={\"darkest\"} p={\"normal\"} bw={1} br={\"square\"} {...rest}>\n        <Container gap={\"small\"} align={\"center\"} row>\n          <Skeleton show={placeholder}>{checkbox}</Skeleton>\n          <Skeleton show={placeholder}>{thumbnail}</Skeleton>\n          {childrenWithProps}\n          <Skeleton show={placeholder}>{actions}</Skeleton>\n          <Skeleton show={placeholder}>\n            {menuContent && (\n              <Menu.Container placement={\"bottomEnd\"}>\n                <Menu.Button type={\"dark\"} variant={\"ghost\"} size={\"small\"}>\n                  <Icon icon={RiMoreLine} />\n                </Menu.Button>\n                <Menu.Content width={200}>{menuContent}</Menu.Content>\n              </Menu.Container>\n            )}\n          </Skeleton>\n        </Container>\n      </Container>\n    );\n  },\n)``;\n\nconst EntityComponentWrapper = styled(EntityComponent)`\n  &${EntityComponent}+${EntityComponent} {\n    position: relative;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    &::before {\n      content: \"\";\n      height: calc(${({ theme }) => theme.radius.square} - 1px);\n      display: block;\n      position: absolute;\n      left: -1px;\n      right: -1px;\n      top: calc(${({ theme }) => theme.radius.square} * -1);\n      background: ${({ theme }) => theme.colors.layout.darkest};\n      border-left: 1px solid ${({ theme }) => theme.colors.layout.dark};\n      border-right: 1px solid ${({ theme }) => theme.colors.layout.dark};\n    }\n  }\n`;\n\nEntityComponentWrapper.displayName = \"KitchnEntity\";\nexport const Entity = withDecorator(EntityComponentWrapper);\nexport default Entity;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { usePrevious } from \"../../hooks/usePrevious\";\nimport { isUnplacedRect, ReactiveDomReact } from \"../../hooks/useRect\";\nimport { KitchnComponent } from \"../../types\";\n\nexport type HighlightProps = KitchnComponent<{\n  rect: ReactiveDomReact;\n  visible?: boolean;\n  hoverHeightRatio?: number;\n  hoverWidthRatio?: number;\n  activeOpacity?: number;\n}>;\n\nexport type HighlightPosition = {\n  width: string;\n  left: string;\n  height: string;\n  top: string;\n  transition: string;\n};\n\nconst HighlightComponent = styled(\n  ({\n    rect,\n    visible,\n    hoverHeightRatio = 1,\n    hoverWidthRatio = 1,\n    activeOpacity = 0.8,\n    ...props\n  }: HighlightProps) => {\n    const ref = React.useRef<HTMLDivElement | null>(null);\n    const isFirstVisible = usePrevious<boolean>(isUnplacedRect(rect));\n    const width = rect.width * hoverWidthRatio;\n    const height = rect.height * hoverHeightRatio;\n    return (\n      <HighlightContainer\n        role={\"presentation\"}\n        aria-hidden={!visible}\n        ref={ref}\n        width={width}\n        height={height}\n        left={rect.left + (rect.width - width) / 2}\n        top={rect.elementTop + (rect.height - height) / 2}\n        transition={isFirstVisible ? \"opacity\" : \"opacity, width, left, top\"}\n        visible={visible}\n        activeOpacity={activeOpacity}\n        {...props}\n      />\n    );\n  },\n)<HighlightProps>`\n  opacity: ${({ visible, activeOpacity }) => (visible ? activeOpacity : 0)};\n`;\n\nexport const HighlightContainer = styled.div<HighlightPosition>`\n  position: absolute;\n  background-color: ${({ theme }) => theme.colors.layout.dark};\n  border-radius: ${({ theme }) => theme.radius.square};\n  width: ${({ width }) => width}px;\n  height: ${({ height }) => height}px;\n  left: ${({ left }) => left}px;\n  top: ${({ top }) => top}px;\n  transition: 0.15s ease;\n  transition-property: ${({ transition }) => transition};\n`;\n\nHighlightComponent.displayName = \"KitchnHighlight\";\nexport const Highlight = withDecorator(HighlightComponent);\nexport default Highlight;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useRect } from \"../../hooks/useRect\";\nimport { KitchnComponent } from \"../../types\";\nimport { isString } from \"../../utils\";\nimport { capitalize } from \"../../utils/capitalize\";\nimport Highlight from \"../Highlight\";\n\nexport type TabProps = KitchnComponent<\n  {\n    title: React.ReactNode;\n    value: string;\n    icon?: JSX.Element;\n  },\n  React.HTMLProps<HTMLDivElement>\n>;\n\ntype Props = {\n  tabs: TabProps[];\n  selected: string;\n  setSelected: React.Dispatch<React.SetStateAction<string>>;\n  active?: boolean;\n  disabled?: boolean;\n  hoverHeightRatio?: number;\n  hoverWidthRatio?: number;\n  highlight?: boolean;\n};\n\nexport type TabsProps = KitchnComponent<Props>;\n\nconst TabsComponent = styled(\n  ({\n    tabs,\n    disabled = false,\n    selected,\n    setSelected,\n    hoverHeightRatio = 0.7,\n    hoverWidthRatio = 1.05,\n    highlight = true,\n    ...props\n  }: TabsProps) => {\n    const containerRef = React.useRef<HTMLDivElement | null>(null);\n    const [displayHighlight, setDisplayHighlight] =\n      React.useState<boolean>(false);\n    const { rect, setRect } = useRect();\n\n    const tabItemMouseOverHandler = (\n      event: React.MouseEvent<HTMLDivElement>,\n    ) => {\n      if (!event.target) return;\n      setRect(event, () => containerRef.current);\n      if (highlight) {\n        setDisplayHighlight(true);\n      }\n    };\n\n    const handleClick = (\n      event: React.MouseEvent<HTMLDivElement>,\n      tab: Omit<TabProps, \"title\" | \"icon\">,\n    ) => {\n      disabled ? event.preventDefault() : setSelected(tab.value);\n    };\n\n    return (\n      <div\n        role={\"tablist\"}\n        ref={containerRef}\n        onMouseLeave={() => setDisplayHighlight(false)}\n        {...props}\n      >\n        <Highlight\n          rect={rect}\n          visible={displayHighlight}\n          hoverHeightRatio={hoverHeightRatio}\n          hoverWidthRatio={hoverWidthRatio}\n        />\n        {tabs &&\n          tabs.map(({ title, icon, ...tabProps }) => (\n            <Tab\n              role={\"tab\"}\n              key={tabProps.value}\n              onClick={(event: React.MouseEvent<HTMLDivElement>) =>\n                handleClick(event, tabProps)\n              }\n              active={selected === tabProps.value}\n              onMouseOver={tabItemMouseOverHandler}\n              disabled={disabled}\n              {...tabProps}\n            >\n              <>{icon && icon}</>\n              <>{isString(title) ? capitalize(title as string) : title}</>\n            </Tab>\n          ))}\n      </div>\n    );\n  },\n)<TabsProps>`\n  position: relative;\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: baseline;\n  color: ${({ theme }) => theme.colors.accent.dark};\n  font-weight: ${({ theme }) => theme.weight.medium};\n  padding-bottom: 1px;\n  box-shadow: 0 -1px 0 ${({ theme }) => theme.colors.layout.dark} inset;\n`;\n\nexport const Tab = styled.div<{ active?: boolean; disabled: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  cursor: ${({ disabled }) => (disabled ? \"default\" : \"pointer\")};\n  color: ${({ theme, active, disabled }) => {\n    if (disabled) return theme.colors.text.darker;\n    if (active) return theme.colors.text.lightest;\n    return theme.colors.text.light;\n  }};\n  margin: 0 0 -1px;\n  user-select: none;\n  padding: 6px ${({ theme }) => theme.gap.small};\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  margin-bottom: -1px;\n  outline: 0;\n  white-space: nowrap;\n  border-bottom: ${({ theme, active }) =>\n    `1px solid ${active ? theme.colors.layout.lightest : \"transparent\"}`};\n  transition: all 0.2s;\n  z-index: 1;\n\n  svg {\n    max-height: 1em;\n    margin-right: ${({ theme }) => theme.gap.tiny};\n  }\n\n  &:hover {\n    color: ${({ theme, disabled }) =>\n      !disabled ? theme.colors.text.lightest : theme.colors.text.darker};\n  }\n`;\n\nTabsComponent.displayName = \"KitchnTabs\";\nexport const Tabs = withDecorator(TabsComponent);\nexport default Tabs;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { convertRGBToRGBA, withDecorator } from \"../..\";\nimport { AccentColors, KitchnComponent } from \"../../types\";\nimport { Container, ContainerProps } from \"../Container\";\nimport { Tab, Tabs } from \"../Tabs\";\nimport { Text, TextProps } from \"../Text\";\n\ntype Props = {\n  tabs?: boolean;\n  disabled?: boolean;\n  highlight?: boolean;\n  type?: keyof AccentColors;\n  children?: React.ReactNode;\n};\n\nexport type FieldsetProps = KitchnComponent<Props>;\n\nconst FieldsetFooterActions = styled(\n  ({ children, ...props }: ContainerProps) => {\n    return (\n      <Container ml={\"auto\"} gap={\"normal\"} row {...props}>\n        {children}\n      </Container>\n    );\n  },\n)``;\n\nconst FieldsetFooterStatus = styled(({ children, ...props }: TextProps) => {\n  return (\n    <Text color={\"lighter\"} {...props}>\n      {children}\n    </Text>\n  );\n})`\n  font-size: ${({ theme }) => theme.size.small};\n  align-self: center;\n`;\n\nconst FieldsetFooter = styled.footer<{\n  disabled?: boolean;\n  highlight?: boolean;\n}>`\n  display: flex;\n  justify-content: space-between;\n  padding: 12px 24px;\n  border-top: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  cursor: ${({ disabled }) => disabled && \"not-allowed\"};\n  background: ${({ theme, disabled, highlight }) =>\n    disabled\n      ? theme.colors.layout.darkest\n      : highlight\n        ? theme.colors.layout.darkest\n        : theme.colors.layout.darker};\n`;\n\nconst FieldsetComponent = styled(\n  ({\n    children,\n    // Prevents the 'tabs' prop from being passed down to the DOM element\n    tabs: _tabs,\n    ...props\n  }: FieldsetProps) => {\n    return (\n      <div role={\"group\"} {...props}>\n        {children}\n      </div>\n    );\n  },\n)<FieldsetProps>`\n  overflow: hidden;\n  position: relative;\n  box-sizing: border-box;\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  border-color: ${({ theme, type }) => type && theme.colors.accent[type]};\n  border-radius: ${({ theme }) => theme.radius.square};\n  ${({ tabs }) =>\n    tabs &&\n    `\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  `}\n  background: ${({ theme }) => theme.colors.layout.darkest};\n  cursor: ${({ disabled }) => disabled && \"not-allowed\"};\n\n  ${FieldsetFooter} {\n    border-color: ${({ theme, type }) => type && theme.colors.accent[type]};\n    background-color: ${({ theme, type }) =>\n      type && convertRGBToRGBA(theme.colors.accent[type], 0.2)};\n\n    ${FieldsetFooterStatus} {\n      color: ${({ theme, type }) => type && theme.colors.accent[type]};\n    }\n  }\n`;\n\nconst FieldsetContent = styled(Container)<{ disabled?: boolean }>`\n  padding: 24px;\n  cursor: ${({ disabled }) => disabled && \"not-allowed\"};\n  background: ${({ theme, disabled }) =>\n    disabled && theme.colors.layout.darker};\n`;\n\nconst FieldsetTitle = styled(({ children, ...props }: TextProps) => {\n  return (\n    <Text h4 {...props}>\n      {children}\n    </Text>\n  );\n})<{ disabled?: boolean }>`\n  font-size: ${({ theme }) => theme.size.medium};\n  font-weight: ${({ theme }) => theme.weight.semiBold};\n`;\n\nconst FieldsetSubtitle = styled(Text)`\n  font-size: ${({ theme }) => theme.size.small};\n  margin: 12px 0;\n`;\n\nexport const isFieldsetContainer = (\n  child: React.ReactNode,\n): child is React.ReactElement<any> => {\n  return React.isValidElement(child) && child.type === Fieldset.Container;\n};\n\nexport type FieldsetTabsProps = KitchnComponent<\n  {\n    tabs: string[];\n  },\n  ContainerProps\n>;\n\nconst FieldsetTabs = styled(\n  ({ children, tabs, ...props }: FieldsetTabsProps) => {\n    const [selected, setSelected] = React.useState(String(0)); // Initialize with index of the first tab\n    const childrenArray = React.Children.toArray(children);\n\n    return (\n      <Container {...props}>\n        <Tabs\n          tabs={tabs.map((tab, i) => {\n            return { title: tab, value: String(i) };\n          })}\n          selected={selected}\n          setSelected={setSelected}\n        />\n        {childrenArray.map((child, i) => {\n          if (isFieldsetContainer(child) && selected === String(i)) {\n            return React.cloneElement(child, { tabs: true });\n          } else {\n            return null;\n          }\n        })}\n      </Container>\n    );\n  },\n)`\n  ${Tabs} {\n    padding: 8px 16px 0;\n    background: ${({ theme }) => theme.colors.layout.darkest};\n    box-shadow: none;\n    border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n    border-bottom: none;\n    border-top-left-radius: ${({ theme }) => theme.radius.square};\n    border-top-right-radius: ${({ theme }) => theme.radius.square};\n\n    ${Tab} {\n      font-size: ${({ theme }) => theme.size.compact};\n    }\n  }\n`;\n\nexport const Fieldset = {\n  Container: withDecorator(FieldsetComponent),\n  Content: withDecorator(FieldsetContent),\n  Title: withDecorator(FieldsetTitle),\n  Subtitle: withDecorator(FieldsetSubtitle),\n  Footer: withDecorator(FieldsetFooter),\n  FooterStatus: withDecorator(FieldsetFooterStatus),\n  FooterActions: withDecorator(FieldsetFooterActions),\n  Tabs: withDecorator(FieldsetTabs),\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useBreakpoint } from \"../../hooks/useBreakpoint\";\nimport { KitchnComponent } from \"../../types\";\nimport Collapse from \"../Collapse\";\nimport Link, { LinkProps } from \"../Link\";\n\ntype Props = {\n  /**\n   * The subfooter of the footer.\n   */\n  subfooter?: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nexport type FooterProps = KitchnComponent<Props>;\n\nconst FooterComponent = styled(\n  ({ children, subfooter, ...props }: FooterProps) => {\n    return (\n      <footer role={\"contentinfo\"} {...props}>\n        <FooterNav>{children}</FooterNav>\n        {subfooter && <SubFooter>{subfooter}</SubFooter>}\n      </footer>\n    );\n  },\n)<FooterProps>`\n  position: relative;\n  box-sizing: border-box;\n  padding: ${({ theme }) => theme.gap.normal} 0;\n`;\n\nexport const FooterNav = styled.nav`\n  max-width: ${({ theme }) => theme.breakpoint.desktop};\n  margin: 0 auto;\n  flex-wrap: nowrap;\n  gap: ${({ theme }) => theme.gap.small};\n  padding: 0 ${({ theme }) => theme.gap.large};\n  display: grid;\n  grid-template-columns: ${({ children }) =>\n    `repeat(${Math.min(React.Children.count(children), 4)}, 1fr)`};\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.laptop}) {\n    grid-template-columns: ${({ children }) =>\n      `repeat(${Math.min(React.Children.count(children), 3)}, 1fr)`};\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.tablet}) {\n    grid-template-columns: ${({ children }) =>\n      `repeat(${Math.min(React.Children.count(children), 2)}, 1fr)`};\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}) {\n    gap: 0;\n    grid-template-columns: ${({ children }) =>\n      `repeat(${Math.min(React.Children.count(children), 1)}, 1fr)`};\n  }\n`;\n\nexport const FooterColumn = styled.div``;\n\ntype GroupProps = {\n  title: string;\n};\nexport type FooterGroupProps = KitchnComponent<GroupProps>;\nexport const FooterGroup = styled(\n  ({ title, children, ...props }: FooterGroupProps) => {\n    const { isMobile } = useBreakpoint();\n    if (isMobile) {\n      return (\n        <Collapse title={title}>\n          <FooterList>{children}</FooterList>\n        </Collapse>\n      );\n    } else\n      return (\n        <div {...props}>\n          <label htmlFor={title}>\n            <FooterGroupTitle>{title}</FooterGroupTitle>\n          </label>\n          <FooterList>{children}</FooterList>\n        </div>\n      );\n  },\n)<FooterGroupProps>``;\n\nexport const FooterGroupTitle = styled.h2`\n  margin: ${({ theme }) => theme.gap.small} 0;\n  font-weight: ${({ theme }) => theme.weight.medium};\n`;\n\nconst FooterList = styled.ul`\n  color: ${({ theme }) => theme.colors.text.light};\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  gap: ${({ theme }) => theme.gap.tiny} ${({ theme }) => theme.gap.small};\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport type FooterLinkProps = KitchnComponent<\n  {\n    href: LinkProps[\"href\"];\n  },\n  React.HTMLProps<HTMLLIElement>\n>;\n\nexport const FooterLink = styled(\n  ({ children, href, ...props }: FooterLinkProps) => {\n    return (\n      <li role={\"listitem\"} {...props}>\n        <Link href={href}>{children}</Link>\n      </li>\n    );\n  },\n)`\n  ${Link} {\n    color: ${({ theme }) => theme.colors.text.lighter};\n    font-size: ${({ theme }) => theme.size.compact};\n    text-decoration: none;\n  }\n`;\n\nexport const SubFooter = styled.section`\n  font-size: ${({ theme }) => theme.size.small};\n  max-width: ${({ theme }) => theme.breakpoint.desktop};\n  margin: 0 auto;\n  margin-top: ${({ theme }) => theme.gap.normal};\n  padding: 0 ${({ theme }) => theme.gap.large};\n`;\n\nFooterComponent.displayName = \"KitchnFooter\";\nexport const Footer = withDecorator(FooterComponent);\nexport default Footer;\n","import React, { forwardRef } from \"react\";\nimport { RiEyeCloseLine, RiEyeLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport Input, { InputProps } from \"..\";\nimport { withDecorator } from \"../../../hoc\";\nimport { KitchnComponent } from \"../../../types\";\n\ntype Props = {\n  hideToggle?: boolean;\n};\n\nexport type InpuPasswordProps = KitchnComponent<Props, InputProps>;\n\nconst ForwardedInputPassword = forwardRef<HTMLInputElement, InpuPasswordProps>(\n  (\n    { hideToggle = false, ...props }: InpuPasswordProps,\n    ref: React.Ref<HTMLInputElement | null>,\n  ) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [visible, setVisible] = React.useState<boolean>(false);\n    React.useImperativeHandle(ref, () => inputRef.current);\n\n    const iconClickHandler = () => {\n      setVisible((v) => !v);\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n\n    const inputProps = React.useMemo(\n      () => ({\n        ...props,\n        ref: inputRef,\n        clickableIcon: true,\n        onIconClick: iconClickHandler,\n        htmlType: visible ? \"text\" : \"password\",\n      }),\n      [props, iconClickHandler, visible, inputRef],\n    );\n\n    const icon = React.useMemo(() => {\n      if (hideToggle) return null;\n      return visible ? RiEyeLine : RiEyeCloseLine;\n    }, [hideToggle, visible]);\n\n    return <Input suffixIcon={icon} {...props} {...inputProps} />;\n  },\n);\n\nForwardedInputPassword.displayName = \"PasswordInput\";\n\nconst InputComponent = styled(ForwardedInputPassword)``;\n\nInputComponent.displayName = \"KitchnPasswordInput\";\nexport const PasswordInput = withDecorator(InputComponent);\nexport default PasswordInput;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../../types\";\n\nexport type ListItemProps = KitchnComponent<\n  object,\n  React.LiHTMLAttributes<HTMLElement>\n>;\n\nconst ListItemComponent = styled((props: ListItemProps) => {\n  return <li role={\"listitem\"} {...props} />;\n})`\n  margin-top: 10px;\n  &:first-child {\n    margin-top: 0;\n  }\n`;\n\nListItemComponent.displayName = \"KitchnListItem\";\nexport const ListItem = withDecorator(ListItemComponent);\nexport default ListItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../../types\";\n\nexport type OrderedListProps = KitchnComponent<\n  object,\n  React.OlHTMLAttributes<HTMLElement>\n>;\n\nconst OrderedListComponent = styled((props: OrderedListProps) => {\n  return <ol role={\"list\"} {...props} />;\n})`\n  padding: 0;\n  margin: 15px;\n  margin-left: 25px;\n  list-style-type: decimal;\n`;\n\nOrderedListComponent.displayName = \"KitchnOrderedList\";\nexport const OrderedList = withDecorator(OrderedListComponent);\nexport default OrderedList;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../../types\";\nimport ListItem from \"../Item\";\n\nexport type UnorderedListProps = KitchnComponent<\n  object,\n  React.OlHTMLAttributes<HTMLElement>\n>;\n\nconst UnorderedListComponent = styled((props: UnorderedListProps) => {\n  return <ul role={\"list\"} {...props} />;\n})`\n  padding: 0;\n  list-style-type: none;\n  margin: 15px;\n  margin-left: 25px;\n  ${ListItem}::before {\n    content: \"-\";\n    color: ${(props) => props.theme.colors.text.darker};\n    margin-left: -15px;\n    display: inline-block;\n    position: absolute;\n  }\n`;\n\nUnorderedListComponent.displayName = \"KitchnUnorderedList\";\nexport const UnorderedList = withDecorator(UnorderedListComponent);\nexport default UnorderedList;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useBreakpoint } from \"../../hooks/useBreakpoint\";\nimport { useKeyboard } from \"../../hooks/useKeyboard\";\nimport { usePortal } from \"../../hooks/usePortal\";\nimport { KitchnComponent } from \"../../types\";\nimport { fadeInDown, fadeOutUp } from \"../../utils/animate\";\nimport { KeyCode } from \"../../utils/codes\";\nimport Button, { ButtonProps } from \"../Button\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Drawer from \"../Drawer\";\nimport Text, { TextProps } from \"../Text\";\n\ntype Props = {\n  active: boolean;\n  onAnimationDone?: () => void;\n  onClickOutside?: () => void;\n  onEnterKeyPress?: () => void;\n  children?: React.ReactNode;\n};\n\nexport type ModalProps = KitchnComponent<Props>;\n\nconst ModalComponent = styled(\n  ({\n    active,\n    children,\n    onClickOutside,\n    onEnterKeyPress,\n    onAnimationDone,\n    ...props\n  }: ModalProps) => {\n    const portal = usePortal(\"modal\");\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const { isMobile } = useBreakpoint();\n\n    const [animationState, setAnimationState] = React.useState<\n      \"entrance\" | \"exit\" | null\n    >(null);\n\n    const handleDismiss = React.useCallback(\n      (isClickOutside = true) => {\n        if (animationState) setAnimationState(\"exit\");\n        if (isClickOutside && onClickOutside) onClickOutside();\n        setTimeout(() => {\n          setAnimationState(null);\n          if (onAnimationDone) onAnimationDone();\n        }, 210);\n      },\n      [animationState, onClickOutside, onAnimationDone],\n    );\n\n    const handleContainerClick = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (e.target === e.currentTarget) {\n        handleDismiss();\n      }\n    };\n\n    React.useEffect(() => {\n      if (isMobile) setAnimationState(null);\n      if (active) {\n        document.body.style.overflow = \"hidden\";\n        setAnimationState(\"entrance\");\n\n        setTimeout(() => {\n          if (containerRef.current) {\n            containerRef.current.focus();\n          }\n        }, 100);\n      } else {\n        document.body.style.overflow = \"unset\";\n        handleDismiss(false);\n      }\n    }, [active, animationState, handleDismiss, isMobile, onAnimationDone]);\n\n    const { bindings } = useKeyboard(\n      (e) => {\n        switch (e.keyCode) {\n          case KeyCode.Enter:\n            onEnterKeyPress && onEnterKeyPress();\n            break;\n          case KeyCode.Escape:\n            onClickOutside && onClickOutside();\n            break;\n        }\n      },\n      [KeyCode.Escape, KeyCode.Enter],\n      {\n        disableGlobalEvent: true,\n      },\n    );\n\n    if (!portal) return null;\n\n    if (isMobile) {\n      return (\n        <Drawer\n          show={active}\n          onDismiss={handleDismiss}\n          onAnimationDone={onAnimationDone}\n          {...bindings}\n        >\n          {children}\n        </Drawer>\n      );\n    }\n\n    return createPortal(\n      (active && animationState) || animationState ? (\n        <div\n          role={\"dialog\"}\n          aria-modal={\"true\"}\n          onClick={handleContainerClick}\n          ref={containerRef}\n          tabIndex={-1}\n          {...bindings}\n          {...props}\n        >\n          <ModalContent animationState={animationState}>\n            <ModalOverflow>{children}</ModalOverflow>\n          </ModalContent>\n        </div>\n      ) : null,\n      portal,\n    );\n  },\n)`\n  top: 0px;\n  left: 0px;\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  z-index: 10;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nconst ModalContent = styled.div<{\n  animationState: \"entrance\" | \"exit\";\n}>`\n  width: 540px;\n  max-height: 80vh;\n  max-width: 100%;\n  background-color: ${({ theme }) => theme.colors.layout.darkest};\n  color: ${({ theme }) => theme.colors.layout.lightest};\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  overflow: hidden;\n  overflow-y: auto;\n  animation-duration: 0.2s;\n  animation-fill-mode: both;\n  animation-name: ${({ animationState }) =>\n    animationState === \"entrance\" ? fadeInDown : fadeOutUp};\n`;\n\nconst ModalOverflow = styled.div`\n  overflow: auto;\n  display: block;\n`;\n\nconst ModalBody = styled.div`\n  padding: 20px;\n`;\n\nconst ModalHeader = styled(({ ...props }: ContainerProps) => (\n  <Container header gap={\"small\"} mb={\"small\"} {...props} />\n))``;\n\nconst ModalTitle = styled(({ ...props }: TextProps) => (\n  <Text h3 size={\"large\"} weight={\"semiBold\"} {...props} />\n))``;\n\nconst ModalSubtitle = styled(({ ...props }: TextProps) => (\n  <Text {...props} />\n))``;\n\nconst ModalActions = styled.footer`\n  position: sticky;\n  bottom: 0;\n  border-top: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  background-color: ${({ theme }) => theme.colors.layout.darker};\n  padding: 16px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n  overflow: hidden;\n`;\n\nexport type ModalActionProps = KitchnComponent<\n  {\n    disabled?: boolean;\n  },\n  ButtonProps\n>;\n\nconst ModalAction = styled((props: ModalActionProps) => {\n  return <Button {...props} />;\n})<ModalActionProps>``;\n\nconst ModalInset = styled.div`\n  padding: 20px;\n  border-top: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  background-color: ${({ theme }) => theme.colors.layout.darker};\n  margin: 0 -20px;\n`;\n\nexport const Modal = {\n  Modal: withDecorator(ModalComponent),\n  Body: withDecorator(ModalBody),\n  Header: withDecorator(ModalHeader),\n  Title: withDecorator(ModalTitle),\n  Subtitle: withDecorator(ModalSubtitle),\n  Actions: withDecorator(ModalActions),\n  Action: withDecorator(ModalAction),\n  Inset: withDecorator(ModalInset),\n};\n\nexport default Modal;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { DecoratorProps } from \"../../../hoc\";\nimport useNavigationMenu from \"../../../hooks/useNavigationMenu\";\nimport useNavigationMenuItem from \"../../../hooks/useNavigationMenuItem\";\nimport { getId } from \"../../../utils\";\nimport Button, { ButtonProps } from \"../../Button\";\nimport Icon, { IconProps } from \"../../Icon\";\nimport Text from \"../../Text\";\n\nexport type NavigationMenuButtonProps = {\n  active?: boolean;\n  disabled?: boolean;\n  id?: string;\n  children?: React.ReactNode;\n} & (\n  | ({\n      unstyled?: true;\n    } & React.PropsWithChildren)\n  | ({\n      unstyled?: false;\n    } & ButtonProps &\n      DecoratorProps)\n);\n\nconst NavigationMenuButton = styled(\n  ({ active, disabled, unstyled, id, ...props }: NavigationMenuButtonProps) => {\n    const { handleMouseOver, setTooltipContent } = useNavigationMenu();\n    const { id: itemId, hasContent, position } = useNavigationMenuItem();\n    const buttonId = itemId || id || getId();\n\n    const handleHover = (e: React.MouseEvent<HTMLElement>) => {\n      // Clear tooltip content if this is a simple button without dropdown content\n      if (!hasContent) {\n        setTooltipContent(null);\n      }\n      handleMouseOver(e, buttonId);\n    };\n\n    if (unstyled && props.children) {\n      return React.cloneElement(props.children as React.ReactElement, {\n        ...props,\n        onMouseOver: handleHover,\n      });\n    }\n\n    return (\n      <Button\n        size={\"small\"}\n        shape={\"round\"}\n        variant={\"ghost\"}\n        role={\"menuitem\"}\n        active={\"foobar\"}\n        data-position={position}\n        onMouseOver={handleHover}\n        disabled={disabled}\n        {...props}\n      >\n        <Text size={\"inherit\"} color={active ? \"lightest\" : \"light\"} span>\n          {props.children}\n        </Text>\n      </Button>\n    );\n  },\n)`\n  border-width: 0;\n\n  &:hover {\n    border-width: 0;\n  }\n`;\n\nexport const NavigationMenuButtonIcon = styled(\n  ({ children, ...props }: IconProps) => {\n    const { activeId } = useNavigationMenu();\n    const { id: itemId } = useNavigationMenuItem();\n    const isActive = activeId === itemId;\n\n    return (\n      <Icon\n        // TODO: Replace style by styled props\n        style={{\n          transform: isActive ? \"rotate(180deg)\" : \"none\",\n        }}\n        {...props}\n      >\n        {children}\n      </Icon>\n    );\n  },\n)`\n  transition: transform 0.3s;\n  color: ${({ theme }) => theme.colors.text.light};\n`;\n\nexport default NavigationMenuButton;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { NavigationMenuContext } from \"../../../contexts/NavigationMenu\";\nimport { DecoratorProps } from \"../../../hoc\";\nimport { useRect } from \"../../../hooks\";\nimport useNavigationMenu from \"../../../hooks/useNavigationMenu\";\nimport Container from \"../../Container\";\nimport Highlight from \"../../Highlight\";\nimport Tooltip, { TooltipProps } from \"../../Tooltip\";\nimport { TooltipContentInner } from \"../../Tooltip/Content\";\nimport TooltipIcon from \"../../Tooltip/Icon\";\n\nexport type NavigationMenuContainerProps = Omit<TooltipProps, \"text\"> &\n  DecoratorProps & {\n    hoverHeightRatio?: number;\n    hoverWidthRatio?: number;\n    highlight?: boolean;\n    children?: React.ReactNode;\n  };\n\nconst NavigationMenuContainer = styled(\n  ({ children, portalCss, ...props }: NavigationMenuContainerProps) => {\n    const {\n      tooltipContent,\n      displayHighlight,\n      isTooltipHovered,\n      handleTooltipMouseEnter,\n      handleTooltipMouseLeave,\n      handleMouseLeave,\n      rect,\n      containerRef,\n      hoverHeightRatio,\n      hoverWidthRatio,\n    } = useNavigationMenu();\n\n    const navigationMenuCss = css`\n      left: ${rect.left + (containerRef.current?.offsetLeft || 0)}px !important;\n      transform: translateX(0) !important;\n      transition: left 0.15s !important;\n\n      ${TooltipContentInner} {\n        padding: 0;\n\n        ${TooltipIcon} {\n          left: ${rect.width / 2}px;\n          transition: left 0.15s !important;\n        }\n      }\n\n      & > div {\n        pointer-events: all !important;\n      }\n    `;\n\n    const mergedPortalCss = css`\n      ${navigationMenuCss} ${portalCss}\n    `;\n\n    return (\n      <Tooltip\n        offset={8}\n        placement={\"bottom\"}\n        text={tooltipContent}\n        leaveDelay={0}\n        enterDelay={0}\n        visible={\n          tooltipContent !== null && (displayHighlight || isTooltipHovered)\n        }\n        portalCss={mergedPortalCss}\n        onMouseEnter={handleTooltipMouseEnter}\n        onMouseLeave={handleTooltipMouseLeave}\n        {...props}\n      >\n        <Container\n          onMouseLeave={handleMouseLeave}\n          ref={containerRef}\n          pos={\"relative\"}\n          w={\"100%\"}\n          nav\n        >\n          <Highlight\n            br={\"round\"}\n            rect={rect}\n            visible={displayHighlight}\n            hoverHeightRatio={hoverHeightRatio}\n            hoverWidthRatio={hoverWidthRatio}\n          />\n          {children}\n        </Container>\n      </Tooltip>\n    );\n  },\n)``;\n\nconst NavigationMenuContainerWithContext = ({\n  children,\n  hoverHeightRatio = 1,\n  hoverWidthRatio = 1,\n  highlight = true,\n  ...props\n}: NavigationMenuContainerProps) => {\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n  const [activeId, setActiveId] = React.useState<string | null>(null);\n  const [previousId, setPreviousId] = React.useState<string | null>(null);\n\n  const timeoutRef = React.useRef<number>();\n  const [displayHighlight, setDisplayHighlight] =\n    React.useState<boolean>(false);\n  const [tooltipContent, setTooltipContent] =\n    React.useState<React.ReactNode>(null);\n  const [isTooltipHovered, setIsTooltipHovered] = React.useState(false);\n  const [menuItems, setMenuItems] = React.useState<string[]>([]);\n  const { rect, setRect } = useRect();\n\n  // Clear any existing timeout to prevent stale closures\n  const clearTimeout = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = undefined;\n    }\n  };\n\n  // Clean up timeout on unmount\n  React.useEffect(() => {\n    return () => clearTimeout();\n  }, []);\n\n  const closeTooltip = React.useCallback(() => {\n    setDisplayHighlight(false);\n    setActiveId(null);\n    setTooltipContent(null);\n  }, []);\n\n  const handleMouseOver = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>, id: string) => {\n      clearTimeout();\n      if (!event.target) return;\n      if (activeId === id) return;\n      setRect(event, () => containerRef.current);\n      if (highlight) {\n        setDisplayHighlight(true);\n      }\n      setPreviousId(activeId);\n      setActiveId(id);\n    },\n    [activeId, highlight],\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    if (!isTooltipHovered) {\n      timeoutRef.current = window.setTimeout(() => {\n        closeTooltip();\n      }, 150);\n    }\n  }, [isTooltipHovered, closeTooltip]);\n\n  const handleTooltipMouseEnter = React.useCallback(() => {\n    clearTimeout();\n    setIsTooltipHovered(true);\n  }, []);\n\n  const handleTooltipMouseLeave = React.useCallback(() => {\n    setIsTooltipHovered(false);\n    timeoutRef.current = window.setTimeout(() => {\n      closeTooltip();\n    }, 100); // Small delay to handle edge cases\n  }, [closeTooltip]);\n\n  return (\n    <NavigationMenuContext.Provider\n      value={{\n        containerRef,\n        activeId,\n        previousId,\n        handleMouseOver,\n        handleMouseLeave,\n        handleTooltipMouseEnter,\n        handleTooltipMouseLeave,\n        tooltipContent,\n        setTooltipContent,\n        displayHighlight,\n        setDisplayHighlight,\n        isTooltipHovered,\n        setIsTooltipHovered,\n        rect,\n        setRect,\n        highlight,\n        hoverHeightRatio,\n        hoverWidthRatio,\n        menuItems,\n        setMenuItems,\n      }}\n    >\n      <NavigationMenuContainer {...props}>{children}</NavigationMenuContainer>\n    </NavigationMenuContext.Provider>\n  );\n};\n\nexport default NavigationMenuContainerWithContext;\n","import React from \"react\";\nimport styled, { css, keyframes, RuleSet } from \"styled-components\";\nimport { Keyframes } from \"styled-components/dist/types\";\n\nimport { DecoratorProps } from \"../../../hoc\";\nimport useNavigationMenu from \"../../../hooks/useNavigationMenu\";\nimport useNavigationMenuItem from \"../../../hooks/useNavigationMenuItem\";\nimport Container from \"../../Container\";\n\nconst enterFromRight = keyframes`\n  from {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n`;\n\nconst enterFromLeft = keyframes`\n  from {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n`;\n\nconst exitToRight = keyframes`\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n`;\n\nconst exitToLeft = keyframes`\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n`;\n\nexport const animationConfig = {\n  duration: \"250ms\", // Slightly faster for more snappy feel\n  easing: \"cubic-bezier(0.4, 0.0, 0.2, 1)\", // Smooth easing\n  delayBeforeRemove: 200, // Time to wait before removing from DOM\n};\n\n// Direction type for animation\nexport type AnimationDirection =\n  | \"normal\"\n  | \"reverse\"\n  | \"alternate\"\n  | \"alternate-reverse\";\n\n// Menu slide direction\nexport type MenuDirection = \"right\" | \"left\" | \"none\";\n\n// Animation config type\nexport interface AnimationConfig {\n  duration: string;\n  easing: string;\n}\n\n// Animation state interface\nexport interface AnimationState {\n  isEntering: boolean;\n  shouldRender: boolean;\n}\n\n// Return type for useMenuAnimation hook\nexport interface MenuAnimationResult extends AnimationState {\n  animationStyle: RuleSet<object>;\n}\n\nexport const createAnimationStyle = (\n  animation: Keyframes,\n  direction: AnimationDirection = \"normal\",\n) => css`\n  animation: ${animation} ${animationConfig.duration} ${animationConfig.easing}\n    ${direction} forwards;\n`;\n\nexport const useMenuAnimation = (\n  isVisible: boolean,\n  direction: MenuDirection = \"right\",\n): {\n  shouldRender: boolean;\n  isEntering: boolean;\n  direction: MenuDirection;\n} => {\n  const [animationState, setAnimationState] = React.useState<AnimationState>({\n    isEntering: false,\n    shouldRender: isVisible,\n  });\n\n  React.useEffect(() => {\n    let timer: number;\n\n    if (isVisible) {\n      // Immediately show and start enter animation\n      setAnimationState({\n        isEntering: true,\n        shouldRender: true,\n      });\n    } else {\n      // Start exit animation but keep rendered\n      setAnimationState({\n        isEntering: false,\n        shouldRender: true,\n      });\n\n      // Remove from DOM after animation completes\n      timer = window.setTimeout(() => {\n        setAnimationState({\n          isEntering: false,\n          shouldRender: false,\n        });\n      }, animationConfig.delayBeforeRemove);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isVisible]);\n\n  return {\n    ...animationState,\n    direction,\n  };\n};\n\n// StyledContent component using the animations\nexport const StyledContent = styled.ul<{\n  isEntering: boolean;\n  direction: MenuDirection;\n}>`\n  pointer-events: all;\n  display: flex;\n  flex-direction: row;\n  gap: ${({ theme }) => theme.gap.normal};\n  opacity: 0;\n  transform: translateX(\n    ${({ direction }) =>\n      direction === \"right\" ? \"100px\" : direction === \"left\" ? \"-100px\" : \"0\"}\n  );\n  ${({ isEntering, direction }) =>\n    direction !== \"none\"\n      ? isEntering\n        ? css`\n            animation: ${direction === \"right\" ? enterFromRight : enterFromLeft}\n              ${animationConfig.duration} ${animationConfig.easing} forwards;\n          `\n        : css`\n            animation: ${direction === \"right\" ? exitToRight : exitToLeft}\n              ${animationConfig.duration} ${animationConfig.easing} forwards;\n          `\n      : css`\n          opacity: 1;\n          transform: translateX(0);\n        `}\n`;\n\ntype NavigationMenuContentProps = {\n  children: React.ReactNode;\n  id?: string;\n} & DecoratorProps;\n\nconst NavigationMenuContent = ({\n  children,\n  id,\n  ...props\n}: NavigationMenuContentProps) => {\n  const { activeId, previousId, setTooltipContent, menuItems } =\n    useNavigationMenu();\n  const { id: itemId } = useNavigationMenuItem();\n  const contentId = itemId || id;\n  const isActive = activeId === contentId;\n\n  // Determine animation direction based on IDs\n  const getAnimationDirection = (): MenuDirection => {\n    if (!previousId || !activeId) return \"none\";\n\n    let previousIndex = -1;\n    let currentIndex = -1;\n\n    menuItems.forEach((item, index) => {\n      if (item === previousId) {\n        previousIndex = index;\n      }\n      if (item === activeId) {\n        currentIndex = index;\n      }\n    });\n\n    return previousIndex < currentIndex ? \"right\" : \"left\";\n  };\n\n  const { shouldRender, isEntering, direction } = useMenuAnimation(\n    isActive,\n    getAnimationDirection(),\n  );\n\n  const content = (shouldRender: boolean) => {\n    if (shouldRender) {\n      return (\n        <Container px={12} py={8} overflow={\"hidden\"}>\n          <StyledContent\n            {...props}\n            isEntering={isEntering}\n            direction={direction}\n          >\n            {children}\n          </StyledContent>\n        </Container>\n      );\n    }\n\n    return null;\n  };\n\n  React.useEffect(() => {\n    if (contentId && isActive) {\n      setTooltipContent(content(shouldRender));\n    }\n  }, [shouldRender, contentId, isActive]);\n\n  return null;\n};\n\nexport default NavigationMenuContent;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { NavigationMenuItemContext } from \"../../../contexts/NavigationMenuItem\";\nimport useNavigationMenu from \"../../../hooks/useNavigationMenu\";\nimport { getId } from \"../../../utils\";\nimport NavigationMenuContent from \"../Content\";\n\ntype NavigationMenuItemProps = {\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLLIElement>;\n\nconst NavigationMenuItem = styled.li`\n  padding: 0;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  position: relative;\n`;\n\nconst NavigationMenuItemWithContext = ({\n  children,\n  ...props\n}: NavigationMenuItemProps) => {\n  const { menuItems, setMenuItems } = useNavigationMenu();\n  const [itemId] = React.useState(getId());\n\n  const hasContent = React.Children.toArray(children).some(\n    (child) =>\n      React.isValidElement(child) && child.type === NavigationMenuContent,\n  );\n\n  React.useEffect(() => {\n    if (menuItems.includes(itemId)) return;\n    setMenuItems((prev) => {\n      const newItems = [...prev];\n      if (!newItems.includes(itemId)) {\n        newItems.push(itemId);\n      }\n      return newItems;\n    });\n\n    return () => {\n      setMenuItems((prev) => prev.filter((id) => id !== itemId));\n    };\n  }, []);\n\n  return (\n    <NavigationMenuItemContext.Provider\n      value={{\n        id: itemId,\n        hasContent,\n        position: menuItems.indexOf(itemId),\n      }}\n    >\n      <NavigationMenuItem data-id={itemId} {...props}>\n        {children}\n      </NavigationMenuItem>\n    </NavigationMenuItemContext.Provider>\n  );\n};\n\nexport default NavigationMenuItemWithContext;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport NavigationMenuButton, { NavigationMenuButtonIcon } from \"./Button\";\nimport NavigationMenuContainerWithContext from \"./Container\";\nimport NavigationMenuContent from \"./Content\";\nimport NavigationMenuItemWithContext from \"./Item\";\nimport { withDecorator } from \"../../hoc\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Icon, { IconProps } from \"../Icon\";\nimport Text, { TextProps } from \"../Text\";\n\nconst NavigationMenuList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nexport type NavigationMenuSectionProps = ContainerProps;\n\nconst NavigationMenuSection = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.gap.tiny};\n`;\n\nexport type NavigationMenuSectionHeaderProps = TextProps;\n\nconst NavigationMenuSectionHeader = styled(\n  ({ children, ...props }: NavigationMenuSectionHeaderProps) => (\n    <Text span size={\"small\"} color={\"lighter\"} {...props}>\n      {children}\n    </Text>\n  ),\n)``;\n\nconst NavigationMenuSectionContent = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.gap.tiny};\n`;\n\nconst NavigationMenuSectionItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.gap.small};\n  padding: ${({ theme }) => theme.gap.tiny} 0;\n  width: 248px;\n`;\n\nexport type NavigationMenuSectionItemIconProps = ContainerProps & {\n  icon: NonNullable<IconProps[\"icon\"]>;\n};\n\nconst NavigationMenuSectionItemIcon = styled(\n  ({ icon, ...props }: NavigationMenuSectionItemIconProps) => (\n    <Container align={\"center\"} justify={\"center\"} {...props}>\n      <Container\n        bw={1}\n        align={\"center\"}\n        justify={\"center\"}\n        w={32}\n        h={32}\n        br={\"square\"}\n      >\n        <Icon icon={icon} />\n      </Container>\n    </Container>\n  ),\n)``;\n\nexport type NavigationMenuSectionItemNameProps = TextProps;\n\nconst NavigationMenuSectionItemName = styled(\n  ({ children, ...props }: NavigationMenuSectionItemNameProps) => (\n    <Text size={\"compact\"} {...props}>\n      {children}\n    </Text>\n  ),\n)``;\n\nexport type NavigationMenuSectionItemDescriptionProps = TextProps;\n\nconst NavigationMenuSectionItemDescription = styled(\n  ({ children, ...props }: NavigationMenuSectionItemDescriptionProps) => (\n    <Text size={\"tiny\"} color={\"light\"} {...props}>\n      {children}\n    </Text>\n  ),\n)``;\n\nexport const NavigationMenu = {\n  Container: NavigationMenuContainerWithContext,\n  List: withDecorator(NavigationMenuList),\n  Item: withDecorator(NavigationMenuItemWithContext),\n  Button: NavigationMenuButton,\n  ButtonIcon: NavigationMenuButtonIcon,\n  Content: NavigationMenuContent,\n  Section: withDecorator(NavigationMenuSection),\n  SectionHeader: NavigationMenuSectionHeader,\n  SectionContent: withDecorator(NavigationMenuSectionContent),\n  SectionItem: withDecorator(NavigationMenuSectionItem),\n  SectionItemIcon: NavigationMenuSectionItemIcon,\n  SectionItemName: NavigationMenuSectionItemName,\n  SectionItemDescription: NavigationMenuSectionItemDescription,\n};\n","import React from \"react\";\nimport {\n  RiAlarmWarningLine,\n  RiCheckboxCircleLine,\n  RiErrorWarningLine,\n  RiInformationLine,\n} from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useTheme } from \"../../hooks\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\nimport { convertRGBToRGBA } from \"../../utils/convertRGBToRGBA\";\nimport Container from \"../Container\";\nimport Icon from \"../Icon\";\n\ntype Props = {\n  /**\n   * The size of the note.\n   * @default \"normal\"\n   */\n  size?: NormalSizes;\n\n  /**\n   * The type of the note.\n   * @default \"primary\"\n   */\n  type?: \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\" | \"danger\";\n\n  /**\n   * The action of the note.\n   */\n  action?: JSX.Element;\n\n  /**\n   * The fill color of the note.\n   * @default false\n   */\n  fill?: boolean;\n\n  /**\n   * The label of the note.\n   * @default true\n   */\n  label?: boolean | string;\n};\n\nexport type NoteProps = KitchnComponent<Props>;\n\nconst NoteComponent = styled(\n  ({\n    as: Component = \"div\",\n    type,\n    action,\n    label = true,\n    size,\n    // Prevents the 'fill' prop from being passed to the DOM element\n    fill: _fill,\n    children,\n    ...props\n  }: NoteProps) => {\n    const { theme } = useTheme();\n    return (\n      <Component role={\"note\"} size={size} {...props}>\n        <Container align={\"center\"} gap={\"small\"} row>\n          {label && (\n            <NoteLabel>\n              <Icon\n                color={\"inherit\"}\n                icon={\n                  type === \"success\"\n                    ? RiCheckboxCircleLine\n                    : type === \"danger\"\n                      ? RiAlarmWarningLine\n                      : type === \"warning\"\n                        ? RiErrorWarningLine\n                        : RiInformationLine\n                }\n                size={\n                  size === \"small\"\n                    ? theme.size.compact\n                    : size === \"large\"\n                      ? theme.size.large\n                      : theme.size.medium\n                }\n              />\n            </NoteLabel>\n          )}\n\n          <NoteContent>{children}</NoteContent>\n        </Container>\n        {action && <NoteAction>{action}</NoteAction>}\n      </Component>\n    );\n  },\n)<NoteProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n  user-select: none;\n  flex: 1;\n  gap: 10px;\n  font-weight: ${({ theme }) => theme.weight.light};\n  border-radius: 8px;\n  background-color: ${({ theme, type, fill }) => {\n    if (fill) {\n      switch (type) {\n        case \"danger\":\n          return theme.colors.accent.danger;\n        case \"warning\":\n          return theme.colors.accent.warning;\n        case \"info\":\n          return theme.colors.accent.info;\n        case \"success\":\n          return theme.colors.accent.success;\n        case \"secondary\":\n          return theme.colors.layout.light;\n        case \"primary\":\n        default:\n          return theme.colors.layout.dark;\n      }\n    }\n    return \"transparent\";\n  }};\n\n  color: ${({ theme, type, fill }) => {\n    if (fill) {\n      switch (type) {\n        case \"danger\":\n        case \"warning\":\n        case \"info\":\n        case \"success\":\n        case \"secondary\":\n          return theme.colors.accent.light;\n        case \"primary\":\n        default:\n          return theme.colors.text.lightest;\n      }\n    } else {\n      switch (type) {\n        case \"danger\":\n          return theme.colors.accent.danger;\n        case \"warning\":\n          return theme.colors.accent.warning;\n        case \"info\":\n          return theme.colors.accent.info;\n        case \"success\":\n          return theme.colors.accent.success;\n        case \"secondary\":\n          return theme.colors.text.light;\n        case \"primary\":\n        default:\n          return theme.colors.text.lightest;\n      }\n    }\n  }};\n\n  padding: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"4px 8px\";\n      case \"large\":\n        return \"12px 16px\";\n      case \"normal\":\n      default:\n        return \"8px 12px\";\n    }\n  }};\n\n  font-size: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return props.theme.size.small;\n      case \"large\":\n        return props.theme.size.normal;\n      case \"normal\":\n      default:\n        return props.theme.size.compact;\n    }\n  }};\n\n  border: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n        return `1px solid ${convertRGBToRGBA(theme.colors.accent.danger, 0.5)}`;\n      case \"warning\":\n        return `1px solid ${convertRGBToRGBA(theme.colors.accent.warning, 0.5)}`;\n      case \"info\":\n        return `1px solid ${convertRGBToRGBA(theme.colors.accent.info, 0.5)}`;\n      case \"success\":\n        return `1px solid ${convertRGBToRGBA(theme.colors.accent.success, 0.5)}`;\n      case \"secondary\":\n        return `1px solid ${convertRGBToRGBA(theme.colors.layout.light, 0.5)}`;\n      case \"primary\":\n      default:\n        return `1px solid ${convertRGBToRGBA(theme.colors.layout.dark, 0.5)}`;\n    }\n  }};\n`;\n\nexport const NoteLabel = styled.span`\n  font-size: inherit;\n  color: inherit;\n`;\n\nexport const NoteContent = styled.span`\n  font-size: inherit;\n  font-family: inherit;\n  color: inherit;\n  text-align: left;\n`;\n\nexport const NoteAction = styled.div``;\n\nNoteComponent.displayName = \"KitchnNote\";\nexport const Note = withDecorator(NoteComponent);\nexport default Note;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useBreakpoint } from \"../../hooks/useBreakpoint\";\nimport { KitchnComponent } from \"../../types\";\n\ntype Props = {\n  value: number;\n  max?: number;\n  colors?: Record<number, string>;\n  states?: Record<number, string | React.ReactNode>;\n  title?: boolean;\n  checkpointTitle?: boolean;\n  checkpointStyle?: \"round\" | \"bar\";\n};\n\nexport type ProgressProps = KitchnComponent<\n  Props,\n  React.ProgressHTMLAttributes<HTMLProgressElement>\n>;\n\nconst ProgressComponent = styled(\n  ({\n    value,\n    max = 100,\n    colors,\n    states,\n    title = true,\n    checkpointTitle = true,\n    checkpointStyle = \"round\",\n    ...props\n  }: ProgressProps) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const [containerWidth, setContainerWidth] = React.useState<number>(0);\n    const [isHover, setIsHover] = React.useState<number | null>(null);\n\n    React.useEffect(() => {\n      if (containerRef.current)\n        setContainerWidth(containerRef.current.clientWidth);\n      window.addEventListener(\"resize\", handleResize);\n    }, []);\n\n    const handleResize = () => {\n      if (containerRef.current)\n        setContainerWidth(containerRef.current.clientWidth);\n    };\n\n    const background = colors\n      ? Object.keys(colors)\n          .map((key) => parseInt(key, 10))\n          .filter((key) => key <= value)\n          .map((key) => colors[key])\n          .pop()\n      : undefined;\n\n    const state = states\n      ? Object.keys(states)\n          .map((key) => parseInt(key, 10))\n          .filter((key) => key <= value)\n          .map((key) => states[key])\n          .pop()\n      : undefined;\n\n    const { isMobile } = useBreakpoint();\n\n    return (\n      <ProgressContainer\n        role={\"progressbar\"}\n        aria-valuenow={value}\n        aria-valuemin={0}\n        aria-valuemax={max}\n        states={states}\n        ref={containerRef}\n      >\n        {states && title && (\n          <ProgressState visible={!!state}>\n            {state || \"unknow state\"}\n          </ProgressState>\n        )}\n        <Component\n          value={value}\n          max={max}\n          {...props}\n          background={background}\n          checkpointStyle={checkpointStyle}\n        />\n        <ProgressCheckpointContainer>\n          {states &&\n            Object.keys(states).map((key, index) => {\n              const checkpoint = parseInt(key, 10);\n              const active = checkpoint <= value;\n              const first = checkpoint === 0;\n              const last = checkpoint === max;\n              return (\n                <React.Fragment key={index}>\n                  <ProgressCheckpoint\n                    aria-hidden={\"true\"}\n                    key={checkpoint}\n                    value={checkpoint}\n                    color={active ? background : undefined}\n                    first={first}\n                    last={last}\n                    onMouseEnter={() => setIsHover(checkpoint)}\n                    onMouseLeave={() => setIsHover(null)}\n                    hasTitle={states && title}\n                    max={max}\n                    amount={Object.keys(states).length}\n                    checkpointStyle={checkpointStyle}\n                  />\n                  {!isMobile && checkpointTitle && (\n                    <ProgressCheckpointTitle\n                      aria-hidden={\"true\"}\n                      first={first}\n                      last={last}\n                      active={\n                        (active && containerWidth > 0) || isHover === checkpoint\n                      }\n                    >\n                      {states[checkpoint]}\n                    </ProgressCheckpointTitle>\n                  )}\n                </React.Fragment>\n              );\n            })}\n        </ProgressCheckpointContainer>\n      </ProgressContainer>\n    );\n  },\n)<\n  ProgressProps & {\n    background?: string;\n  }\n>`\n  appearance: none;\n  border: none;\n  height: 10px;\n  display: block;\n  vertical-align: unset;\n  width: 100%;\n\n  &::-webkit-progress-bar {\n    border-radius: 5px;\n    background-color: ${({ theme, checkpointStyle }) =>\n      checkpointStyle === \"bar\" ? \"transparent\" : theme.colors.layout.dark};\n  }\n\n  &::-webkit-progress-value {\n    border-radius: 5px;\n    transition: all 0.1s ease-in-out;\n  }\n`;\n\nconst Component = styled.progress<{\n  background?: string;\n  checkpointStyle: ProgressProps[\"checkpointStyle\"];\n}>`\n  &::-webkit-progress-value {\n    background: ${({ theme, background, checkpointStyle }) =>\n      checkpointStyle === \"bar\"\n        ? \"transparent\"\n        : background || theme.colors.layout.lightest};\n  }\n`;\n\nexport const ProgressContainer = styled.div<{\n  states?: ProgressProps[\"states\"];\n}>`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  ${({ states, theme }) => states && `margin-bottom: ${theme.gap.normal};`}\n`;\n\nexport const ProgressState = styled.span<{\n  visible: boolean;\n}>`\n  margin-bottom: 15px;\n  font-size: ${({ theme }) => theme.size.small};\n  font-style: italic;\n  font-weight: ${({ theme }) => theme.weight.bold};\n  color: ${({ theme }) => theme.colors.text.light};\n  opacity: ${({ visible }) => (visible ? 1 : 0)};\n`;\n\nexport const ProgressCheckpointContainer = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.gap.small};\n`;\n\nexport const ProgressCheckpointTitle = styled.span<{\n  active: boolean;\n  first?: boolean;\n  last?: boolean;\n}>`\n  margin-top: ${({ theme }) => theme.gap.normal};\n  opacity: 0;\n  font-size: ${({ theme }) => theme.size.small};\n  font-style: italic;\n  color: ${({ theme }) => theme.colors.text.light};\n  transition: all 0.3s ease-in-out;\n  flex: 1;\n  ${({ active }) => active && \"opacity: 0.9;\"};\n  text-align: ${({ first, last }) =>\n    first ? \"left\" : last ? \"right\" : \"center\"};\n`;\n\nexport const ProgressCheckpoint = styled.div<{\n  value: number;\n  max: number;\n  color?: string;\n  first?: boolean;\n  last?: boolean;\n  hasTitle?: boolean;\n  amount: number;\n  checkpointStyle: ProgressProps[\"checkpointStyle\"];\n}>`\n  position: absolute;\n  top: ${({ hasTitle, checkpointStyle }) =>\n    hasTitle\n      ? `${checkpointStyle === \"bar\" ? 28 : 24}px`\n      : `${checkpointStyle === \"bar\" ? 0 : -4}px`};\n  left: ${({ value, max }) => `${(value * 100) / max}%`};\n  width: ${({ checkpointStyle, amount }) =>\n    checkpointStyle === \"bar\" ? `calc(${100 / amount}% - 2px)` : \"18px\"};\n  height: ${({ checkpointStyle }) =>\n    checkpointStyle === \"bar\" ? \"10px\" : \"18px\"};\n  border-radius: ${({ theme }) => theme.radius.round};\n  ${({ checkpointStyle, first, last }) => `\n    ${!first && checkpointStyle === \"bar\" ? \"border-top-left-radius: 0; border-bottom-left-radius: 0;\" : \"\"}\n    ${!last && checkpointStyle === \"bar\" ? \"border-top-right-radius: 0; border-bottom-right-radius: 0;\" : \"\"}\n  `};\n  background: ${({ theme, color, checkpointStyle }) =>\n    checkpointStyle === \"bar\"\n      ? color || theme.colors.layout.dark\n      : color || theme.colors.layout.light};\n  z-index: 1;\n  transform: ${({ value, max, first, last }) =>\n    first\n      ? \"translateX(0)\"\n      : last\n        ? \"translateX(-100%)\"\n        : `translateX(-${(value * 100) / max}%)`};\n\n  &:hover {\n    ${ProgressCheckpointTitle} {\n      opacity: 1;\n    }\n  }\n`;\n\nProgressComponent.displayName = \"KitchnProgress\";\nexport const Progress = withDecorator(ProgressComponent);\nexport default Progress;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { convertRGBToRGBA } from \"../../utils/convertRGBToRGBA\";\n\ntype Props = React.PropsWithChildren;\n\nexport type ScrollerProps = KitchnComponent<Props>;\n\nconst ScrollerComponent = styled(({ children, ...props }: ScrollerProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [showTopGradient, setShowTopGradient] = useState(false);\n  const [showBottomGradient, setShowBottomGradient] = useState(false);\n  const [showLeftGradient, setShowLeftGradient] = useState(false);\n  const [showRightGradient, setShowRightGradient] = useState(false);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      const updateGradients = () => {\n        const hasVerticalScrollbar =\n          container.scrollHeight > container.clientHeight;\n        const hasHorizontalScrollbar =\n          container.scrollWidth > container.clientWidth;\n\n        setShowTopGradient(container.scrollTop > 0 && hasVerticalScrollbar);\n        setShowBottomGradient(\n          container.scrollHeight - container.scrollTop >\n            container.clientHeight && hasVerticalScrollbar,\n        );\n        setShowLeftGradient(container.scrollLeft > 0 && hasHorizontalScrollbar);\n        setShowRightGradient(\n          container.scrollWidth - container.scrollLeft >\n            container.clientWidth && hasHorizontalScrollbar,\n        );\n      };\n\n      container.addEventListener(\"scroll\", updateGradients);\n\n      updateGradients();\n\n      return () => {\n        container.removeEventListener(\"scroll\", updateGradients);\n      };\n    }\n\n    return undefined;\n  }, [children]);\n\n  return (\n    <Container {...props}>\n      <ScrollerContainer ref={containerRef}>{children}</ScrollerContainer>\n      <TopGradient show={showTopGradient} />\n      <BottomGradient show={showBottomGradient} />\n      <LeftGradient show={showLeftGradient} />\n      <RightGradient show={showRightGradient} />\n    </Container>\n  );\n})<ScrollerProps>`\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  overflow: hidden;\n`;\n\nconst ScrollerContainer = styled.div`\n  overflow: auto;\n  height: 100%;\n  width: 100%;\n  scrollbar-width: none;\n`;\n\nconst Gradient = styled.div<{ show: boolean }>`\n  position: absolute;\n  width: 100%;\n  opacity: ${({ show }) => (show ? 1 : 0)};\n  transition: opacity 0.2s ease-in-out;\n`;\n\nconst TopGradient = styled(Gradient)`\n  top: 0;\n  left: 0;\n  height: 20px;\n  background: ${({ theme }) => `\n      linear-gradient(\n    to top,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.1)},\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.3)} 30%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.5)} 50%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.7)} 70%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 1)} 100%\n  )\n  `};\n`;\n\nconst BottomGradient = styled(Gradient)`\n  bottom: 0;\n  left: 0;\n  height: 20px;\n  background: ${({ theme }) => `\n      linear-gradient(\n    to bottom,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.1)},\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.3)} 30%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.5)} 50%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.7)} 70%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 1)} 100%\n  )\n  `};\n`;\n\nconst LeftGradient = styled(Gradient)`\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 20px;\n  background: ${({ theme }) => `\n      linear-gradient(\n    to left,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.1)},\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.3)} 30%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.5)} 50%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.7)} 70%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 1)} 100%\n  )\n  `};\n`;\n\nconst RightGradient = styled(Gradient)`\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 20px;\n  background: ${({ theme }) => `\n      linear-gradient(\n    to right,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.1)},\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.3)} 30%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.5)} 50%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 0.7)} 70%,\n    ${convertRGBToRGBA(theme.colors.layout.darkest, 1)} 100%\n  )\n  `};\n`;\n\nScrollerComponent.displayName = \"KitchnSelect\";\nexport const Scroller = withDecorator(ScrollerComponent);\nexport default Scroller;\n","import React, { forwardRef } from \"react\";\nimport { RiArrowDownSLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent, NormalSizes } from \"../../types\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Text, { TextProps } from \"../Text\";\n\ntype Props = {\n  /**\n   * The size of the select.\n   * @default \"normal\"\n   */\n  size?: NormalSizes;\n  /**\n   * The label of the select.\n   */\n  label?: string;\n  /**\n   * The placeholder of the select.\n   */\n  placeholder?: string;\n  /**\n   * The prefix of the select.\n   */\n  prefix?: JSX.Element | string;\n  /**\n   * The suffix of the select.\n   */\n  suffix?: JSX.Element | string;\n  disabled?: boolean;\n};\n\nexport type SelectProps = KitchnComponent<\n  Props,\n  React.SelectHTMLAttributes<HTMLSelectElement>\n>;\n\nconst SelectForwarded = forwardRef<HTMLSelectElement, SelectProps>(\n  (\n    {\n      size = \"normal\",\n      label,\n      placeholder,\n      prefix,\n      suffix = <RiArrowDownSLine />,\n      disabled,\n      children,\n      ...props\n    }: SelectProps,\n    ref: React.Ref<HTMLSelectElement>,\n  ) => {\n    return (\n      <SelectContainer size={size}>\n        {label && <SelectLabel>{label}</SelectLabel>}\n        <SelectSelectorContainer>\n          {prefix && <SelectPrefix>{prefix}</SelectPrefix>}\n          {suffix && <SelectSuffix>{suffix}</SelectSuffix>}\n          <SelectSelector\n            aria-label={label}\n            size={size}\n            prefix={prefix}\n            suffix={suffix}\n            placeholder={placeholder}\n            disabled={disabled}\n            defaultValue={placeholder}\n            ref={ref}\n            {...props}\n          >\n            {placeholder && (\n              <option disabled value={placeholder}>\n                {placeholder}\n              </option>\n            )}\n            {children}\n          </SelectSelector>\n        </SelectSelectorContainer>\n      </SelectContainer>\n    );\n  },\n);\n\nSelectForwarded.displayName = \"Select\";\n\nconst SelectComponent = styled(SelectForwarded)<SelectProps>``;\n\nconst SelectContainer = styled((props: ContainerProps) => (\n  <Container {...props} label />\n))<{\n  size: SelectProps[\"size\"];\n}>`\n  font-size: ${({ size, theme }) => {\n    switch (size) {\n      case \"small\":\n        return theme.size.tiny;\n      case \"large\":\n        return theme.size.normal;\n      case \"normal\":\n      default:\n        return theme.size.small;\n    }\n  }};\n`;\n\nconst SelectLabel = styled((props: TextProps) => (\n  <Text\n    size={\"compact\"}\n    weight={\"medium\"}\n    mb={\"small\"}\n    color={\"light\"}\n    span\n    {...props}\n  />\n))``;\n\nconst SelectPrefix = styled.span`\n  box-sizing: border-box;\n  display: flex;\n  left: 8px;\n  position: absolute;\n  pointer-events: none;\n`;\n\nconst SelectSuffix = styled.span`\n  box-sizing: border-box;\n  display: flex;\n  right: 8px;\n  position: absolute;\n  pointer-events: none;\n`;\n\nconst SelectSelectorContainer = styled.div`\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  position: relative;\n\n  ${SelectPrefix}, ${SelectSuffix} {\n    transition: color 0.2s ease-in-out;\n    color: ${({ theme }) => theme.colors.text.lighter};\n  }\n\n  &:hover {\n    ${SelectPrefix}, ${SelectSuffix} {\n      color: ${({ theme }) => theme.colors.text.lightest};\n    }\n  }\n`;\n\nexport const SelectSelector = styled.select<SelectProps>`\n  width: 100%;\n  padding: 0 ${({ theme }) => theme.gap.small};\n  height: ${(props) => {\n    switch (props.size) {\n      case \"small\":\n        return \"30px\";\n      case \"large\":\n        return \"50px\";\n      case \"normal\":\n      default:\n        return \"40px\";\n    }\n  }};\n  font-size: inherit;\n  outline: none;\n  transition: border-color 0.2s ease-in-out;\n  appearance: none;\n  border-radius: ${({ theme }) => theme.radius.square};\n  background-color: ${({ theme, disabled }) =>\n    disabled ? theme.colors.layout.darker : theme.colors.layout.darkest};\n  border: 1px solid ${({ theme }) => theme.colors.layout.dark};\n  ${({ theme, prefix }) => prefix && `padding-left: ${theme.gap.large};`}\n  ${({ theme, suffix }) => suffix && `padding-right: ${theme.gap.large};`}\n\n  option {\n    font-size: inherit;\n  }\n\n  &:hover,\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.layout.light};\n  }\n`;\n\nSelectComponent.displayName = \"KitchnSelect\";\nexport const Select = withDecorator(SelectComponent);\nexport default Select;\n","import React from \"react\";\nimport { RiCheckLine, RiFileCopyLine } from \"react-icons/ri\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc\";\nimport { useClipboard, useToasts } from \"../../hooks\";\nimport { AccentColors, KitchnComponent } from \"../../types\";\nimport Container, { ContainerProps } from \"../Container\";\nimport Icon from \"../Icon\";\nimport Text, { TextProps } from \"../Text\";\n\ntype Props = {\n  text: string | string[];\n  prompt?: boolean;\n  type?: keyof AccentColors;\n  onCopy?: (text: string) => void;\n};\n\nexport type SnippetProps = KitchnComponent<Props, ContainerProps>;\n\nconst SnippetComponent = styled(\n  ({ text, prompt = true, onCopy, ...props }: SnippetProps) => {\n    const { copy } = useClipboard();\n    const { setToast } = useToasts();\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    const copyHandler = (event: React.MouseEvent) => {\n      event.stopPropagation();\n      event.preventDefault();\n      copy(Array.isArray(text) ? text.join(\"\\n\") : text);\n      onCopy && onCopy(Array.isArray(text) ? text.join(\"\\n\") : text);\n      setToast({ text: \"Code copied.\" });\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    };\n\n    return (\n      <Container\n        py={\"small\"}\n        pl={\"small\"}\n        pr={32 + 15}\n        br={\"square\"}\n        {...props}\n        position={\"relative\"}\n      >\n        {Array.isArray(text) ? (\n          text.map((t, i) => (\n            <SnippetLine\n              pre\n              monospace\n              size={\"compact\"}\n              prompt={prompt}\n              color={\"inherit\"}\n              lineHeight={1.5}\n              key={i}\n            >\n              {t}\n            </SnippetLine>\n          ))\n        ) : (\n          <SnippetLine\n            pre\n            monospace\n            size={\"compact\"}\n            prompt={prompt}\n            color={\"inherit\"}\n            lineHeight={1.5}\n          >\n            {text}\n          </SnippetLine>\n        )}\n\n        <Container\n          position={\"absolute\"}\n          cursor={\"pointer\"}\n          h={32}\n          w={32}\n          top={\"50%\"}\n          right={\"tiny\"}\n          align={\"center\"}\n          justify={\"center\"}\n          transform={\"translateY(-50%)\"}\n          onClick={copyHandler}\n          title={\"Copy Code\"}\n        >\n          <Text color={\"inherit\"} span>\n            {isCopied ? (\n              <Icon icon={RiCheckLine} color={\"inherit\"} />\n            ) : (\n              <Icon icon={RiFileCopyLine} color={\"inherit\"} />\n            )}\n          </Text>\n        </Container>\n      </Container>\n    );\n  },\n)`\n  color: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n      case \"warning\":\n      case \"info\":\n      case \"success\":\n      case \"secondary\":\n        return theme.colors.accent.light;\n      case \"primary\":\n      default:\n        return theme.colors.text.lightest;\n    }\n  }};\n\n  background-color: ${({ theme, type }) => {\n    switch (type) {\n      case \"danger\":\n        return theme.colors.accent.danger;\n      case \"warning\":\n        return theme.colors.accent.warning;\n      case \"info\":\n        return theme.colors.accent.info;\n      case \"success\":\n        return theme.colors.accent.success;\n      case \"secondary\":\n        return theme.colors.layout.light;\n      case \"primary\":\n      default:\n        return theme.colors.layout.darkest;\n    }\n  }};\n\n  border: 1px solid\n    ${({ theme, type }) => {\n      switch (type) {\n        case \"danger\":\n          return theme.colors.accent.danger;\n        case \"warning\":\n          return theme.colors.accent.warning;\n        case \"info\":\n          return theme.colors.accent.info;\n        case \"success\":\n          return theme.colors.accent.success;\n        case \"secondary\":\n          return theme.colors.layout.light;\n        case \"primary\":\n        default:\n          return theme.colors.layout.dark;\n      }\n    }};\n`;\n\nexport type SnippetLineProps = TextProps & {\n  prompt?: boolean;\n};\n\nexport const SnippetLine = styled(\n  ({ prompt: _prompt, ...props }: SnippetLineProps) => <Text {...props} />,\n)<SnippetLineProps>`\n  &::before {\n    content: \"${(props) => (props.prompt ? \"$ \" : \"\")}\";\n    user-select: none;\n  }\n`;\n\nSnippetComponent.displayName = \"KitchnSnippet\";\nexport const Snippet = withDecorator(SnippetComponent);\nexport default Snippet;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\nimport { Gap } from \"../../types/theme\";\nimport { isNumber } from \"../../utils/isNumber\";\n\ntype Props = {\n  x?: number | string | keyof Gap;\n  y?: number | string | keyof Gap;\n};\n\nexport type SpacerProps = KitchnComponent<Props>;\n\nconst SpacerComponent = styled(({ ...props }: SpacerProps) => {\n  return <span role={\"presentation\"} {...props} />;\n})<SpacerProps>`\n  display: block;\n  width: 1px;\n  height: 1px;\n  min-width: 1px;\n  min-height: 1px;\n  margin-left: calc(\n    ${(props) =>\n        props.x\n          ? props.theme.gap[props.x as keyof Gap] ||\n            (isNumber(props.x)\n              ? `${props.theme.gap.normal} * ${props.x}`\n              : props.x)\n          : \"1px\"} - 1px\n  );\n  margin-top: calc(\n    ${(props) =>\n        props.y\n          ? props.theme.gap[props.y as keyof Gap] ||\n            (isNumber(props.y)\n              ? `${props.theme.gap.normal} * ${props.y}`\n              : props.y)\n          : \"1px\"} - 1px\n  );\n`;\n\nSpacerComponent.displayName = \"KitchnSpacer\";\nexport const Spacer = withDecorator(SpacerComponent);\nexport default Spacer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { useRect } from \"../../hooks/useRect\";\nimport { isString } from \"../../utils\";\nimport { capitalize } from \"../../utils/capitalize\";\nimport Highlight from \"../Highlight\";\nimport { TabProps, TabsProps } from \"../Tabs\";\n\nexport type ControlProps = TabProps;\n\nexport type SwitchProps = TabsProps;\n\nconst SwitchComponent = styled(\n  ({\n    tabs,\n    disabled = false,\n    selected,\n    setSelected,\n    hoverHeightRatio = 1,\n    hoverWidthRatio = 1,\n    highlight = true,\n    ...props\n  }: SwitchProps) => {\n    const containerRef = React.useRef<HTMLDivElement | null>(null);\n    const [displayHighlight, setDisplayHighlight] =\n      React.useState<boolean>(false);\n    const { rect, setRect } = useRect();\n\n    const tabItemMouseOverHandler = (\n      event: React.MouseEvent<HTMLDivElement>,\n    ) => {\n      if (!event.target) return;\n      setRect(event, () => containerRef.current);\n      if (highlight) {\n        setDisplayHighlight(true);\n      }\n    };\n\n    const handleClick = (\n      event: React.MouseEvent<HTMLDivElement>,\n      tab: ControlProps,\n    ) => {\n      disabled ? event.preventDefault() : setSelected(tab.value);\n    };\n\n    return (\n      <div\n        role={\"tablist\"}\n        ref={containerRef}\n        onMouseLeave={() => setDisplayHighlight(false)}\n        {...props}\n      >\n        <Highlight\n          rect={rect}\n          visible={displayHighlight}\n          hoverHeightRatio={hoverHeightRatio}\n          hoverWidthRatio={hoverWidthRatio}\n        />\n        {tabs &&\n          tabs.map((tab) => (\n            <Control\n              role={\"tab\"}\n              key={tab.value}\n              onClick={(event: React.MouseEvent<HTMLDivElement>) =>\n                handleClick(event, tab)\n              }\n              active={selected === tab.value}\n              onMouseOver={tabItemMouseOverHandler}\n              disabled={disabled}\n              {...tab}\n            >\n              <>{tab.icon && tab.icon}</>\n              <>\n                {isString(tab.title)\n                  ? capitalize(tab.title as string)\n                  : tab.title}\n              </>\n            </Control>\n          ))}\n      </div>\n    );\n  },\n)<SwitchProps>`\n  position: relative;\n  display: flex;\n  flex-grow: 0;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.accent.dark};\n  font-weight: ${({ theme }) => theme.weight.medium};\n  box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.layout.dark}; // because border will add 2px to the hightlight rect\n  border-radius: ${({ theme }) => theme.radius.square};\n  padding: 4px;\n  gap: 1px;\n`;\n\nexport const Control = styled.div<{ active?: boolean; disabled: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  cursor: ${({ disabled }) => (disabled ? \"default\" : \"pointer\")};\n  color: ${({ theme, active, disabled }) => {\n    if (disabled) return theme.colors.text.darker;\n    if (active) return theme.colors.text.lightest;\n    return theme.colors.text.light;\n  }};\n  user-select: none;\n  padding: 6px ${({ theme }) => theme.gap.small};\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  outline: 0;\n  white-space: nowrap;\n  border-radius: ${({ theme }) => theme.radius.square};\n  background-color: ${({ theme, active }) =>\n    active ? theme.colors.layout.dark : \"transparent\"};\n  transition: all 0.2s;\n  z-index: 1;\n\n  svg {\n    max-height: 1em;\n    margin-right: ${({ theme }) => theme.gap.tiny};\n  }\n\n  &:hover {\n    color: ${({ theme, disabled }) =>\n      !disabled ? theme.colors.text.lightest : theme.colors.text.darker};\n  }\n`;\n\nSwitchComponent.displayName = \"KitchnSwitch\";\nexport const Switch = withDecorator(SwitchComponent);\nexport default Switch;\n","import React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\n\ntype Props = {\n  placeholder?: string;\n  disabled?: boolean;\n  errored?: boolean;\n  defaultValue?: string;\n  width?: number | string;\n  height?: number | string;\n  resize?: \"none\" | \"both\" | \"horizontal\" | \"vertical\";\n};\n\nexport type TextareaProps = KitchnComponent<\n  Props,\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>\n>;\n\nconst TextareaForwarded = forwardRef<HTMLTextAreaElement, TextareaProps>(\n  (\n    {\n      placeholder,\n      disabled,\n      defaultValue,\n      // Prevents the 'errored' prop from being passed to the textarea element\n      errored: _errored,\n      ...props\n    }: TextareaProps,\n    ref: React.Ref<HTMLTextAreaElement>,\n  ) => {\n    return (\n      <textarea\n        ref={ref}\n        aria-disabled={disabled}\n        placeholder={placeholder}\n        disabled={disabled}\n        defaultValue={defaultValue}\n        {...props}\n      />\n    );\n  },\n);\n\nTextareaForwarded.displayName = \"Textarea\";\n\nconst TextareaComponent = styled(TextareaForwarded)<TextareaProps>`\n  position: relative;\n  outline: none;\n  transition: all 0.2s;\n  user-select: none;\n  resize: ${({ resize = \"none\" }) => resize};\n  border-radius: ${({ theme }) => theme.radius.square};\n  padding: ${({ theme }) => theme.gap.small};\n  width: ${({ width }) => (width ? `${width}px` : \"100%\")};\n  height: ${({ height }) => (height ? `${height}px` : \"auto\")};\n  min-height: 50px;\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"text\")};\n  background-color: ${({ theme, disabled }) =>\n    disabled ? theme.colors.layout.darker : theme.colors.layout.darkest};\n  font-size: ${({ theme }) => theme.size.small};\n  border: 1px solid\n    ${({ errored, disabled, theme }) =>\n      errored\n        ? theme.colors.accent.danger\n        : disabled\n          ? theme.colors.layout.darker\n          : theme.colors.layout.dark};\n  color: ${({ errored, theme }) =>\n    errored ? theme.colors.accent.danger : theme.colors.text.lightest};\n  :placeholder {\n    color: ${({ theme }) => theme.colors.text.light};\n  }\n  &:focus {\n    border: 1px solid\n      ${({ theme, errored }) =>\n        errored ? theme.colors.accent.danger : theme.colors.layout.lighter};\n  }\n`;\n\nTextareaComponent.displayName = \"KitchnTextarea\";\nexport const Textarea = withDecorator(TextareaComponent);\nexport default Textarea;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { convertRGBToRGBA } from \"../../..\";\nimport { withDecorator } from \"../../../hoc/withDecorator\";\nimport { Toast, ToastLayout } from \"../../../hooks/useToasts\";\nimport { KitchnComponent } from \"../../../types\";\nimport { getTranslateByPlacement } from \"../../../utils/getTranslateByPlacement\";\nimport Container from \"../../Container\";\nimport Text from \"../../Text\";\nimport ToastActions from \"../Actions\";\n\ntype Props = {\n  toast: Toast;\n  layout: Required<ToastLayout>;\n};\n\nexport type ToastItemProps = KitchnComponent<Props>;\n\nconst ToastItemComponent = styled(\n  ({ toast, layout, ...props }: ToastItemProps) => {\n    const [animationState, setAnimationState] = React.useState<\n      \"entrance\" | \"exit\" | \"done\" | null\n    >(null);\n    const [renderable, setRenderable] = React.useState<boolean>(toast.visible);\n    const isReactNode = typeof toast.text !== \"string\";\n\n    const { enter, leave } = React.useMemo(\n      () => getTranslateByPlacement(layout.placement),\n      [layout.placement],\n    );\n\n    React.useEffect(() => {\n      const time = 60;\n      if (toast.visible && !renderable) {\n        setRenderable(true);\n      }\n\n      const timer = setTimeout(() => {\n        setAnimationState(toast.visible ? \"entrance\" : \"exit\");\n        setTimeout(() => {\n          if (!toast.visible) setAnimationState(\"done\");\n        }, 350);\n        clearTimeout(timer);\n      }, time);\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [renderable, toast.visible]);\n\n    if (!renderable) return null;\n    return (\n      <ToastItemAnimationContainer\n        role={\"alert\"}\n        aria-live={\"polite\"}\n        key={toast.id}\n        animationState={animationState}\n        enter={enter}\n        leave={leave}\n        layout={layout}\n        toast={toast}\n        {...props}\n      >\n        {isReactNode ? (\n          toast.text\n        ) : (\n          <Container row justify={\"space-between\"} w={\"100%\"}>\n            <Text color={\"inherit\"}>{toast.text}</Text>\n            <ToastActions actions={toast.actions} cancelHandle={toast.cancel} />\n          </Container>\n        )}\n      </ToastItemAnimationContainer>\n    );\n  },\n)<ToastItemProps>`\n  width: ${({ layout }) => layout.width};\n  max-width: ${({ layout }) => layout.maxWidth};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.layout.lightest};\n  border-radius: ${({ theme }) => theme.radius.square};\n  overflow: hidden;\n  transition: all 350ms cubic-bezier(0.1, 0.2, 0.1, 1);\n\n  color: ${({ theme, toast }) => {\n    switch (toast.type) {\n      case \"danger\":\n      case \"warning\":\n      case \"info\":\n      case \"success\":\n      case \"secondary\":\n        return theme.colors.accent.light;\n      case \"primary\":\n      default:\n        return theme.colors.text.lightest;\n    }\n  }};\n\n  background-color: ${({ theme, toast }) => {\n    switch (toast.type) {\n      case \"danger\":\n        return theme.colors.accent.danger;\n      case \"warning\":\n        return theme.colors.accent.warning;\n      case \"info\":\n        return theme.colors.accent.info;\n      case \"success\":\n        return theme.colors.accent.success;\n      case \"secondary\":\n        return theme.colors.layout.light;\n      case \"primary\":\n      default:\n        return theme.colors.layout.darkest;\n    }\n  }};\n`;\nexport const ToastItemAnimationContainer = styled.div<\n  ToastItemProps & {\n    animationState: \"entrance\" | \"exit\" | \"done\";\n    enter: string;\n    leave: string;\n  }\n>`\n  opacity: ${({ animationState }) => (animationState === \"entrance\" ? 1 : 0)};\n  transform: ${({ animationState, enter, leave }) =>\n    animationState === null\n      ? enter\n      : animationState === \"entrance\"\n        ? \"translate(0, 0)\"\n        : leave};\n  height: ${({ animationState }) =>\n    animationState && animationState !== \"done\" ? \"auto\" : 0};\n  padding: ${({ layout, animationState }) =>\n    animationState && animationState !== \"done\" ? layout.padding : 0};\n  margin: ${({ layout, animationState }) =>\n    animationState && animationState !== \"done\" ? layout.margin : 0};\n  border: ${({ animationState }) =>\n      animationState && animationState !== \"done\" ? \"1px\" : \"0\"}\n    solid\n    ${({ theme, toast }) => {\n      switch (toast.type) {\n        case \"danger\":\n          return convertRGBToRGBA(theme.colors.accent.danger, 0.5);\n        case \"warning\":\n          return convertRGBToRGBA(theme.colors.accent.warning, 0.5);\n        case \"info\":\n          return convertRGBToRGBA(theme.colors.accent.info, 0.5);\n        case \"success\":\n          return convertRGBToRGBA(theme.colors.accent.success, 0.5);\n        case \"secondary\":\n          return theme.colors.layout.lighter;\n        case \"primary\":\n        default:\n          return theme.colors.layout.dark;\n      }\n    }};\n`;\n\nToastItemComponent.displayName = \"KitchnToastItem\";\nconst ToastItemMemo = React.memo(ToastItemComponent);\nexport const ToastItem = withDecorator(ToastItemMemo);\nexport default ToastItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { withDecorator } from \"../../hoc/withDecorator\";\nimport { KitchnComponent } from \"../../types\";\n\ninterface Props {\n  checked?: boolean;\n  disabled?: boolean;\n  onChange?: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  large?: boolean;\n}\n\nexport type ToggleProps = KitchnComponent<\n  Props,\n  React.InputHTMLAttributes<HTMLInputElement>\n>;\n\nconst ToggleComponent = styled(\n  ({\n    disabled,\n    checked,\n    onChange,\n    // Prevents the 'large' prop from being passed to the input element\n    large: _large,\n    ...props\n  }: Props) => {\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return e.preventDefault();\n      if (onChange) onChange(e);\n    };\n\n    return (\n      <input\n        aria-checked={checked}\n        aria-disabled={disabled}\n        role={\"switch\"}\n        type={\"checkbox\"}\n        onChange={handleChange}\n        checked={checked}\n        disabled={disabled}\n        {...props}\n      />\n    );\n  },\n)`\n  appearance: none;\n  box-sizing: border-box;\n  width: ${({ large }) => (large ? \"40px\" : \"28px\")};\n  height: ${({ large }) => (large ? \"20px\" : \"14px\")};\n  border-radius: ${({ theme }) => theme.radius.round};\n  background-color: ${({ disabled, checked, theme }) =>\n    disabled\n      ? theme.colors.layout.dark\n      : checked\n        ? theme.colors.layout.lightest\n        : theme.colors.layout.dark};\n  position: relative;\n  transition: all 0.2s;\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  border: 1px solid\n    ${({ disabled, checked, theme }) =>\n      disabled\n        ? theme.colors.layout.dark\n        : checked\n          ? theme.colors.layout.lightest\n          : theme.colors.layout.dark};\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    width: ${({ large }) => (large ? \"18px\" : \"12px\")};\n    height: ${({ large }) => (large ? \"18px\" : \"12px\")};\n    background-color: ${({ disabled, checked, theme }) =>\n      disabled\n        ? theme.colors.layout.dark\n        : checked\n          ? theme.colors.layout.lightest\n          : theme.colors.layout.dark};\n    border-radius: ${({ theme }) => theme.radius.round};\n    transition: all 0.2s;\n    transform: translateX(\n      ${({ checked, large }) => (checked ? \"0\" : large ? \"20px\" : \"14px\")}\n    );\n  }\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: ${({ large }) => (large ? \"18px\" : \"12px\")};\n    height: ${({ large }) => (large ? \"18px\" : \"12px\")};\n    background-color: ${({ theme, disabled, checked }) =>\n      disabled\n        ? theme.colors.layout.darker\n        : checked\n          ? theme.colors.layout.darkest\n          : theme.colors.layout.light};\n    border-radius: ${({ theme }) => theme.radius.round};\n    transition: all 0.2s;\n    transform: translateX(\n      ${({ checked, large }) => (checked ? (large ? \"20px\" : \"14px\") : \"0\")}\n    );\n  }\n`;\n\nToggleComponent.displayName = \"KitchnToggle\";\nexport const Toggle = withDecorator(ToggleComponent);\nexport default Toggle;\n"]}